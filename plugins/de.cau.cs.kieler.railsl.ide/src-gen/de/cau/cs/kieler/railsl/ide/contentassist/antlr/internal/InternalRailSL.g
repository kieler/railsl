/*
 * generated by Xtext 2.16.0
 */
grammar InternalRailSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.cau.cs.kieler.railsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.kieler.railsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.cau.cs.kieler.railsl.services.RailSLGrammarAccess;

}
@parser::members {
	private RailSLGrammarAccess grammarAccess;

	public void setGrammarAccess(RailSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRailProgram
entryRuleRailProgram
:
{ before(grammarAccess.getRailProgramRule()); }
	 ruleRailProgram
{ after(grammarAccess.getRailProgramRule()); } 
	 EOF 
;

// Rule RailProgram
ruleRailProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRailProgramAccess().getBlockAssignment()); }
		(rule__RailProgram__BlockAssignment)
		{ after(grammarAccess.getRailProgramAccess().getBlockAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetStatement
entryRuleSetStatement
:
{ before(grammarAccess.getSetStatementRule()); }
	 ruleSetStatement
{ after(grammarAccess.getSetStatementRule()); } 
	 EOF 
;

// Rule SetStatement
ruleSetStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetStatementAccess().getAlternatives()); }
		(rule__SetStatement__Alternatives)
		{ after(grammarAccess.getSetStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrackStatement
entryRuleTrackStatement
:
{ before(grammarAccess.getTrackStatementRule()); }
	 ruleTrackStatement
{ after(grammarAccess.getTrackStatementRule()); } 
	 EOF 
;

// Rule TrackStatement
ruleTrackStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrackStatementAccess().getGroup()); }
		(rule__TrackStatement__Group__0)
		{ after(grammarAccess.getTrackStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePointStatement
entryRulePointStatement
:
{ before(grammarAccess.getPointStatementRule()); }
	 rulePointStatement
{ after(grammarAccess.getPointStatementRule()); } 
	 EOF 
;

// Rule PointStatement
rulePointStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPointStatementAccess().getGroup()); }
		(rule__PointStatement__Group__0)
		{ after(grammarAccess.getPointStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWaitStatement
entryRuleWaitStatement
:
{ before(grammarAccess.getWaitStatementRule()); }
	 ruleWaitStatement
{ after(grammarAccess.getWaitStatementRule()); } 
	 EOF 
;

// Rule WaitStatement
ruleWaitStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWaitStatementAccess().getAlternatives()); }
		(rule__WaitStatement__Alternatives)
		{ after(grammarAccess.getWaitStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeWaitStatement
entryRuleTimeWaitStatement
:
{ before(grammarAccess.getTimeWaitStatementRule()); }
	 ruleTimeWaitStatement
{ after(grammarAccess.getTimeWaitStatementRule()); } 
	 EOF 
;

// Rule TimeWaitStatement
ruleTimeWaitStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getGroup()); }
		(rule__TimeWaitStatement__Group__0)
		{ after(grammarAccess.getTimeWaitStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContactWaitStatement
entryRuleContactWaitStatement
:
{ before(grammarAccess.getContactWaitStatementRule()); }
	 ruleContactWaitStatement
{ after(grammarAccess.getContactWaitStatementRule()); } 
	 EOF 
;

// Rule ContactWaitStatement
ruleContactWaitStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getGroup()); }
		(rule__ContactWaitStatement__Group__0)
		{ after(grammarAccess.getContactWaitStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpStatement
entryRuleOpStatement
:
{ before(grammarAccess.getOpStatementRule()); }
	 ruleOpStatement
{ after(grammarAccess.getOpStatementRule()); } 
	 EOF 
;

// Rule OpStatement
ruleOpStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpStatementAccess().getAlternatives()); }
		(rule__OpStatement__Alternatives)
		{ after(grammarAccess.getOpStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCrossingStatement
entryRuleCrossingStatement
:
{ before(grammarAccess.getCrossingStatementRule()); }
	 ruleCrossingStatement
{ after(grammarAccess.getCrossingStatementRule()); } 
	 EOF 
;

// Rule CrossingStatement
ruleCrossingStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCrossingStatementAccess().getGroup()); }
		(rule__CrossingStatement__Group__0)
		{ after(grammarAccess.getCrossingStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLightStatement
entryRuleLightStatement
:
{ before(grammarAccess.getLightStatementRule()); }
	 ruleLightStatement
{ after(grammarAccess.getLightStatementRule()); } 
	 EOF 
;

// Rule LightStatement
ruleLightStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLightStatementAccess().getGroup()); }
		(rule__LightStatement__Group__0)
		{ after(grammarAccess.getLightStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalStatement
entryRuleConditionalStatement
:
{ before(grammarAccess.getConditionalStatementRule()); }
	 ruleConditionalStatement
{ after(grammarAccess.getConditionalStatementRule()); } 
	 EOF 
;

// Rule ConditionalStatement
ruleConditionalStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalStatementAccess().getGroup()); }
		(rule__ConditionalStatement__Group__0)
		{ after(grammarAccess.getConditionalStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalLine
entryRuleConditionalLine
:
{ before(grammarAccess.getConditionalLineRule()); }
	 ruleConditionalLine
{ after(grammarAccess.getConditionalLineRule()); } 
	 EOF 
;

// Rule ConditionalLine
ruleConditionalLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalLineAccess().getGroup()); }
		(rule__ConditionalLine__Group__0)
		{ after(grammarAccess.getConditionalLineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParallelStatement
entryRuleParallelStatement
:
{ before(grammarAccess.getParallelStatementRule()); }
	 ruleParallelStatement
{ after(grammarAccess.getParallelStatementRule()); } 
	 EOF 
;

// Rule ParallelStatement
ruleParallelStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParallelStatementAccess().getGroup()); }
		(rule__ParallelStatement__Group__0)
		{ after(grammarAccess.getParallelStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BlockEnd
ruleBlockEnd
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockEndAccess().getAlternatives()); }
		(rule__BlockEnd__Alternatives)
		{ after(grammarAccess.getBlockEndAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule TrackSpeedStop
ruleTrackSpeedStop
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackSpeedStopAccess().getSTOPEnumLiteralDeclaration()); }
		('stop')
		{ after(grammarAccess.getTrackSpeedStopAccess().getSTOPEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule TrackSpeedDrive
ruleTrackSpeedDrive
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackSpeedDriveAccess().getAlternatives()); }
		(rule__TrackSpeedDrive__Alternatives)
		{ after(grammarAccess.getTrackSpeedDriveAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule PointOrientation
rulePointOrientation
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPointOrientationAccess().getAlternatives()); }
		(rule__PointOrientation__Alternatives)
		{ after(grammarAccess.getPointOrientationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ContactEvent
ruleContactEvent
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactEventAccess().getAlternatives()); }
		(rule__ContactEvent__Alternatives)
		{ after(grammarAccess.getContactEventAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ContactPosition
ruleContactPosition
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactPositionAccess().getAlternatives()); }
		(rule__ContactPosition__Alternatives)
		{ after(grammarAccess.getContactPositionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule CrossingMode
ruleCrossingMode
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCrossingModeAccess().getAlternatives()); }
		(rule__CrossingMode__Alternatives)
		{ after(grammarAccess.getCrossingModeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule LightMode
ruleLightMode
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightModeAccess().getAlternatives()); }
		(rule__LightMode__Alternatives)
		{ after(grammarAccess.getLightModeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule RailSegment
ruleRailSegment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRailSegmentAccess().getAlternatives()); }
		(rule__RailSegment__Alternatives)
		{ after(grammarAccess.getRailSegmentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStartKeyword_0_0()); }
		'Start:'
		{ after(grammarAccess.getBlockAccess().getStartKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getStartKeyword_0_1()); }
		'start:'
		{ after(grammarAccess.getBlockAccess().getStartKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getSetStatementParserRuleCall_0()); }
		ruleSetStatement
		{ after(grammarAccess.getStatementAccess().getSetStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getWaitStatementParserRuleCall_1()); }
		ruleWaitStatement
		{ after(grammarAccess.getStatementAccess().getWaitStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getOpStatementParserRuleCall_2()); }
		ruleOpStatement
		{ after(grammarAccess.getStatementAccess().getOpStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getConditionalStatementParserRuleCall_3()); }
		ruleConditionalStatement
		{ after(grammarAccess.getStatementAccess().getConditionalStatementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getParallelStatementParserRuleCall_4()); }
		ruleParallelStatement
		{ after(grammarAccess.getStatementAccess().getParallelStatementParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetStatementAccess().getTrackStatementParserRuleCall_0()); }
		ruleTrackStatement
		{ after(grammarAccess.getSetStatementAccess().getTrackStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSetStatementAccess().getPointStatementParserRuleCall_1()); }
		rulePointStatement
		{ after(grammarAccess.getSetStatementAccess().getPointStatementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackStatementAccess().getSetKeyword_0_0()); }
		'Set'
		{ after(grammarAccess.getTrackStatementAccess().getSetKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTrackStatementAccess().getSetKeyword_0_1()); }
		'set'
		{ after(grammarAccess.getTrackStatementAccess().getSetKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Alternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackStatementAccess().getCommaKeyword_3_0_0()); }
		','
		{ after(grammarAccess.getTrackStatementAccess().getCommaKeyword_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTrackStatementAccess().getAndKeyword_3_0_1()); }
		'and'
		{ after(grammarAccess.getTrackStatementAccess().getAndKeyword_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Alternatives_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackStatementAccess().getSpeedAssignment_5_0()); }
		(rule__TrackStatement__SpeedAssignment_5_0)
		{ after(grammarAccess.getTrackStatementAccess().getSpeedAssignment_5_0()); }
	)
	|
	(
		{ before(grammarAccess.getTrackStatementAccess().getGroup_5_1()); }
		(rule__TrackStatement__Group_5_1__0)
		{ after(grammarAccess.getTrackStatementAccess().getGroup_5_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPointStatementAccess().getSetKeyword_0_0()); }
		'Set'
		{ after(grammarAccess.getPointStatementAccess().getSetKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPointStatementAccess().getSetKeyword_0_1()); }
		'set'
		{ after(grammarAccess.getPointStatementAccess().getSetKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Alternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPointStatementAccess().getCommaKeyword_3_0_0()); }
		','
		{ after(grammarAccess.getPointStatementAccess().getCommaKeyword_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPointStatementAccess().getAndKeyword_3_0_1()); }
		'and'
		{ after(grammarAccess.getPointStatementAccess().getAndKeyword_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWaitStatementAccess().getTimeWaitStatementParserRuleCall_0()); }
		ruleTimeWaitStatement
		{ after(grammarAccess.getWaitStatementAccess().getTimeWaitStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getWaitStatementAccess().getContactWaitStatementParserRuleCall_1()); }
		ruleContactWaitStatement
		{ after(grammarAccess.getWaitStatementAccess().getContactWaitStatementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getWaitKeyword_0_0()); }
		'Wait'
		{ after(grammarAccess.getTimeWaitStatementAccess().getWaitKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getWaitKeyword_0_1()); }
		'wait'
		{ after(grammarAccess.getTimeWaitStatementAccess().getWaitKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpStatementAccess().getCrossingStatementParserRuleCall_0()); }
		ruleCrossingStatement
		{ after(grammarAccess.getOpStatementAccess().getCrossingStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpStatementAccess().getLightStatementParserRuleCall_1()); }
		ruleLightStatement
		{ after(grammarAccess.getOpStatementAccess().getLightStatementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightStatementAccess().getTurnKeyword_0_0()); }
		'Turn'
		{ after(grammarAccess.getLightStatementAccess().getTurnKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLightStatementAccess().getTurnKeyword_0_1()); }
		'turn'
		{ after(grammarAccess.getLightStatementAccess().getTurnKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Alternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightStatementAccess().getCommaKeyword_3_0_0()); }
		','
		{ after(grammarAccess.getLightStatementAccess().getCommaKeyword_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLightStatementAccess().getAndKeyword_3_0_1()); }
		'and'
		{ after(grammarAccess.getLightStatementAccess().getAndKeyword_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalStatementAccess().getBranchKeyword_0_0()); }
		'Branch:'
		{ after(grammarAccess.getConditionalStatementAccess().getBranchKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionalStatementAccess().getBranchKeyword_0_1()); }
		'branch:'
		{ after(grammarAccess.getConditionalStatementAccess().getBranchKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalLineAccess().getIfKeyword_0_0()); }
		'If'
		{ after(grammarAccess.getConditionalLineAccess().getIfKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionalLineAccess().getIfKeyword_0_1()); }
		'if'
		{ after(grammarAccess.getConditionalLineAccess().getIfKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Alternatives_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalLineAccess().getFirstKeyword_7_0()); }
		'first'
		{ after(grammarAccess.getConditionalLineAccess().getFirstKeyword_7_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionalLineAccess().getFirstKeyword_7_1()); }
		'first,'
		{ after(grammarAccess.getConditionalLineAccess().getFirstKeyword_7_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParallelStatementAccess().getParallelKeyword_0_0()); }
		'Parallel:'
		{ after(grammarAccess.getParallelStatementAccess().getParallelKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getParallelStatementAccess().getParallelKeyword_0_1()); }
		'parallel:'
		{ after(grammarAccess.getParallelStatementAccess().getParallelKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockEnd__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockEndAccess().getENDEnumLiteralDeclaration_0()); }
		('End.')
		{ after(grammarAccess.getBlockEndAccess().getENDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBlockEndAccess().getENDEnumLiteralDeclaration_1()); }
		('end.')
		{ after(grammarAccess.getBlockEndAccess().getENDEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getBlockEndAccess().getLOOPEnumLiteralDeclaration_2()); }
		('Loop.')
		{ after(grammarAccess.getBlockEndAccess().getLOOPEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getBlockEndAccess().getLOOPEnumLiteralDeclaration_3()); }
		('loop.')
		{ after(grammarAccess.getBlockEndAccess().getLOOPEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackSpeedDrive__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackSpeedDriveAccess().getFULLEnumLiteralDeclaration_0()); }
		('full')
		{ after(grammarAccess.getTrackSpeedDriveAccess().getFULLEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTrackSpeedDriveAccess().getSLOWEnumLiteralDeclaration_1()); }
		('slow')
		{ after(grammarAccess.getTrackSpeedDriveAccess().getSLOWEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointOrientation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPointOrientationAccess().getSTRAIGHTEnumLiteralDeclaration_0()); }
		('straight')
		{ after(grammarAccess.getPointOrientationAccess().getSTRAIGHTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPointOrientationAccess().getBRANCHEnumLiteralDeclaration_1()); }
		('branch')
		{ after(grammarAccess.getPointOrientationAccess().getBRANCHEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactEvent__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactEventAccess().getREACHEnumLiteralDeclaration_0()); }
		('Reach')
		{ after(grammarAccess.getContactEventAccess().getREACHEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getContactEventAccess().getREACHEnumLiteralDeclaration_1()); }
		('reach')
		{ after(grammarAccess.getContactEventAccess().getREACHEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getContactEventAccess().getPASSEnumLiteralDeclaration_2()); }
		('Pass')
		{ after(grammarAccess.getContactEventAccess().getPASSEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getContactEventAccess().getPASSEnumLiteralDeclaration_3()); }
		('pass')
		{ after(grammarAccess.getContactEventAccess().getPASSEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactPosition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactPositionAccess().getFIRSTEnumLiteralDeclaration_0()); }
		('first')
		{ after(grammarAccess.getContactPositionAccess().getFIRSTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getContactPositionAccess().getSECONDEnumLiteralDeclaration_1()); }
		('second')
		{ after(grammarAccess.getContactPositionAccess().getSECONDEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossingMode__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCrossingModeAccess().getOPENEnumLiteralDeclaration_0()); }
		('Open')
		{ after(grammarAccess.getCrossingModeAccess().getOPENEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCrossingModeAccess().getOPENEnumLiteralDeclaration_1()); }
		('open')
		{ after(grammarAccess.getCrossingModeAccess().getOPENEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getCrossingModeAccess().getCLOSEEnumLiteralDeclaration_2()); }
		('Close')
		{ after(grammarAccess.getCrossingModeAccess().getCLOSEEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getCrossingModeAccess().getCLOSEEnumLiteralDeclaration_3()); }
		('close')
		{ after(grammarAccess.getCrossingModeAccess().getCLOSEEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightMode__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightModeAccess().getONEnumLiteralDeclaration_0()); }
		('on')
		{ after(grammarAccess.getLightModeAccess().getONEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getLightModeAccess().getOFFEnumLiteralDeclaration_1()); }
		('off')
		{ after(grammarAccess.getLightModeAccess().getOFFEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RailSegment__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRailSegmentAccess().getIC_JCT_0EnumLiteralDeclaration_0()); }
		('IC_JCT_0')
		{ after(grammarAccess.getRailSegmentAccess().getIC_JCT_0EnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getIC_LN_0EnumLiteralDeclaration_1()); }
		('IC_LN_0')
		{ after(grammarAccess.getRailSegmentAccess().getIC_LN_0EnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getIC_LN_1EnumLiteralDeclaration_2()); }
		('IC_LN_1')
		{ after(grammarAccess.getRailSegmentAccess().getIC_LN_1EnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getIC_LN_2EnumLiteralDeclaration_3()); }
		('IC_LN_2')
		{ after(grammarAccess.getRailSegmentAccess().getIC_LN_2EnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getIC_LN_3EnumLiteralDeclaration_4()); }
		('IC_LN_3')
		{ after(grammarAccess.getRailSegmentAccess().getIC_LN_3EnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getIC_LN_4EnumLiteralDeclaration_5()); }
		('IC_LN_4')
		{ after(grammarAccess.getRailSegmentAccess().getIC_LN_4EnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getIC_LN_5EnumLiteralDeclaration_6()); }
		('IC_LN_5')
		{ after(grammarAccess.getRailSegmentAccess().getIC_LN_5EnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getIC_ST_0EnumLiteralDeclaration_7()); }
		('IC_ST_0')
		{ after(grammarAccess.getRailSegmentAccess().getIC_ST_0EnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getIC_ST_1EnumLiteralDeclaration_8()); }
		('IC_ST_1')
		{ after(grammarAccess.getRailSegmentAccess().getIC_ST_1EnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getIC_ST_2EnumLiteralDeclaration_9()); }
		('IC_ST_2')
		{ after(grammarAccess.getRailSegmentAccess().getIC_ST_2EnumLiteralDeclaration_9()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getIC_ST_3EnumLiteralDeclaration_10()); }
		('IC_ST_3')
		{ after(grammarAccess.getRailSegmentAccess().getIC_ST_3EnumLiteralDeclaration_10()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getIC_ST_4EnumLiteralDeclaration_11()); }
		('IC_ST_4')
		{ after(grammarAccess.getRailSegmentAccess().getIC_ST_4EnumLiteralDeclaration_11()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getIO_LN_0EnumLiteralDeclaration_12()); }
		('IO_LN_0')
		{ after(grammarAccess.getRailSegmentAccess().getIO_LN_0EnumLiteralDeclaration_12()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getIO_LN_1EnumLiteralDeclaration_13()); }
		('IO_LN_1')
		{ after(grammarAccess.getRailSegmentAccess().getIO_LN_1EnumLiteralDeclaration_13()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getIO_LN_2EnumLiteralDeclaration_14()); }
		('IO_LN_2')
		{ after(grammarAccess.getRailSegmentAccess().getIO_LN_2EnumLiteralDeclaration_14()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_LN_0EnumLiteralDeclaration_15()); }
		('KH_LN_0')
		{ after(grammarAccess.getRailSegmentAccess().getKH_LN_0EnumLiteralDeclaration_15()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_LN_1EnumLiteralDeclaration_16()); }
		('KH_LN_1')
		{ after(grammarAccess.getRailSegmentAccess().getKH_LN_1EnumLiteralDeclaration_16()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_LN_2EnumLiteralDeclaration_17()); }
		('KH_LN_2')
		{ after(grammarAccess.getRailSegmentAccess().getKH_LN_2EnumLiteralDeclaration_17()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_LN_3EnumLiteralDeclaration_18()); }
		('KH_LN_3')
		{ after(grammarAccess.getRailSegmentAccess().getKH_LN_3EnumLiteralDeclaration_18()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_LN_4EnumLiteralDeclaration_19()); }
		('KH_LN_4')
		{ after(grammarAccess.getRailSegmentAccess().getKH_LN_4EnumLiteralDeclaration_19()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_LN_5EnumLiteralDeclaration_20()); }
		('KH_LN_5')
		{ after(grammarAccess.getRailSegmentAccess().getKH_LN_5EnumLiteralDeclaration_20()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_LN_6EnumLiteralDeclaration_21()); }
		('KH_LN_6')
		{ after(grammarAccess.getRailSegmentAccess().getKH_LN_6EnumLiteralDeclaration_21()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_LN_7EnumLiteralDeclaration_22()); }
		('KH_LN_7')
		{ after(grammarAccess.getRailSegmentAccess().getKH_LN_7EnumLiteralDeclaration_22()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_LN_8EnumLiteralDeclaration_23()); }
		('KH_LN_8')
		{ after(grammarAccess.getRailSegmentAccess().getKH_LN_8EnumLiteralDeclaration_23()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_ST_0EnumLiteralDeclaration_24()); }
		('KH_ST_0')
		{ after(grammarAccess.getRailSegmentAccess().getKH_ST_0EnumLiteralDeclaration_24()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_ST_1EnumLiteralDeclaration_25()); }
		('KH_ST_1')
		{ after(grammarAccess.getRailSegmentAccess().getKH_ST_1EnumLiteralDeclaration_25()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_ST_2EnumLiteralDeclaration_26()); }
		('KH_ST_2')
		{ after(grammarAccess.getRailSegmentAccess().getKH_ST_2EnumLiteralDeclaration_26()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_ST_3EnumLiteralDeclaration_27()); }
		('KH_ST_3')
		{ after(grammarAccess.getRailSegmentAccess().getKH_ST_3EnumLiteralDeclaration_27()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_ST_4EnumLiteralDeclaration_28()); }
		('KH_ST_4')
		{ after(grammarAccess.getRailSegmentAccess().getKH_ST_4EnumLiteralDeclaration_28()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_ST_5EnumLiteralDeclaration_29()); }
		('KH_ST_5')
		{ after(grammarAccess.getRailSegmentAccess().getKH_ST_5EnumLiteralDeclaration_29()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKH_ST_6EnumLiteralDeclaration_30()); }
		('KH_ST_6')
		{ after(grammarAccess.getRailSegmentAccess().getKH_ST_6EnumLiteralDeclaration_30()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKIO_LN_0EnumLiteralDeclaration_31()); }
		('KIO_LN_0')
		{ after(grammarAccess.getRailSegmentAccess().getKIO_LN_0EnumLiteralDeclaration_31()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getKIO_LN_1EnumLiteralDeclaration_32()); }
		('KIO_LN_1')
		{ after(grammarAccess.getRailSegmentAccess().getKIO_LN_1EnumLiteralDeclaration_32()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getOC_JCT_0EnumLiteralDeclaration_33()); }
		('OC_JCT_0')
		{ after(grammarAccess.getRailSegmentAccess().getOC_JCT_0EnumLiteralDeclaration_33()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getOC_LN_0EnumLiteralDeclaration_34()); }
		('OC_LN_0')
		{ after(grammarAccess.getRailSegmentAccess().getOC_LN_0EnumLiteralDeclaration_34()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getOC_LN_1EnumLiteralDeclaration_35()); }
		('OC_LN_1')
		{ after(grammarAccess.getRailSegmentAccess().getOC_LN_1EnumLiteralDeclaration_35()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getOC_LN_2EnumLiteralDeclaration_36()); }
		('OC_LN_2')
		{ after(grammarAccess.getRailSegmentAccess().getOC_LN_2EnumLiteralDeclaration_36()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getOC_LN_3EnumLiteralDeclaration_37()); }
		('OC_LN_3')
		{ after(grammarAccess.getRailSegmentAccess().getOC_LN_3EnumLiteralDeclaration_37()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getOC_LN_4EnumLiteralDeclaration_38()); }
		('OC_LN_4')
		{ after(grammarAccess.getRailSegmentAccess().getOC_LN_4EnumLiteralDeclaration_38()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getOC_LN_5EnumLiteralDeclaration_39()); }
		('OC_LN_5')
		{ after(grammarAccess.getRailSegmentAccess().getOC_LN_5EnumLiteralDeclaration_39()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getOC_ST_0EnumLiteralDeclaration_40()); }
		('OC_ST_0')
		{ after(grammarAccess.getRailSegmentAccess().getOC_ST_0EnumLiteralDeclaration_40()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getOC_ST_1EnumLiteralDeclaration_41()); }
		('OC_ST_1')
		{ after(grammarAccess.getRailSegmentAccess().getOC_ST_1EnumLiteralDeclaration_41()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getOC_ST_2EnumLiteralDeclaration_42()); }
		('OC_ST_2')
		{ after(grammarAccess.getRailSegmentAccess().getOC_ST_2EnumLiteralDeclaration_42()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getOC_ST_3EnumLiteralDeclaration_43()); }
		('OC_ST_3')
		{ after(grammarAccess.getRailSegmentAccess().getOC_ST_3EnumLiteralDeclaration_43()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getOC_ST_4EnumLiteralDeclaration_44()); }
		('OC_ST_4')
		{ after(grammarAccess.getRailSegmentAccess().getOC_ST_4EnumLiteralDeclaration_44()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getOI_LN_0EnumLiteralDeclaration_45()); }
		('OI_LN_0')
		{ after(grammarAccess.getRailSegmentAccess().getOI_LN_0EnumLiteralDeclaration_45()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getOI_LN_1EnumLiteralDeclaration_46()); }
		('OI_LN_1')
		{ after(grammarAccess.getRailSegmentAccess().getOI_LN_1EnumLiteralDeclaration_46()); }
	)
	|
	(
		{ before(grammarAccess.getRailSegmentAccess().getOI_LN_2EnumLiteralDeclaration_47()); }
		('OI_LN_2')
		{ after(grammarAccess.getRailSegmentAccess().getOI_LN_2EnumLiteralDeclaration_47()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getAlternatives_0()); }
	(rule__Block__Alternatives_0)
	{ after(grammarAccess.getBlockAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
		(rule__Block__StatementsAssignment_1)
		{ after(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
		(rule__Block__StatementsAssignment_1)*
		{ after(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getEndAssignment_2()); }
	(rule__Block__EndAssignment_2)
	{ after(grammarAccess.getBlockAccess().getEndAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrackStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrackStatement__Group__0__Impl
	rule__TrackStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackStatementAccess().getAlternatives_0()); }
	(rule__TrackStatement__Alternatives_0)
	{ after(grammarAccess.getTrackStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrackStatement__Group__1__Impl
	rule__TrackStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackStatementAccess().getTrackKeyword_1()); }
	'track'
	{ after(grammarAccess.getTrackStatementAccess().getTrackKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrackStatement__Group__2__Impl
	rule__TrackStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackStatementAccess().getSegmentsAssignment_2()); }
	(rule__TrackStatement__SegmentsAssignment_2)
	{ after(grammarAccess.getTrackStatementAccess().getSegmentsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrackStatement__Group__3__Impl
	rule__TrackStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackStatementAccess().getGroup_3()); }
	(rule__TrackStatement__Group_3__0)*
	{ after(grammarAccess.getTrackStatementAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrackStatement__Group__4__Impl
	rule__TrackStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackStatementAccess().getToKeyword_4()); }
	'to'
	{ after(grammarAccess.getTrackStatementAccess().getToKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrackStatement__Group__5__Impl
	rule__TrackStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackStatementAccess().getAlternatives_5()); }
	(rule__TrackStatement__Alternatives_5)
	{ after(grammarAccess.getTrackStatementAccess().getAlternatives_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrackStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackStatementAccess().getFullStopKeyword_6()); }
	'.'
	{ after(grammarAccess.getTrackStatementAccess().getFullStopKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrackStatement__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrackStatement__Group_3__0__Impl
	rule__TrackStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackStatementAccess().getAlternatives_3_0()); }
	(rule__TrackStatement__Alternatives_3_0)
	{ after(grammarAccess.getTrackStatementAccess().getAlternatives_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrackStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackStatementAccess().getSegmentsAssignment_3_1()); }
	(rule__TrackStatement__SegmentsAssignment_3_1)
	{ after(grammarAccess.getTrackStatementAccess().getSegmentsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrackStatement__Group_5_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrackStatement__Group_5_1__0__Impl
	rule__TrackStatement__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group_5_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackStatementAccess().getSpeedAssignment_5_1_0()); }
	(rule__TrackStatement__SpeedAssignment_5_1_0)
	{ after(grammarAccess.getTrackStatementAccess().getSpeedAssignment_5_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group_5_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrackStatement__Group_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__Group_5_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackStatementAccess().getReverseAssignment_5_1_1()); }
	(rule__TrackStatement__ReverseAssignment_5_1_1)?
	{ after(grammarAccess.getTrackStatementAccess().getReverseAssignment_5_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PointStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PointStatement__Group__0__Impl
	rule__PointStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointStatementAccess().getAlternatives_0()); }
	(rule__PointStatement__Alternatives_0)
	{ after(grammarAccess.getPointStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PointStatement__Group__1__Impl
	rule__PointStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointStatementAccess().getPointKeyword_1()); }
	'point'
	{ after(grammarAccess.getPointStatementAccess().getPointKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PointStatement__Group__2__Impl
	rule__PointStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointStatementAccess().getPointsAssignment_2()); }
	(rule__PointStatement__PointsAssignment_2)
	{ after(grammarAccess.getPointStatementAccess().getPointsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PointStatement__Group__3__Impl
	rule__PointStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointStatementAccess().getGroup_3()); }
	(rule__PointStatement__Group_3__0)*
	{ after(grammarAccess.getPointStatementAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PointStatement__Group__4__Impl
	rule__PointStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointStatementAccess().getToKeyword_4()); }
	'to'
	{ after(grammarAccess.getPointStatementAccess().getToKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PointStatement__Group__5__Impl
	rule__PointStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointStatementAccess().getOrientationAssignment_5()); }
	(rule__PointStatement__OrientationAssignment_5)
	{ after(grammarAccess.getPointStatementAccess().getOrientationAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PointStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointStatementAccess().getFullStopKeyword_6()); }
	'.'
	{ after(grammarAccess.getPointStatementAccess().getFullStopKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PointStatement__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PointStatement__Group_3__0__Impl
	rule__PointStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointStatementAccess().getAlternatives_3_0()); }
	(rule__PointStatement__Alternatives_3_0)
	{ after(grammarAccess.getPointStatementAccess().getAlternatives_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PointStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointStatementAccess().getPointsAssignment_3_1()); }
	(rule__PointStatement__PointsAssignment_3_1)
	{ after(grammarAccess.getPointStatementAccess().getPointsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeWaitStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeWaitStatement__Group__0__Impl
	rule__TimeWaitStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeWaitStatementAccess().getAlternatives_0()); }
	(rule__TimeWaitStatement__Alternatives_0)
	{ after(grammarAccess.getTimeWaitStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeWaitStatement__Group__1__Impl
	rule__TimeWaitStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeWaitStatementAccess().getForKeyword_1()); }
	'for'
	{ after(grammarAccess.getTimeWaitStatementAccess().getForKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeWaitStatement__Group__2__Impl
	rule__TimeWaitStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeWaitStatementAccess().getTimeAssignment_2()); }
	(rule__TimeWaitStatement__TimeAssignment_2)
	{ after(grammarAccess.getTimeWaitStatementAccess().getTimeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeWaitStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeWaitStatementAccess().getSecondsKeyword_3()); }
	'seconds.'
	{ after(grammarAccess.getTimeWaitStatementAccess().getSecondsKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ContactWaitStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__0__Impl
	rule__ContactWaitStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getEventAssignment_0()); }
	(rule__ContactWaitStatement__EventAssignment_0)
	{ after(grammarAccess.getContactWaitStatementAccess().getEventAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__1__Impl
	rule__ContactWaitStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getContactAssignment_1()); }
	(rule__ContactWaitStatement__ContactAssignment_1)
	{ after(grammarAccess.getContactWaitStatementAccess().getContactAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__2__Impl
	rule__ContactWaitStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getContactKeyword_2()); }
	'contact'
	{ after(grammarAccess.getContactWaitStatementAccess().getContactKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__3__Impl
	rule__ContactWaitStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getOfKeyword_3()); }
	('of')?
	{ after(grammarAccess.getContactWaitStatementAccess().getOfKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__4__Impl
	rule__ContactWaitStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getSegmentAssignment_4()); }
	(rule__ContactWaitStatement__SegmentAssignment_4)
	{ after(grammarAccess.getContactWaitStatementAccess().getSegmentAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getFullStopKeyword_5()); }
	'.'
	{ after(grammarAccess.getContactWaitStatementAccess().getFullStopKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CrossingStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossingStatement__Group__0__Impl
	rule__CrossingStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossingStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossingStatementAccess().getModeAssignment_0()); }
	(rule__CrossingStatement__ModeAssignment_0)
	{ after(grammarAccess.getCrossingStatementAccess().getModeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossingStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossingStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossingStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossingStatementAccess().getCrossingKeyword_1()); }
	'crossing.'
	{ after(grammarAccess.getCrossingStatementAccess().getCrossingKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LightStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group__0__Impl
	rule__LightStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getAlternatives_0()); }
	(rule__LightStatement__Alternatives_0)
	{ after(grammarAccess.getLightStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group__1__Impl
	rule__LightStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getLightKeyword_1()); }
	'light'
	{ after(grammarAccess.getLightStatementAccess().getLightKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group__2__Impl
	rule__LightStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getLightsAssignment_2()); }
	(rule__LightStatement__LightsAssignment_2)
	{ after(grammarAccess.getLightStatementAccess().getLightsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group__3__Impl
	rule__LightStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getGroup_3()); }
	(rule__LightStatement__Group_3__0)*
	{ after(grammarAccess.getLightStatementAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group__4__Impl
	rule__LightStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getStateAssignment_4()); }
	(rule__LightStatement__StateAssignment_4)
	{ after(grammarAccess.getLightStatementAccess().getStateAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getFullStopKeyword_5()); }
	'.'
	{ after(grammarAccess.getLightStatementAccess().getFullStopKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LightStatement__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group_3__0__Impl
	rule__LightStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getAlternatives_3_0()); }
	(rule__LightStatement__Alternatives_3_0)
	{ after(grammarAccess.getLightStatementAccess().getAlternatives_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getLightsAssignment_3_1()); }
	(rule__LightStatement__LightsAssignment_3_1)
	{ after(grammarAccess.getLightStatementAccess().getLightsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalStatement__Group__0__Impl
	rule__ConditionalStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalStatementAccess().getAlternatives_0()); }
	(rule__ConditionalStatement__Alternatives_0)
	{ after(grammarAccess.getConditionalStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalStatement__Group__1__Impl
	rule__ConditionalStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalStatementAccess().getLinesAssignment_1()); }
	(rule__ConditionalStatement__LinesAssignment_1)
	{ after(grammarAccess.getConditionalStatementAccess().getLinesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getConditionalStatementAccess().getLinesAssignment_2()); }
		(rule__ConditionalStatement__LinesAssignment_2)
		{ after(grammarAccess.getConditionalStatementAccess().getLinesAssignment_2()); }
	)
	(
		{ before(grammarAccess.getConditionalStatementAccess().getLinesAssignment_2()); }
		(rule__ConditionalStatement__LinesAssignment_2)*
		{ after(grammarAccess.getConditionalStatementAccess().getLinesAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalLine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__0__Impl
	rule__ConditionalLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalLineAccess().getAlternatives_0()); }
	(rule__ConditionalLine__Alternatives_0)
	{ after(grammarAccess.getConditionalLineAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__1__Impl
	rule__ConditionalLine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalLineAccess().getContactAssignment_1()); }
	(rule__ConditionalLine__ContactAssignment_1)
	{ after(grammarAccess.getConditionalLineAccess().getContactAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__2__Impl
	rule__ConditionalLine__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalLineAccess().getContactKeyword_2()); }
	'contact'
	{ after(grammarAccess.getConditionalLineAccess().getContactKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__3__Impl
	rule__ConditionalLine__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalLineAccess().getOfKeyword_3()); }
	'of'
	{ after(grammarAccess.getConditionalLineAccess().getOfKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__4__Impl
	rule__ConditionalLine__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalLineAccess().getSegmentAssignment_4()); }
	(rule__ConditionalLine__SegmentAssignment_4)
	{ after(grammarAccess.getConditionalLineAccess().getSegmentAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__5__Impl
	rule__ConditionalLine__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalLineAccess().getIsKeyword_5()); }
	'is'
	{ after(grammarAccess.getConditionalLineAccess().getIsKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__6__Impl
	rule__ConditionalLine__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalLineAccess().getReachedKeyword_6()); }
	'reached'
	{ after(grammarAccess.getConditionalLineAccess().getReachedKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__7__Impl
	rule__ConditionalLine__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalLineAccess().getAlternatives_7()); }
	(rule__ConditionalLine__Alternatives_7)
	{ after(grammarAccess.getConditionalLineAccess().getAlternatives_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__8__Impl
	rule__ConditionalLine__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalLineAccess().getDoKeyword_8()); }
	'do'
	{ after(grammarAccess.getConditionalLineAccess().getDoKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalLineAccess().getBlockAssignment_9()); }
	(rule__ConditionalLine__BlockAssignment_9)
	{ after(grammarAccess.getConditionalLineAccess().getBlockAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParallelStatement__Group__0__Impl
	rule__ParallelStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParallelStatementAccess().getAlternatives_0()); }
	(rule__ParallelStatement__Alternatives_0)
	{ after(grammarAccess.getParallelStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParallelStatement__Group__1__Impl
	rule__ParallelStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParallelStatementAccess().getBlocksAssignment_1()); }
	(rule__ParallelStatement__BlocksAssignment_1)
	{ after(grammarAccess.getParallelStatementAccess().getBlocksAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParallelStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getParallelStatementAccess().getBlocksAssignment_2()); }
		(rule__ParallelStatement__BlocksAssignment_2)
		{ after(grammarAccess.getParallelStatementAccess().getBlocksAssignment_2()); }
	)
	(
		{ before(grammarAccess.getParallelStatementAccess().getBlocksAssignment_2()); }
		(rule__ParallelStatement__BlocksAssignment_2)*
		{ after(grammarAccess.getParallelStatementAccess().getBlocksAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RailProgram__BlockAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRailProgramAccess().getBlockBlockParserRuleCall_0()); }
		ruleBlock
		{ after(grammarAccess.getRailProgramAccess().getBlockBlockParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__EndAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getEndBlockEndEnumRuleCall_2_0()); }
		ruleBlockEnd
		{ after(grammarAccess.getBlockAccess().getEndBlockEndEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__SegmentsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackStatementAccess().getSegmentsRailSegmentEnumRuleCall_2_0()); }
		ruleRailSegment
		{ after(grammarAccess.getTrackStatementAccess().getSegmentsRailSegmentEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__SegmentsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackStatementAccess().getSegmentsRailSegmentEnumRuleCall_3_1_0()); }
		ruleRailSegment
		{ after(grammarAccess.getTrackStatementAccess().getSegmentsRailSegmentEnumRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__SpeedAssignment_5_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackStatementAccess().getSpeedTrackSpeedStopEnumRuleCall_5_0_0()); }
		ruleTrackSpeedStop
		{ after(grammarAccess.getTrackStatementAccess().getSpeedTrackSpeedStopEnumRuleCall_5_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__SpeedAssignment_5_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackStatementAccess().getSpeedTrackSpeedDriveEnumRuleCall_5_1_0_0()); }
		ruleTrackSpeedDrive
		{ after(grammarAccess.getTrackStatementAccess().getSpeedTrackSpeedDriveEnumRuleCall_5_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackStatement__ReverseAssignment_5_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackStatementAccess().getReverseReverseKeyword_5_1_1_0()); }
		(
			{ before(grammarAccess.getTrackStatementAccess().getReverseReverseKeyword_5_1_1_0()); }
			'reverse'
			{ after(grammarAccess.getTrackStatementAccess().getReverseReverseKeyword_5_1_1_0()); }
		)
		{ after(grammarAccess.getTrackStatementAccess().getReverseReverseKeyword_5_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__PointsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPointStatementAccess().getPointsINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getPointStatementAccess().getPointsINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__PointsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPointStatementAccess().getPointsINTTerminalRuleCall_3_1_0()); }
		RULE_INT
		{ after(grammarAccess.getPointStatementAccess().getPointsINTTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointStatement__OrientationAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPointStatementAccess().getOrientationPointOrientationEnumRuleCall_5_0()); }
		rulePointOrientation
		{ after(grammarAccess.getPointStatementAccess().getOrientationPointOrientationEnumRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__TimeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getTimeINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getTimeWaitStatementAccess().getTimeINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__EventAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getEventContactEventEnumRuleCall_0_0()); }
		ruleContactEvent
		{ after(grammarAccess.getContactWaitStatementAccess().getEventContactEventEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__ContactAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getContactContactPositionEnumRuleCall_1_0()); }
		ruleContactPosition
		{ after(grammarAccess.getContactWaitStatementAccess().getContactContactPositionEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__SegmentAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getSegmentRailSegmentEnumRuleCall_4_0()); }
		ruleRailSegment
		{ after(grammarAccess.getContactWaitStatementAccess().getSegmentRailSegmentEnumRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossingStatement__ModeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCrossingStatementAccess().getModeCrossingModeEnumRuleCall_0_0()); }
		ruleCrossingMode
		{ after(grammarAccess.getCrossingStatementAccess().getModeCrossingModeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__LightsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightStatementAccess().getLightsINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getLightStatementAccess().getLightsINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__LightsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightStatementAccess().getLightsINTTerminalRuleCall_3_1_0()); }
		RULE_INT
		{ after(grammarAccess.getLightStatementAccess().getLightsINTTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__StateAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightStatementAccess().getStateLightModeEnumRuleCall_4_0()); }
		ruleLightMode
		{ after(grammarAccess.getLightStatementAccess().getStateLightModeEnumRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__LinesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalStatementAccess().getLinesConditionalLineParserRuleCall_1_0()); }
		ruleConditionalLine
		{ after(grammarAccess.getConditionalStatementAccess().getLinesConditionalLineParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__LinesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalStatementAccess().getLinesConditionalLineParserRuleCall_2_0()); }
		ruleConditionalLine
		{ after(grammarAccess.getConditionalStatementAccess().getLinesConditionalLineParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__ContactAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalLineAccess().getContactContactPositionEnumRuleCall_1_0()); }
		ruleContactPosition
		{ after(grammarAccess.getConditionalLineAccess().getContactContactPositionEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__SegmentAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalLineAccess().getSegmentRailSegmentEnumRuleCall_4_0()); }
		ruleRailSegment
		{ after(grammarAccess.getConditionalLineAccess().getSegmentRailSegmentEnumRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__BlockAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalLineAccess().getBlockBlockParserRuleCall_9_0()); }
		ruleBlock
		{ after(grammarAccess.getConditionalLineAccess().getBlockBlockParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__BlocksAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParallelStatementAccess().getBlocksBlockParserRuleCall_1_0()); }
		ruleBlock
		{ after(grammarAccess.getParallelStatementAccess().getBlocksBlockParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__BlocksAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParallelStatementAccess().getBlocksBlockParserRuleCall_2_0()); }
		ruleBlock
		{ after(grammarAccess.getParallelStatementAccess().getBlocksBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
