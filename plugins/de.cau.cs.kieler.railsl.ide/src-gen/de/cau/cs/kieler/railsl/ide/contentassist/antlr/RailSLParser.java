/*
 * generated by Xtext 2.16.0
 */
package de.cau.cs.kieler.railsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.cau.cs.kieler.railsl.ide.contentassist.antlr.internal.InternalRailSLParser;
import de.cau.cs.kieler.railsl.services.RailSLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RailSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RailSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RailSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBlockAccess().getAlternatives_0(), "rule__Block__Alternatives_0");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getSetStatementAccess().getAlternatives(), "rule__SetStatement__Alternatives");
			builder.put(grammarAccess.getTrackStatementAccess().getAlternatives_0(), "rule__TrackStatement__Alternatives_0");
			builder.put(grammarAccess.getTrackStatementAccess().getAlternatives_3_0(), "rule__TrackStatement__Alternatives_3_0");
			builder.put(grammarAccess.getTrackStatementAccess().getAlternatives_5(), "rule__TrackStatement__Alternatives_5");
			builder.put(grammarAccess.getPointStatementAccess().getAlternatives_0(), "rule__PointStatement__Alternatives_0");
			builder.put(grammarAccess.getPointStatementAccess().getAlternatives_3_0(), "rule__PointStatement__Alternatives_3_0");
			builder.put(grammarAccess.getWaitStatementAccess().getAlternatives(), "rule__WaitStatement__Alternatives");
			builder.put(grammarAccess.getTimeWaitStatementAccess().getAlternatives_0(), "rule__TimeWaitStatement__Alternatives_0");
			builder.put(grammarAccess.getOpStatementAccess().getAlternatives(), "rule__OpStatement__Alternatives");
			builder.put(grammarAccess.getLightStatementAccess().getAlternatives_0(), "rule__LightStatement__Alternatives_0");
			builder.put(grammarAccess.getLightStatementAccess().getAlternatives_3_0(), "rule__LightStatement__Alternatives_3_0");
			builder.put(grammarAccess.getConditionalStatementAccess().getAlternatives_0(), "rule__ConditionalStatement__Alternatives_0");
			builder.put(grammarAccess.getConditionalLineAccess().getAlternatives_0(), "rule__ConditionalLine__Alternatives_0");
			builder.put(grammarAccess.getConditionalLineAccess().getAlternatives_7(), "rule__ConditionalLine__Alternatives_7");
			builder.put(grammarAccess.getParallelStatementAccess().getAlternatives_0(), "rule__ParallelStatement__Alternatives_0");
			builder.put(grammarAccess.getBlockEndAccess().getAlternatives(), "rule__BlockEnd__Alternatives");
			builder.put(grammarAccess.getTrackSpeedDriveAccess().getAlternatives(), "rule__TrackSpeedDrive__Alternatives");
			builder.put(grammarAccess.getPointOrientationAccess().getAlternatives(), "rule__PointOrientation__Alternatives");
			builder.put(grammarAccess.getContactEventAccess().getAlternatives(), "rule__ContactEvent__Alternatives");
			builder.put(grammarAccess.getContactPositionAccess().getAlternatives(), "rule__ContactPosition__Alternatives");
			builder.put(grammarAccess.getCrossingModeAccess().getAlternatives(), "rule__CrossingMode__Alternatives");
			builder.put(grammarAccess.getLightModeAccess().getAlternatives(), "rule__LightMode__Alternatives");
			builder.put(grammarAccess.getRailSegmentAccess().getAlternatives(), "rule__RailSegment__Alternatives");
			builder.put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
			builder.put(grammarAccess.getTrackStatementAccess().getGroup(), "rule__TrackStatement__Group__0");
			builder.put(grammarAccess.getTrackStatementAccess().getGroup_3(), "rule__TrackStatement__Group_3__0");
			builder.put(grammarAccess.getTrackStatementAccess().getGroup_3_0_2(), "rule__TrackStatement__Group_3_0_2__0");
			builder.put(grammarAccess.getTrackStatementAccess().getGroup_5_1(), "rule__TrackStatement__Group_5_1__0");
			builder.put(grammarAccess.getPointStatementAccess().getGroup(), "rule__PointStatement__Group__0");
			builder.put(grammarAccess.getPointStatementAccess().getGroup_3(), "rule__PointStatement__Group_3__0");
			builder.put(grammarAccess.getPointStatementAccess().getGroup_3_0_2(), "rule__PointStatement__Group_3_0_2__0");
			builder.put(grammarAccess.getTimeWaitStatementAccess().getGroup(), "rule__TimeWaitStatement__Group__0");
			builder.put(grammarAccess.getContactWaitStatementAccess().getGroup(), "rule__ContactWaitStatement__Group__0");
			builder.put(grammarAccess.getCrossingStatementAccess().getGroup(), "rule__CrossingStatement__Group__0");
			builder.put(grammarAccess.getLightStatementAccess().getGroup(), "rule__LightStatement__Group__0");
			builder.put(grammarAccess.getLightStatementAccess().getGroup_3(), "rule__LightStatement__Group_3__0");
			builder.put(grammarAccess.getLightStatementAccess().getGroup_3_0_2(), "rule__LightStatement__Group_3_0_2__0");
			builder.put(grammarAccess.getConditionalStatementAccess().getGroup(), "rule__ConditionalStatement__Group__0");
			builder.put(grammarAccess.getConditionalLineAccess().getGroup(), "rule__ConditionalLine__Group__0");
			builder.put(grammarAccess.getParallelStatementAccess().getGroup(), "rule__ParallelStatement__Group__0");
			builder.put(grammarAccess.getRailProgramAccess().getBlockAssignment(), "rule__RailProgram__BlockAssignment");
			builder.put(grammarAccess.getBlockAccess().getStatementsAssignment_1(), "rule__Block__StatementsAssignment_1");
			builder.put(grammarAccess.getBlockAccess().getEndAssignment_2(), "rule__Block__EndAssignment_2");
			builder.put(grammarAccess.getTrackStatementAccess().getSegmentsAssignment_2(), "rule__TrackStatement__SegmentsAssignment_2");
			builder.put(grammarAccess.getTrackStatementAccess().getSegmentsAssignment_3_1(), "rule__TrackStatement__SegmentsAssignment_3_1");
			builder.put(grammarAccess.getTrackStatementAccess().getSpeedAssignment_5_0(), "rule__TrackStatement__SpeedAssignment_5_0");
			builder.put(grammarAccess.getTrackStatementAccess().getSpeedAssignment_5_1_0(), "rule__TrackStatement__SpeedAssignment_5_1_0");
			builder.put(grammarAccess.getTrackStatementAccess().getReverseAssignment_5_1_1(), "rule__TrackStatement__ReverseAssignment_5_1_1");
			builder.put(grammarAccess.getPointStatementAccess().getPointsAssignment_2(), "rule__PointStatement__PointsAssignment_2");
			builder.put(grammarAccess.getPointStatementAccess().getPointsAssignment_3_1(), "rule__PointStatement__PointsAssignment_3_1");
			builder.put(grammarAccess.getPointStatementAccess().getOrientationAssignment_5(), "rule__PointStatement__OrientationAssignment_5");
			builder.put(grammarAccess.getTimeWaitStatementAccess().getTimeAssignment_2(), "rule__TimeWaitStatement__TimeAssignment_2");
			builder.put(grammarAccess.getContactWaitStatementAccess().getEventAssignment_0(), "rule__ContactWaitStatement__EventAssignment_0");
			builder.put(grammarAccess.getContactWaitStatementAccess().getContactAssignment_1(), "rule__ContactWaitStatement__ContactAssignment_1");
			builder.put(grammarAccess.getContactWaitStatementAccess().getSegmentAssignment_4(), "rule__ContactWaitStatement__SegmentAssignment_4");
			builder.put(grammarAccess.getCrossingStatementAccess().getModeAssignment_0(), "rule__CrossingStatement__ModeAssignment_0");
			builder.put(grammarAccess.getLightStatementAccess().getLightsAssignment_2(), "rule__LightStatement__LightsAssignment_2");
			builder.put(grammarAccess.getLightStatementAccess().getLightsAssignment_3_1(), "rule__LightStatement__LightsAssignment_3_1");
			builder.put(grammarAccess.getLightStatementAccess().getStateAssignment_4(), "rule__LightStatement__StateAssignment_4");
			builder.put(grammarAccess.getConditionalStatementAccess().getLinesAssignment_1(), "rule__ConditionalStatement__LinesAssignment_1");
			builder.put(grammarAccess.getConditionalStatementAccess().getLinesAssignment_2(), "rule__ConditionalStatement__LinesAssignment_2");
			builder.put(grammarAccess.getConditionalLineAccess().getContactAssignment_1(), "rule__ConditionalLine__ContactAssignment_1");
			builder.put(grammarAccess.getConditionalLineAccess().getSegmentAssignment_4(), "rule__ConditionalLine__SegmentAssignment_4");
			builder.put(grammarAccess.getConditionalLineAccess().getBlockAssignment_9(), "rule__ConditionalLine__BlockAssignment_9");
			builder.put(grammarAccess.getParallelStatementAccess().getBlocksAssignment_1(), "rule__ParallelStatement__BlocksAssignment_1");
			builder.put(grammarAccess.getParallelStatementAccess().getBlocksAssignment_2(), "rule__ParallelStatement__BlocksAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RailSLGrammarAccess grammarAccess;

	@Override
	protected InternalRailSLParser createParser() {
		InternalRailSLParser result = new InternalRailSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RailSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RailSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
