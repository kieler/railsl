/*
 * generated by Xtext 2.37.0
 */
grammar InternalRailSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.cau.cs.kieler.railsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.railsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.railsl.services.RailSLGrammarAccess;

}

@parser::members {

 	private RailSLGrammarAccess grammarAccess;

    public InternalRailSLParser(TokenStream input, RailSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RailProgram";
   	}

   	@Override
   	protected RailSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRailProgram
entryRuleRailProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRailProgramRule()); }
	iv_ruleRailProgram=ruleRailProgram
	{ $current=$iv_ruleRailProgram.current; }
	EOF;

// Rule RailProgram
ruleRailProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRailProgramAccess().getBlockBlockParserRuleCall_0());
			}
			lv_block_0_0=ruleBlock
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getRailProgramRule());
				}
				set(
					$current,
					"block",
					lv_block_0_0,
					"de.cau.cs.kieler.railsl.RailSL.Block");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Start'
			{
				newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getStartKeyword_0_0());
			}
			    |
			otherlv_1='start'
			{
				newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getStartKeyword_0_1());
			}
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getBlockAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"de.cau.cs.kieler.railsl.RailSL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getEndBlockEndEnumRuleCall_3_0());
				}
				lv_end_4_0=ruleBlockEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"end",
						lv_end_4_0,
						"de.cau.cs.kieler.railsl.RailSL.BlockEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='.'
		{
			newLeafNode(otherlv_5, grammarAccess.getBlockAccess().getFullStopKeyword_4());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSetStatementParserRuleCall_0());
		}
		this_SetStatement_0=ruleSetStatement
		{
			$current = $this_SetStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWaitStatementParserRuleCall_1());
		}
		this_WaitStatement_1=ruleWaitStatement
		{
			$current = $this_WaitStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getOpStatementParserRuleCall_2());
		}
		this_OpStatement_2=ruleOpStatement
		{
			$current = $this_OpStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getConditionalStatementParserRuleCall_3());
		}
		this_ConditionalStatement_3=ruleConditionalStatement
		{
			$current = $this_ConditionalStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getParallelStatementParserRuleCall_4());
		}
		this_ParallelStatement_4=ruleParallelStatement
		{
			$current = $this_ParallelStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBlockParserRuleCall_5());
		}
		this_Block_5=ruleBlock
		{
			$current = $this_Block_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSetStatement
entryRuleSetStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetStatementRule()); }
	iv_ruleSetStatement=ruleSetStatement
	{ $current=$iv_ruleSetStatement.current; }
	EOF;

// Rule SetStatement
ruleSetStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSetStatementAccess().getTrackStatementParserRuleCall_0());
		}
		this_TrackStatement_0=ruleTrackStatement
		{
			$current = $this_TrackStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSetStatementAccess().getPointStatementParserRuleCall_1());
		}
		this_PointStatement_1=rulePointStatement
		{
			$current = $this_PointStatement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTrackStatement
entryRuleTrackStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrackStatementRule()); }
	iv_ruleTrackStatement=ruleTrackStatement
	{ $current=$iv_ruleTrackStatement.current; }
	EOF;

// Rule TrackStatement
ruleTrackStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Set'
			{
				newLeafNode(otherlv_0, grammarAccess.getTrackStatementAccess().getSetKeyword_0_0());
			}
			    |
			otherlv_1='set'
			{
				newLeafNode(otherlv_1, grammarAccess.getTrackStatementAccess().getSetKeyword_0_1());
			}
		)
		otherlv_2='track'
		{
			newLeafNode(otherlv_2, grammarAccess.getTrackStatementAccess().getTrackKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTrackStatementAccess().getSegmentsRailSegmentEnumRuleCall_2_0());
				}
				lv_segments_3_0=ruleRailSegment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTrackStatementRule());
					}
					add(
						$current,
						"segments",
						lv_segments_3_0,
						"de.cau.cs.kieler.railsl.RailSL.RailSegment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getTrackStatementAccess().getCommaKeyword_3_0_0());
				}
				    |
				otherlv_5='and'
				{
					newLeafNode(otherlv_5, grammarAccess.getTrackStatementAccess().getAndKeyword_3_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTrackStatementAccess().getSegmentsRailSegmentEnumRuleCall_3_1_0());
					}
					lv_segments_6_0=ruleRailSegment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTrackStatementRule());
						}
						add(
							$current,
							"segments",
							lv_segments_6_0,
							"de.cau.cs.kieler.railsl.RailSL.RailSegment");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7='to'
		{
			newLeafNode(otherlv_7, grammarAccess.getTrackStatementAccess().getToKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTrackStatementAccess().getSpeedTrackSpeedStopEnumRuleCall_5_0_0());
					}
					lv_speed_8_0=ruleTrackSpeedStop
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTrackStatementRule());
						}
						set(
							$current,
							"speed",
							lv_speed_8_0,
							"de.cau.cs.kieler.railsl.RailSL.TrackSpeedStop");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getTrackStatementAccess().getSpeedTrackSpeedDriveEnumRuleCall_5_1_0_0());
						}
						lv_speed_9_0=ruleTrackSpeedDrive
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTrackStatementRule());
							}
							set(
								$current,
								"speed",
								lv_speed_9_0,
								"de.cau.cs.kieler.railsl.RailSL.TrackSpeedDrive");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						lv_reverse_10_0='reverse'
						{
							newLeafNode(lv_reverse_10_0, grammarAccess.getTrackStatementAccess().getReverseReverseKeyword_5_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTrackStatementRule());
							}
							setWithLastConsumed($current, "reverse", lv_reverse_10_0 != null, "reverse");
						}
					)
				)?
			)
		)
		otherlv_11='.'
		{
			newLeafNode(otherlv_11, grammarAccess.getTrackStatementAccess().getFullStopKeyword_6());
		}
	)
;

// Entry rule entryRulePointStatement
entryRulePointStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointStatementRule()); }
	iv_rulePointStatement=rulePointStatement
	{ $current=$iv_rulePointStatement.current; }
	EOF;

// Rule PointStatement
rulePointStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Set'
			{
				newLeafNode(otherlv_0, grammarAccess.getPointStatementAccess().getSetKeyword_0_0());
			}
			    |
			otherlv_1='set'
			{
				newLeafNode(otherlv_1, grammarAccess.getPointStatementAccess().getSetKeyword_0_1());
			}
		)
		otherlv_2='point'
		{
			newLeafNode(otherlv_2, grammarAccess.getPointStatementAccess().getPointKeyword_1());
		}
		(
			(
				lv_points_3_0=RULE_INT
				{
					newLeafNode(lv_points_3_0, grammarAccess.getPointStatementAccess().getPointsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPointStatementRule());
					}
					addWithLastConsumed(
						$current,
						"points",
						lv_points_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getPointStatementAccess().getCommaKeyword_3_0_0());
				}
				    |
				otherlv_5='and'
				{
					newLeafNode(otherlv_5, grammarAccess.getPointStatementAccess().getAndKeyword_3_0_1());
				}
			)
			(
				(
					lv_points_6_0=RULE_INT
					{
						newLeafNode(lv_points_6_0, grammarAccess.getPointStatementAccess().getPointsINTTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPointStatementRule());
						}
						addWithLastConsumed(
							$current,
							"points",
							lv_points_6_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)*
		otherlv_7='to'
		{
			newLeafNode(otherlv_7, grammarAccess.getPointStatementAccess().getToKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPointStatementAccess().getOrientationPointOrientationEnumRuleCall_5_0());
				}
				lv_orientation_8_0=rulePointOrientation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPointStatementRule());
					}
					set(
						$current,
						"orientation",
						lv_orientation_8_0,
						"de.cau.cs.kieler.railsl.RailSL.PointOrientation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='.'
		{
			newLeafNode(otherlv_9, grammarAccess.getPointStatementAccess().getFullStopKeyword_6());
		}
	)
;

// Entry rule entryRuleWaitStatement
entryRuleWaitStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWaitStatementRule()); }
	iv_ruleWaitStatement=ruleWaitStatement
	{ $current=$iv_ruleWaitStatement.current; }
	EOF;

// Rule WaitStatement
ruleWaitStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getWaitStatementAccess().getTimeWaitStatementParserRuleCall_0());
		}
		this_TimeWaitStatement_0=ruleTimeWaitStatement
		{
			$current = $this_TimeWaitStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getWaitStatementAccess().getContactWaitStatementParserRuleCall_1());
		}
		this_ContactWaitStatement_1=ruleContactWaitStatement
		{
			$current = $this_ContactWaitStatement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTimeWaitStatement
entryRuleTimeWaitStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeWaitStatementRule()); }
	iv_ruleTimeWaitStatement=ruleTimeWaitStatement
	{ $current=$iv_ruleTimeWaitStatement.current; }
	EOF;

// Rule TimeWaitStatement
ruleTimeWaitStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Wait'
			{
				newLeafNode(otherlv_0, grammarAccess.getTimeWaitStatementAccess().getWaitKeyword_0_0());
			}
			    |
			otherlv_1='wait'
			{
				newLeafNode(otherlv_1, grammarAccess.getTimeWaitStatementAccess().getWaitKeyword_0_1());
			}
		)
		(
			otherlv_2='for'
			{
				newLeafNode(otherlv_2, grammarAccess.getTimeWaitStatementAccess().getForKeyword_1());
			}
		)?
		(
			(
				lv_time_3_0=RULE_INT
				{
					newLeafNode(lv_time_3_0, grammarAccess.getTimeWaitStatementAccess().getTimeINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeWaitStatementRule());
					}
					setWithLastConsumed(
						$current,
						"time",
						lv_time_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_4='seconds'
			{
				newLeafNode(otherlv_4, grammarAccess.getTimeWaitStatementAccess().getSecondsKeyword_3_0());
			}
			    |
			otherlv_5='second'
			{
				newLeafNode(otherlv_5, grammarAccess.getTimeWaitStatementAccess().getSecondKeyword_3_1());
			}
		)
		otherlv_6='.'
		{
			newLeafNode(otherlv_6, grammarAccess.getTimeWaitStatementAccess().getFullStopKeyword_4());
		}
	)
;

// Entry rule entryRuleContactWaitStatement
entryRuleContactWaitStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContactWaitStatementRule()); }
	iv_ruleContactWaitStatement=ruleContactWaitStatement
	{ $current=$iv_ruleContactWaitStatement.current; }
	EOF;

// Rule ContactWaitStatement
ruleContactWaitStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getContactWaitStatementAccess().getEventContactEventEnumRuleCall_0_0());
				}
				lv_event_0_0=ruleContactEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContactWaitStatementRule());
					}
					set(
						$current,
						"event",
						lv_event_0_0,
						"de.cau.cs.kieler.railsl.RailSL.ContactEvent");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getContactWaitStatementAccess().getContactContactPositionEnumRuleCall_1_0());
				}
				lv_contact_1_0=ruleContactPosition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContactWaitStatementRule());
					}
					set(
						$current,
						"contact",
						lv_contact_1_0,
						"de.cau.cs.kieler.railsl.RailSL.ContactPosition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='contact'
		{
			newLeafNode(otherlv_2, grammarAccess.getContactWaitStatementAccess().getContactKeyword_2());
		}
		(
			otherlv_3='of'
			{
				newLeafNode(otherlv_3, grammarAccess.getContactWaitStatementAccess().getOfKeyword_3());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getContactWaitStatementAccess().getSegmentRailSegmentEnumRuleCall_4_0());
				}
				lv_segment_4_0=ruleRailSegment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContactWaitStatementRule());
					}
					set(
						$current,
						"segment",
						lv_segment_4_0,
						"de.cau.cs.kieler.railsl.RailSL.RailSegment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='.'
		{
			newLeafNode(otherlv_5, grammarAccess.getContactWaitStatementAccess().getFullStopKeyword_5());
		}
	)
;

// Entry rule entryRuleOpStatement
entryRuleOpStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpStatementRule()); }
	iv_ruleOpStatement=ruleOpStatement
	{ $current=$iv_ruleOpStatement.current; }
	EOF;

// Rule OpStatement
ruleOpStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOpStatementAccess().getCrossingStatementParserRuleCall_0());
		}
		this_CrossingStatement_0=ruleCrossingStatement
		{
			$current = $this_CrossingStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOpStatementAccess().getLightStatementParserRuleCall_1());
		}
		this_LightStatement_1=ruleLightStatement
		{
			$current = $this_LightStatement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCrossingStatement
entryRuleCrossingStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCrossingStatementRule()); }
	iv_ruleCrossingStatement=ruleCrossingStatement
	{ $current=$iv_ruleCrossingStatement.current; }
	EOF;

// Rule CrossingStatement
ruleCrossingStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCrossingStatementAccess().getModeCrossingModeEnumRuleCall_0_0());
				}
				lv_mode_0_0=ruleCrossingMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCrossingStatementRule());
					}
					set(
						$current,
						"mode",
						lv_mode_0_0,
						"de.cau.cs.kieler.railsl.RailSL.CrossingMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='crossing'
		{
			newLeafNode(otherlv_1, grammarAccess.getCrossingStatementAccess().getCrossingKeyword_1());
		}
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getCrossingStatementAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleLightStatement
entryRuleLightStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLightStatementRule()); }
	iv_ruleLightStatement=ruleLightStatement
	{ $current=$iv_ruleLightStatement.current; }
	EOF;

// Rule LightStatement
ruleLightStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Turn'
			{
				newLeafNode(otherlv_0, grammarAccess.getLightStatementAccess().getTurnKeyword_0_0());
			}
			    |
			otherlv_1='turn'
			{
				newLeafNode(otherlv_1, grammarAccess.getLightStatementAccess().getTurnKeyword_0_1());
			}
		)
		otherlv_2='light'
		{
			newLeafNode(otherlv_2, grammarAccess.getLightStatementAccess().getLightKeyword_1());
		}
		(
			(
				lv_lights_3_0=RULE_INT
				{
					newLeafNode(lv_lights_3_0, grammarAccess.getLightStatementAccess().getLightsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLightStatementRule());
					}
					addWithLastConsumed(
						$current,
						"lights",
						lv_lights_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getLightStatementAccess().getCommaKeyword_3_0_0());
				}
				    |
				otherlv_5='and'
				{
					newLeafNode(otherlv_5, grammarAccess.getLightStatementAccess().getAndKeyword_3_0_1());
				}
			)
			(
				(
					lv_lights_6_0=RULE_INT
					{
						newLeafNode(lv_lights_6_0, grammarAccess.getLightStatementAccess().getLightsINTTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLightStatementRule());
						}
						addWithLastConsumed(
							$current,
							"lights",
							lv_lights_6_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getLightStatementAccess().getStateLightModeEnumRuleCall_4_0());
				}
				lv_state_7_0=ruleLightMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLightStatementRule());
					}
					set(
						$current,
						"state",
						lv_state_7_0,
						"de.cau.cs.kieler.railsl.RailSL.LightMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='.'
		{
			newLeafNode(otherlv_8, grammarAccess.getLightStatementAccess().getFullStopKeyword_5());
		}
	)
;

// Entry rule entryRuleConditionalStatement
entryRuleConditionalStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalStatementRule()); }
	iv_ruleConditionalStatement=ruleConditionalStatement
	{ $current=$iv_ruleConditionalStatement.current; }
	EOF;

// Rule ConditionalStatement
ruleConditionalStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Branch'
			{
				newLeafNode(otherlv_0, grammarAccess.getConditionalStatementAccess().getBranchKeyword_0_0());
			}
			    |
			otherlv_1='branch'
			{
				newLeafNode(otherlv_1, grammarAccess.getConditionalStatementAccess().getBranchKeyword_0_1());
			}
			    |
			(
				(
					otherlv_2='wait'
					{
						newLeafNode(otherlv_2, grammarAccess.getConditionalStatementAccess().getWaitKeyword_0_2_0_0());
					}
					    |
					otherlv_3='Wait'
					{
						newLeafNode(otherlv_3, grammarAccess.getConditionalStatementAccess().getWaitKeyword_0_2_0_1());
					}
				)
				otherlv_4='any'
				{
					newLeafNode(otherlv_4, grammarAccess.getConditionalStatementAccess().getAnyKeyword_0_2_1());
				}
			)
		)
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getConditionalStatementAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalStatementAccess().getLinesConditionalLineParserRuleCall_2_0());
				}
				lv_lines_6_0=ruleConditionalLine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalStatementRule());
					}
					add(
						$current,
						"lines",
						lv_lines_6_0,
						"de.cau.cs.kieler.railsl.RailSL.ConditionalLine");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalStatementAccess().getLinesConditionalLineParserRuleCall_3_0());
				}
				lv_lines_7_0=ruleConditionalLine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalStatementRule());
					}
					add(
						$current,
						"lines",
						lv_lines_7_0,
						"de.cau.cs.kieler.railsl.RailSL.ConditionalLine");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleConditionalLine
entryRuleConditionalLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalLineRule()); }
	iv_ruleConditionalLine=ruleConditionalLine
	{ $current=$iv_ruleConditionalLine.current; }
	EOF;

// Rule ConditionalLine
ruleConditionalLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='If'
			{
				newLeafNode(otherlv_0, grammarAccess.getConditionalLineAccess().getIfKeyword_0_0());
			}
			    |
			otherlv_1='if'
			{
				newLeafNode(otherlv_1, grammarAccess.getConditionalLineAccess().getIfKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalLineAccess().getContactContactPositionEnumRuleCall_1_0());
				}
				lv_contact_2_0=ruleContactPosition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalLineRule());
					}
					set(
						$current,
						"contact",
						lv_contact_2_0,
						"de.cau.cs.kieler.railsl.RailSL.ContactPosition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='contact'
		{
			newLeafNode(otherlv_3, grammarAccess.getConditionalLineAccess().getContactKeyword_2());
		}
		(
			otherlv_4='of'
			{
				newLeafNode(otherlv_4, grammarAccess.getConditionalLineAccess().getOfKeyword_3());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalLineAccess().getSegmentRailSegmentEnumRuleCall_4_0());
				}
				lv_segment_5_0=ruleRailSegment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalLineRule());
					}
					set(
						$current,
						"segment",
						lv_segment_5_0,
						"de.cau.cs.kieler.railsl.RailSL.RailSegment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='is'
		{
			newLeafNode(otherlv_6, grammarAccess.getConditionalLineAccess().getIsKeyword_5());
		}
		otherlv_7='reached'
		{
			newLeafNode(otherlv_7, grammarAccess.getConditionalLineAccess().getReachedKeyword_6());
		}
		otherlv_8='first'
		{
			newLeafNode(otherlv_8, grammarAccess.getConditionalLineAccess().getFirstKeyword_7());
		}
		(
			otherlv_9=','
			{
				newLeafNode(otherlv_9, grammarAccess.getConditionalLineAccess().getCommaKeyword_8());
			}
		)?
		otherlv_10='do'
		{
			newLeafNode(otherlv_10, grammarAccess.getConditionalLineAccess().getDoKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalLineAccess().getBlockBlockParserRuleCall_10_0());
				}
				lv_block_11_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalLineRule());
					}
					set(
						$current,
						"block",
						lv_block_11_0,
						"de.cau.cs.kieler.railsl.RailSL.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParallelStatement
entryRuleParallelStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParallelStatementRule()); }
	iv_ruleParallelStatement=ruleParallelStatement
	{ $current=$iv_ruleParallelStatement.current; }
	EOF;

// Rule ParallelStatement
ruleParallelStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Parallel'
			{
				newLeafNode(otherlv_0, grammarAccess.getParallelStatementAccess().getParallelKeyword_0_0());
			}
			    |
			otherlv_1='parallel'
			{
				newLeafNode(otherlv_1, grammarAccess.getParallelStatementAccess().getParallelKeyword_0_1());
			}
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getParallelStatementAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParallelStatementAccess().getBlocksBlockParserRuleCall_2_0());
				}
				lv_blocks_3_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParallelStatementRule());
					}
					add(
						$current,
						"blocks",
						lv_blocks_3_0,
						"de.cau.cs.kieler.railsl.RailSL.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParallelStatementAccess().getBlocksBlockParserRuleCall_3_0());
				}
				lv_blocks_4_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParallelStatementRule());
					}
					add(
						$current,
						"blocks",
						lv_blocks_4_0,
						"de.cau.cs.kieler.railsl.RailSL.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_5='Join'
			{
				newLeafNode(otherlv_5, grammarAccess.getParallelStatementAccess().getJoinKeyword_4_0());
			}
			    |
			otherlv_6='join'
			{
				newLeafNode(otherlv_6, grammarAccess.getParallelStatementAccess().getJoinKeyword_4_1());
			}
		)
		otherlv_7='.'
		{
			newLeafNode(otherlv_7, grammarAccess.getParallelStatementAccess().getFullStopKeyword_5());
		}
	)
;

// Rule BlockEnd
ruleBlockEnd returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='End'
			{
				$current = grammarAccess.getBlockEndAccess().getENDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBlockEndAccess().getENDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='end'
			{
				$current = grammarAccess.getBlockEndAccess().getENDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBlockEndAccess().getENDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Loop'
			{
				$current = grammarAccess.getBlockEndAccess().getLOOPEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBlockEndAccess().getLOOPEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='loop'
			{
				$current = grammarAccess.getBlockEndAccess().getLOOPEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getBlockEndAccess().getLOOPEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule TrackSpeedStop
ruleTrackSpeedStop returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='stop'
		{
			$current = grammarAccess.getTrackSpeedStopAccess().getSTOPEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getTrackSpeedStopAccess().getSTOPEnumLiteralDeclaration());
		}
	)
;

// Rule TrackSpeedDrive
ruleTrackSpeedDrive returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='full'
			{
				$current = grammarAccess.getTrackSpeedDriveAccess().getFULLEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTrackSpeedDriveAccess().getFULLEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='slow'
			{
				$current = grammarAccess.getTrackSpeedDriveAccess().getSLOWEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTrackSpeedDriveAccess().getSLOWEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule PointOrientation
rulePointOrientation returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='straight'
			{
				$current = grammarAccess.getPointOrientationAccess().getSTRAIGHTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPointOrientationAccess().getSTRAIGHTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='branch'
			{
				$current = grammarAccess.getPointOrientationAccess().getBRANCHEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPointOrientationAccess().getBRANCHEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule ContactEvent
ruleContactEvent returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Reach'
			{
				$current = grammarAccess.getContactEventAccess().getREACHEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getContactEventAccess().getREACHEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='reach'
			{
				$current = grammarAccess.getContactEventAccess().getREACHEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getContactEventAccess().getREACHEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Pass'
			{
				$current = grammarAccess.getContactEventAccess().getPASSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getContactEventAccess().getPASSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='pass'
			{
				$current = grammarAccess.getContactEventAccess().getPASSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getContactEventAccess().getPASSEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule ContactPosition
ruleContactPosition returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='first'
			{
				$current = grammarAccess.getContactPositionAccess().getFIRSTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getContactPositionAccess().getFIRSTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='second'
			{
				$current = grammarAccess.getContactPositionAccess().getSECONDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getContactPositionAccess().getSECONDEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule CrossingMode
ruleCrossingMode returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Open'
			{
				$current = grammarAccess.getCrossingModeAccess().getOPENEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCrossingModeAccess().getOPENEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='open'
			{
				$current = grammarAccess.getCrossingModeAccess().getOPENEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCrossingModeAccess().getOPENEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Close'
			{
				$current = grammarAccess.getCrossingModeAccess().getCLOSEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCrossingModeAccess().getCLOSEEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='close'
			{
				$current = grammarAccess.getCrossingModeAccess().getCLOSEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCrossingModeAccess().getCLOSEEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule LightMode
ruleLightMode returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='on'
			{
				$current = grammarAccess.getLightModeAccess().getONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLightModeAccess().getONEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='off'
			{
				$current = grammarAccess.getLightModeAccess().getOFFEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLightModeAccess().getOFFEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule RailSegment
ruleRailSegment returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='IC_JCT_0'
			{
				$current = grammarAccess.getRailSegmentAccess().getIC_JCT_0EnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRailSegmentAccess().getIC_JCT_0EnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='IC_LN_0'
			{
				$current = grammarAccess.getRailSegmentAccess().getIC_LN_0EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRailSegmentAccess().getIC_LN_0EnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='IC_LN_1'
			{
				$current = grammarAccess.getRailSegmentAccess().getIC_LN_1EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRailSegmentAccess().getIC_LN_1EnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='IC_LN_2'
			{
				$current = grammarAccess.getRailSegmentAccess().getIC_LN_2EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRailSegmentAccess().getIC_LN_2EnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='IC_LN_3'
			{
				$current = grammarAccess.getRailSegmentAccess().getIC_LN_3EnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getRailSegmentAccess().getIC_LN_3EnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='IC_LN_4'
			{
				$current = grammarAccess.getRailSegmentAccess().getIC_LN_4EnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getRailSegmentAccess().getIC_LN_4EnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='IC_LN_5'
			{
				$current = grammarAccess.getRailSegmentAccess().getIC_LN_5EnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getRailSegmentAccess().getIC_LN_5EnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='IC_ST_0'
			{
				$current = grammarAccess.getRailSegmentAccess().getIC_ST_0EnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getRailSegmentAccess().getIC_ST_0EnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='IC_ST_1'
			{
				$current = grammarAccess.getRailSegmentAccess().getIC_ST_1EnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getRailSegmentAccess().getIC_ST_1EnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='IC_ST_2'
			{
				$current = grammarAccess.getRailSegmentAccess().getIC_ST_2EnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getRailSegmentAccess().getIC_ST_2EnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='IC_ST_3'
			{
				$current = grammarAccess.getRailSegmentAccess().getIC_ST_3EnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getRailSegmentAccess().getIC_ST_3EnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='IC_ST_4'
			{
				$current = grammarAccess.getRailSegmentAccess().getIC_ST_4EnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getRailSegmentAccess().getIC_ST_4EnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='IO_LN_0'
			{
				$current = grammarAccess.getRailSegmentAccess().getIO_LN_0EnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getRailSegmentAccess().getIO_LN_0EnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='IO_LN_1'
			{
				$current = grammarAccess.getRailSegmentAccess().getIO_LN_1EnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getRailSegmentAccess().getIO_LN_1EnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14='IO_LN_2'
			{
				$current = grammarAccess.getRailSegmentAccess().getIO_LN_2EnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getRailSegmentAccess().getIO_LN_2EnumLiteralDeclaration_14());
			}
		)
		    |
		(
			enumLiteral_15='KH_LN_0'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_LN_0EnumLiteralDeclaration_15().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_15, grammarAccess.getRailSegmentAccess().getKH_LN_0EnumLiteralDeclaration_15());
			}
		)
		    |
		(
			enumLiteral_16='KH_LN_1'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_LN_1EnumLiteralDeclaration_16().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_16, grammarAccess.getRailSegmentAccess().getKH_LN_1EnumLiteralDeclaration_16());
			}
		)
		    |
		(
			enumLiteral_17='KH_LN_2'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_LN_2EnumLiteralDeclaration_17().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_17, grammarAccess.getRailSegmentAccess().getKH_LN_2EnumLiteralDeclaration_17());
			}
		)
		    |
		(
			enumLiteral_18='KH_LN_3'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_LN_3EnumLiteralDeclaration_18().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_18, grammarAccess.getRailSegmentAccess().getKH_LN_3EnumLiteralDeclaration_18());
			}
		)
		    |
		(
			enumLiteral_19='KH_LN_4'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_LN_4EnumLiteralDeclaration_19().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_19, grammarAccess.getRailSegmentAccess().getKH_LN_4EnumLiteralDeclaration_19());
			}
		)
		    |
		(
			enumLiteral_20='KH_LN_5'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_LN_5EnumLiteralDeclaration_20().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_20, grammarAccess.getRailSegmentAccess().getKH_LN_5EnumLiteralDeclaration_20());
			}
		)
		    |
		(
			enumLiteral_21='KH_LN_6'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_LN_6EnumLiteralDeclaration_21().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_21, grammarAccess.getRailSegmentAccess().getKH_LN_6EnumLiteralDeclaration_21());
			}
		)
		    |
		(
			enumLiteral_22='KH_LN_7'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_LN_7EnumLiteralDeclaration_22().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_22, grammarAccess.getRailSegmentAccess().getKH_LN_7EnumLiteralDeclaration_22());
			}
		)
		    |
		(
			enumLiteral_23='KH_LN_8'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_LN_8EnumLiteralDeclaration_23().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_23, grammarAccess.getRailSegmentAccess().getKH_LN_8EnumLiteralDeclaration_23());
			}
		)
		    |
		(
			enumLiteral_24='KH_ST_0'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_ST_0EnumLiteralDeclaration_24().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_24, grammarAccess.getRailSegmentAccess().getKH_ST_0EnumLiteralDeclaration_24());
			}
		)
		    |
		(
			enumLiteral_25='KH_ST_1'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_ST_1EnumLiteralDeclaration_25().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_25, grammarAccess.getRailSegmentAccess().getKH_ST_1EnumLiteralDeclaration_25());
			}
		)
		    |
		(
			enumLiteral_26='KH_ST_2'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_ST_2EnumLiteralDeclaration_26().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_26, grammarAccess.getRailSegmentAccess().getKH_ST_2EnumLiteralDeclaration_26());
			}
		)
		    |
		(
			enumLiteral_27='KH_ST_3'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_ST_3EnumLiteralDeclaration_27().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_27, grammarAccess.getRailSegmentAccess().getKH_ST_3EnumLiteralDeclaration_27());
			}
		)
		    |
		(
			enumLiteral_28='KH_ST_4'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_ST_4EnumLiteralDeclaration_28().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_28, grammarAccess.getRailSegmentAccess().getKH_ST_4EnumLiteralDeclaration_28());
			}
		)
		    |
		(
			enumLiteral_29='KH_ST_5'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_ST_5EnumLiteralDeclaration_29().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_29, grammarAccess.getRailSegmentAccess().getKH_ST_5EnumLiteralDeclaration_29());
			}
		)
		    |
		(
			enumLiteral_30='KH_ST_6'
			{
				$current = grammarAccess.getRailSegmentAccess().getKH_ST_6EnumLiteralDeclaration_30().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_30, grammarAccess.getRailSegmentAccess().getKH_ST_6EnumLiteralDeclaration_30());
			}
		)
		    |
		(
			enumLiteral_31='KIO_LN_0'
			{
				$current = grammarAccess.getRailSegmentAccess().getKIO_LN_0EnumLiteralDeclaration_31().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_31, grammarAccess.getRailSegmentAccess().getKIO_LN_0EnumLiteralDeclaration_31());
			}
		)
		    |
		(
			enumLiteral_32='KIO_LN_1'
			{
				$current = grammarAccess.getRailSegmentAccess().getKIO_LN_1EnumLiteralDeclaration_32().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_32, grammarAccess.getRailSegmentAccess().getKIO_LN_1EnumLiteralDeclaration_32());
			}
		)
		    |
		(
			enumLiteral_33='OC_JCT_0'
			{
				$current = grammarAccess.getRailSegmentAccess().getOC_JCT_0EnumLiteralDeclaration_33().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_33, grammarAccess.getRailSegmentAccess().getOC_JCT_0EnumLiteralDeclaration_33());
			}
		)
		    |
		(
			enumLiteral_34='OC_LN_0'
			{
				$current = grammarAccess.getRailSegmentAccess().getOC_LN_0EnumLiteralDeclaration_34().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_34, grammarAccess.getRailSegmentAccess().getOC_LN_0EnumLiteralDeclaration_34());
			}
		)
		    |
		(
			enumLiteral_35='OC_LN_1'
			{
				$current = grammarAccess.getRailSegmentAccess().getOC_LN_1EnumLiteralDeclaration_35().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_35, grammarAccess.getRailSegmentAccess().getOC_LN_1EnumLiteralDeclaration_35());
			}
		)
		    |
		(
			enumLiteral_36='OC_LN_2'
			{
				$current = grammarAccess.getRailSegmentAccess().getOC_LN_2EnumLiteralDeclaration_36().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_36, grammarAccess.getRailSegmentAccess().getOC_LN_2EnumLiteralDeclaration_36());
			}
		)
		    |
		(
			enumLiteral_37='OC_LN_3'
			{
				$current = grammarAccess.getRailSegmentAccess().getOC_LN_3EnumLiteralDeclaration_37().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_37, grammarAccess.getRailSegmentAccess().getOC_LN_3EnumLiteralDeclaration_37());
			}
		)
		    |
		(
			enumLiteral_38='OC_LN_4'
			{
				$current = grammarAccess.getRailSegmentAccess().getOC_LN_4EnumLiteralDeclaration_38().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_38, grammarAccess.getRailSegmentAccess().getOC_LN_4EnumLiteralDeclaration_38());
			}
		)
		    |
		(
			enumLiteral_39='OC_LN_5'
			{
				$current = grammarAccess.getRailSegmentAccess().getOC_LN_5EnumLiteralDeclaration_39().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_39, grammarAccess.getRailSegmentAccess().getOC_LN_5EnumLiteralDeclaration_39());
			}
		)
		    |
		(
			enumLiteral_40='OC_ST_0'
			{
				$current = grammarAccess.getRailSegmentAccess().getOC_ST_0EnumLiteralDeclaration_40().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_40, grammarAccess.getRailSegmentAccess().getOC_ST_0EnumLiteralDeclaration_40());
			}
		)
		    |
		(
			enumLiteral_41='OC_ST_1'
			{
				$current = grammarAccess.getRailSegmentAccess().getOC_ST_1EnumLiteralDeclaration_41().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_41, grammarAccess.getRailSegmentAccess().getOC_ST_1EnumLiteralDeclaration_41());
			}
		)
		    |
		(
			enumLiteral_42='OC_ST_2'
			{
				$current = grammarAccess.getRailSegmentAccess().getOC_ST_2EnumLiteralDeclaration_42().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_42, grammarAccess.getRailSegmentAccess().getOC_ST_2EnumLiteralDeclaration_42());
			}
		)
		    |
		(
			enumLiteral_43='OC_ST_3'
			{
				$current = grammarAccess.getRailSegmentAccess().getOC_ST_3EnumLiteralDeclaration_43().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_43, grammarAccess.getRailSegmentAccess().getOC_ST_3EnumLiteralDeclaration_43());
			}
		)
		    |
		(
			enumLiteral_44='OC_ST_4'
			{
				$current = grammarAccess.getRailSegmentAccess().getOC_ST_4EnumLiteralDeclaration_44().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_44, grammarAccess.getRailSegmentAccess().getOC_ST_4EnumLiteralDeclaration_44());
			}
		)
		    |
		(
			enumLiteral_45='OI_LN_0'
			{
				$current = grammarAccess.getRailSegmentAccess().getOI_LN_0EnumLiteralDeclaration_45().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_45, grammarAccess.getRailSegmentAccess().getOI_LN_0EnumLiteralDeclaration_45());
			}
		)
		    |
		(
			enumLiteral_46='OI_LN_1'
			{
				$current = grammarAccess.getRailSegmentAccess().getOI_LN_1EnumLiteralDeclaration_46().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_46, grammarAccess.getRailSegmentAccess().getOI_LN_1EnumLiteralDeclaration_46());
			}
		)
		    |
		(
			enumLiteral_47='OI_LN_2'
			{
				$current = grammarAccess.getRailSegmentAccess().getOI_LN_2EnumLiteralDeclaration_47().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_47, grammarAccess.getRailSegmentAccess().getOI_LN_2EnumLiteralDeclaration_47());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
