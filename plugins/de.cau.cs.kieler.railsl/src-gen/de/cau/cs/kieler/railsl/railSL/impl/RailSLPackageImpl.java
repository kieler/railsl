/**
 * generated by Xtext 2.16.0
 */
package de.cau.cs.kieler.railsl.railSL.impl;

import de.cau.cs.kieler.railsl.railSL.Block;
import de.cau.cs.kieler.railsl.railSL.BlockEnd;
import de.cau.cs.kieler.railsl.railSL.ConditionalLine;
import de.cau.cs.kieler.railsl.railSL.ConditionalStatement;
import de.cau.cs.kieler.railsl.railSL.ContactEvent;
import de.cau.cs.kieler.railsl.railSL.ContactPosition;
import de.cau.cs.kieler.railsl.railSL.ContactWaitStatement;
import de.cau.cs.kieler.railsl.railSL.CrossingMode;
import de.cau.cs.kieler.railsl.railSL.CrossingStatement;
import de.cau.cs.kieler.railsl.railSL.LightMode;
import de.cau.cs.kieler.railsl.railSL.LightStatement;
import de.cau.cs.kieler.railsl.railSL.OpStatement;
import de.cau.cs.kieler.railsl.railSL.ParallelStatement;
import de.cau.cs.kieler.railsl.railSL.PointOrinetation;
import de.cau.cs.kieler.railsl.railSL.PointStatement;
import de.cau.cs.kieler.railsl.railSL.RailProgram;
import de.cau.cs.kieler.railsl.railSL.RailSLFactory;
import de.cau.cs.kieler.railsl.railSL.RailSLPackage;
import de.cau.cs.kieler.railsl.railSL.RailSegment;
import de.cau.cs.kieler.railsl.railSL.SetStatement;
import de.cau.cs.kieler.railsl.railSL.Statement;
import de.cau.cs.kieler.railsl.railSL.TimeWaitStatement;
import de.cau.cs.kieler.railsl.railSL.TrackSpeed;
import de.cau.cs.kieler.railsl.railSL.TrackStatement;
import de.cau.cs.kieler.railsl.railSL.WaitStatement;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RailSLPackageImpl extends EPackageImpl implements RailSLPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass railProgramEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass blockEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass trackStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass pointStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass waitStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass timeWaitStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass contactWaitStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass opStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass crossingStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lightStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionalStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionalLineEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parallelStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum blockEndEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum trackSpeedEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum pointOrinetationEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum contactEventEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum contactPositionEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum crossingModeEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum lightModeEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum railSegmentEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see de.cau.cs.kieler.railsl.railSL.RailSLPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private RailSLPackageImpl()
  {
    super(eNS_URI, RailSLFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link RailSLPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static RailSLPackage init()
  {
    if (isInited) return (RailSLPackage)EPackage.Registry.INSTANCE.getEPackage(RailSLPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredRailSLPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    RailSLPackageImpl theRailSLPackage = registeredRailSLPackage instanceof RailSLPackageImpl ? (RailSLPackageImpl)registeredRailSLPackage : new RailSLPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theRailSLPackage.createPackageContents();

    // Initialize created meta-data
    theRailSLPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theRailSLPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(RailSLPackage.eNS_URI, theRailSLPackage);
    return theRailSLPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRailProgram()
  {
    return railProgramEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRailProgram_Block()
  {
    return (EReference)railProgramEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBlock()
  {
    return blockEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBlock_Statements()
  {
    return (EReference)blockEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBlock_End()
  {
    return (EAttribute)blockEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatement()
  {
    return statementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSetStatement()
  {
    return setStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTrackStatement()
  {
    return trackStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTrackStatement_Segments()
  {
    return (EAttribute)trackStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTrackStatement_Speed()
  {
    return (EAttribute)trackStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTrackStatement_Reverse()
  {
    return (EAttribute)trackStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPointStatement()
  {
    return pointStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPointStatement_Points()
  {
    return (EAttribute)pointStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPointStatement_Orientation()
  {
    return (EAttribute)pointStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getWaitStatement()
  {
    return waitStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTimeWaitStatement()
  {
    return timeWaitStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTimeWaitStatement_Time()
  {
    return (EAttribute)timeWaitStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getContactWaitStatement()
  {
    return contactWaitStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getContactWaitStatement_Event()
  {
    return (EAttribute)contactWaitStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getContactWaitStatement_Contact()
  {
    return (EAttribute)contactWaitStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getContactWaitStatement_Segment()
  {
    return (EAttribute)contactWaitStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOpStatement()
  {
    return opStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCrossingStatement()
  {
    return crossingStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCrossingStatement_Mode()
  {
    return (EAttribute)crossingStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLightStatement()
  {
    return lightStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLightStatement_Lights()
  {
    return (EAttribute)lightStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLightStatement_State()
  {
    return (EAttribute)lightStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getConditionalStatement()
  {
    return conditionalStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getConditionalStatement_Lines()
  {
    return (EReference)conditionalStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getConditionalLine()
  {
    return conditionalLineEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getConditionalLine_Contact()
  {
    return (EAttribute)conditionalLineEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getConditionalLine_Segment()
  {
    return (EAttribute)conditionalLineEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getConditionalLine_Block()
  {
    return (EReference)conditionalLineEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getParallelStatement()
  {
    return parallelStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getParallelStatement_Blocks()
  {
    return (EReference)parallelStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getBlockEnd()
  {
    return blockEndEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getTrackSpeed()
  {
    return trackSpeedEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getPointOrinetation()
  {
    return pointOrinetationEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getContactEvent()
  {
    return contactEventEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getContactPosition()
  {
    return contactPositionEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getCrossingMode()
  {
    return crossingModeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getLightMode()
  {
    return lightModeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getRailSegment()
  {
    return railSegmentEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RailSLFactory getRailSLFactory()
  {
    return (RailSLFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    railProgramEClass = createEClass(RAIL_PROGRAM);
    createEReference(railProgramEClass, RAIL_PROGRAM__BLOCK);

    blockEClass = createEClass(BLOCK);
    createEReference(blockEClass, BLOCK__STATEMENTS);
    createEAttribute(blockEClass, BLOCK__END);

    statementEClass = createEClass(STATEMENT);

    setStatementEClass = createEClass(SET_STATEMENT);

    trackStatementEClass = createEClass(TRACK_STATEMENT);
    createEAttribute(trackStatementEClass, TRACK_STATEMENT__SEGMENTS);
    createEAttribute(trackStatementEClass, TRACK_STATEMENT__SPEED);
    createEAttribute(trackStatementEClass, TRACK_STATEMENT__REVERSE);

    pointStatementEClass = createEClass(POINT_STATEMENT);
    createEAttribute(pointStatementEClass, POINT_STATEMENT__POINTS);
    createEAttribute(pointStatementEClass, POINT_STATEMENT__ORIENTATION);

    waitStatementEClass = createEClass(WAIT_STATEMENT);

    timeWaitStatementEClass = createEClass(TIME_WAIT_STATEMENT);
    createEAttribute(timeWaitStatementEClass, TIME_WAIT_STATEMENT__TIME);

    contactWaitStatementEClass = createEClass(CONTACT_WAIT_STATEMENT);
    createEAttribute(contactWaitStatementEClass, CONTACT_WAIT_STATEMENT__EVENT);
    createEAttribute(contactWaitStatementEClass, CONTACT_WAIT_STATEMENT__CONTACT);
    createEAttribute(contactWaitStatementEClass, CONTACT_WAIT_STATEMENT__SEGMENT);

    opStatementEClass = createEClass(OP_STATEMENT);

    crossingStatementEClass = createEClass(CROSSING_STATEMENT);
    createEAttribute(crossingStatementEClass, CROSSING_STATEMENT__MODE);

    lightStatementEClass = createEClass(LIGHT_STATEMENT);
    createEAttribute(lightStatementEClass, LIGHT_STATEMENT__LIGHTS);
    createEAttribute(lightStatementEClass, LIGHT_STATEMENT__STATE);

    conditionalStatementEClass = createEClass(CONDITIONAL_STATEMENT);
    createEReference(conditionalStatementEClass, CONDITIONAL_STATEMENT__LINES);

    conditionalLineEClass = createEClass(CONDITIONAL_LINE);
    createEAttribute(conditionalLineEClass, CONDITIONAL_LINE__CONTACT);
    createEAttribute(conditionalLineEClass, CONDITIONAL_LINE__SEGMENT);
    createEReference(conditionalLineEClass, CONDITIONAL_LINE__BLOCK);

    parallelStatementEClass = createEClass(PARALLEL_STATEMENT);
    createEReference(parallelStatementEClass, PARALLEL_STATEMENT__BLOCKS);

    // Create enums
    blockEndEEnum = createEEnum(BLOCK_END);
    trackSpeedEEnum = createEEnum(TRACK_SPEED);
    pointOrinetationEEnum = createEEnum(POINT_ORINETATION);
    contactEventEEnum = createEEnum(CONTACT_EVENT);
    contactPositionEEnum = createEEnum(CONTACT_POSITION);
    crossingModeEEnum = createEEnum(CROSSING_MODE);
    lightModeEEnum = createEEnum(LIGHT_MODE);
    railSegmentEEnum = createEEnum(RAIL_SEGMENT);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    setStatementEClass.getESuperTypes().add(this.getStatement());
    trackStatementEClass.getESuperTypes().add(this.getSetStatement());
    pointStatementEClass.getESuperTypes().add(this.getSetStatement());
    waitStatementEClass.getESuperTypes().add(this.getStatement());
    timeWaitStatementEClass.getESuperTypes().add(this.getWaitStatement());
    contactWaitStatementEClass.getESuperTypes().add(this.getWaitStatement());
    opStatementEClass.getESuperTypes().add(this.getStatement());
    crossingStatementEClass.getESuperTypes().add(this.getOpStatement());
    lightStatementEClass.getESuperTypes().add(this.getOpStatement());
    conditionalStatementEClass.getESuperTypes().add(this.getStatement());
    parallelStatementEClass.getESuperTypes().add(this.getStatement());

    // Initialize classes and features; add operations and parameters
    initEClass(railProgramEClass, RailProgram.class, "RailProgram", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRailProgram_Block(), this.getBlock(), null, "block", null, 0, 1, RailProgram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(blockEClass, Block.class, "Block", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBlock_Statements(), this.getStatement(), null, "statements", null, 0, -1, Block.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBlock_End(), this.getBlockEnd(), "end", null, 0, 1, Block.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementEClass, Statement.class, "Statement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(setStatementEClass, SetStatement.class, "SetStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(trackStatementEClass, TrackStatement.class, "TrackStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTrackStatement_Segments(), this.getRailSegment(), "segments", null, 0, -1, TrackStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTrackStatement_Speed(), this.getTrackSpeed(), "speed", null, 0, 1, TrackStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTrackStatement_Reverse(), ecorePackage.getEBoolean(), "reverse", null, 0, 1, TrackStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(pointStatementEClass, PointStatement.class, "PointStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPointStatement_Points(), ecorePackage.getEInt(), "points", null, 0, -1, PointStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPointStatement_Orientation(), this.getPointOrinetation(), "orientation", null, 0, 1, PointStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(waitStatementEClass, WaitStatement.class, "WaitStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(timeWaitStatementEClass, TimeWaitStatement.class, "TimeWaitStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTimeWaitStatement_Time(), ecorePackage.getEInt(), "time", null, 0, 1, TimeWaitStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(contactWaitStatementEClass, ContactWaitStatement.class, "ContactWaitStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getContactWaitStatement_Event(), this.getContactEvent(), "event", null, 0, 1, ContactWaitStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getContactWaitStatement_Contact(), this.getContactPosition(), "contact", null, 0, 1, ContactWaitStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getContactWaitStatement_Segment(), this.getRailSegment(), "segment", null, 0, 1, ContactWaitStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(opStatementEClass, OpStatement.class, "OpStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(crossingStatementEClass, CrossingStatement.class, "CrossingStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCrossingStatement_Mode(), this.getCrossingMode(), "mode", null, 0, 1, CrossingStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(lightStatementEClass, LightStatement.class, "LightStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLightStatement_Lights(), ecorePackage.getEInt(), "lights", null, 0, -1, LightStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLightStatement_State(), ecorePackage.getEString(), "state", null, 0, 1, LightStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(conditionalStatementEClass, ConditionalStatement.class, "ConditionalStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConditionalStatement_Lines(), this.getConditionalLine(), null, "lines", null, 0, -1, ConditionalStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(conditionalLineEClass, ConditionalLine.class, "ConditionalLine", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConditionalLine_Contact(), this.getContactPosition(), "contact", null, 0, 1, ConditionalLine.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConditionalLine_Segment(), this.getRailSegment(), "segment", null, 0, 1, ConditionalLine.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionalLine_Block(), this.getBlock(), null, "block", null, 0, 1, ConditionalLine.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parallelStatementEClass, ParallelStatement.class, "ParallelStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getParallelStatement_Blocks(), this.getBlock(), null, "blocks", null, 0, -1, ParallelStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(blockEndEEnum, BlockEnd.class, "BlockEnd");
    addEEnumLiteral(blockEndEEnum, BlockEnd.END);
    addEEnumLiteral(blockEndEEnum, BlockEnd.LOOP);

    initEEnum(trackSpeedEEnum, TrackSpeed.class, "TrackSpeed");
    addEEnumLiteral(trackSpeedEEnum, TrackSpeed.STOP);
    addEEnumLiteral(trackSpeedEEnum, TrackSpeed.FULL);
    addEEnumLiteral(trackSpeedEEnum, TrackSpeed.SLOW);

    initEEnum(pointOrinetationEEnum, PointOrinetation.class, "PointOrinetation");
    addEEnumLiteral(pointOrinetationEEnum, PointOrinetation.STRAIGHT);
    addEEnumLiteral(pointOrinetationEEnum, PointOrinetation.BRANCH);

    initEEnum(contactEventEEnum, ContactEvent.class, "ContactEvent");
    addEEnumLiteral(contactEventEEnum, ContactEvent.REACH);
    addEEnumLiteral(contactEventEEnum, ContactEvent.PASS);

    initEEnum(contactPositionEEnum, ContactPosition.class, "ContactPosition");
    addEEnumLiteral(contactPositionEEnum, ContactPosition.FIRST);
    addEEnumLiteral(contactPositionEEnum, ContactPosition.SECOND);

    initEEnum(crossingModeEEnum, CrossingMode.class, "CrossingMode");
    addEEnumLiteral(crossingModeEEnum, CrossingMode.OPEN);
    addEEnumLiteral(crossingModeEEnum, CrossingMode.CLOSE);

    initEEnum(lightModeEEnum, LightMode.class, "LightMode");
    addEEnumLiteral(lightModeEEnum, LightMode.ON);
    addEEnumLiteral(lightModeEEnum, LightMode.OFF);

    initEEnum(railSegmentEEnum, RailSegment.class, "RailSegment");
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_ST_0);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_ST_1);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_ST_2);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_ST_3);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_ST_4);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_ST_5);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_ST_6);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_LN_0);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_LN_1);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_LN_2);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_LN_3);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_LN_4);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_LN_5);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_LN_6);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_LN_7);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KH_LN_8);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KIO_LN_0);
    addEEnumLiteral(railSegmentEEnum, RailSegment.KIO_LN_1);
    addEEnumLiteral(railSegmentEEnum, RailSegment.OC_ST_0);
    addEEnumLiteral(railSegmentEEnum, RailSegment.OC_ST_1);
    addEEnumLiteral(railSegmentEEnum, RailSegment.OC_ST_2);
    addEEnumLiteral(railSegmentEEnum, RailSegment.OC_ST_3);
    addEEnumLiteral(railSegmentEEnum, RailSegment.OC_ST_4);
    addEEnumLiteral(railSegmentEEnum, RailSegment.OC_LN_0);
    addEEnumLiteral(railSegmentEEnum, RailSegment.OC_LN_1);
    addEEnumLiteral(railSegmentEEnum, RailSegment.OC_LN_2);
    addEEnumLiteral(railSegmentEEnum, RailSegment.OC_LN_3);
    addEEnumLiteral(railSegmentEEnum, RailSegment.OC_LN_4);
    addEEnumLiteral(railSegmentEEnum, RailSegment.OC_LN_5);
    addEEnumLiteral(railSegmentEEnum, RailSegment.IC_ST_0);
    addEEnumLiteral(railSegmentEEnum, RailSegment.IC_ST_1);
    addEEnumLiteral(railSegmentEEnum, RailSegment.IC_ST_2);
    addEEnumLiteral(railSegmentEEnum, RailSegment.IC_ST_3);
    addEEnumLiteral(railSegmentEEnum, RailSegment.IC_ST_4);
    addEEnumLiteral(railSegmentEEnum, RailSegment.IC_LN_0);
    addEEnumLiteral(railSegmentEEnum, RailSegment.IC_LN_1);
    addEEnumLiteral(railSegmentEEnum, RailSegment.IC_LN_2);
    addEEnumLiteral(railSegmentEEnum, RailSegment.IC_LN_3);
    addEEnumLiteral(railSegmentEEnum, RailSegment.IC_LN_4);
    addEEnumLiteral(railSegmentEEnum, RailSegment.IC_LN_5);
    addEEnumLiteral(railSegmentEEnum, RailSegment.OC_JCT_0);
    addEEnumLiteral(railSegmentEEnum, RailSegment.IC_JCT_0);
    addEEnumLiteral(railSegmentEEnum, RailSegment.OI_LN_0);
    addEEnumLiteral(railSegmentEEnum, RailSegment.OI_LN_1);
    addEEnumLiteral(railSegmentEEnum, RailSegment.OI_LN_2);
    addEEnumLiteral(railSegmentEEnum, RailSegment.IO_LN_0);
    addEEnumLiteral(railSegmentEEnum, RailSegment.IO_LN_1);
    addEEnumLiteral(railSegmentEEnum, RailSegment.IO_LN_2);

    // Create resource
    createResource(eNS_URI);
  }

} //RailSLPackageImpl
