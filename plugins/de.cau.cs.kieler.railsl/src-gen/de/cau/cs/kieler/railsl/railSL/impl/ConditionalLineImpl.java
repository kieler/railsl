/**
 * generated by Xtext 2.16.0
 */
package de.cau.cs.kieler.railsl.railSL.impl;

import de.cau.cs.kieler.railsl.railSL.Block;
import de.cau.cs.kieler.railsl.railSL.ConditionalLine;
import de.cau.cs.kieler.railsl.railSL.ContactPosition;
import de.cau.cs.kieler.railsl.railSL.RailSLPackage;
import de.cau.cs.kieler.railsl.railSL.RailSegment;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Conditional Line</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.railsl.railSL.impl.ConditionalLineImpl#getContact <em>Contact</em>}</li>
 *   <li>{@link de.cau.cs.kieler.railsl.railSL.impl.ConditionalLineImpl#getSegment <em>Segment</em>}</li>
 *   <li>{@link de.cau.cs.kieler.railsl.railSL.impl.ConditionalLineImpl#getBlock <em>Block</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionalLineImpl extends MinimalEObjectImpl.Container implements ConditionalLine
{
  /**
   * The default value of the '{@link #getContact() <em>Contact</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContact()
   * @generated
   * @ordered
   */
  protected static final ContactPosition CONTACT_EDEFAULT = ContactPosition.FIRST;

  /**
   * The cached value of the '{@link #getContact() <em>Contact</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContact()
   * @generated
   * @ordered
   */
  protected ContactPosition contact = CONTACT_EDEFAULT;

  /**
   * The default value of the '{@link #getSegment() <em>Segment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSegment()
   * @generated
   * @ordered
   */
  protected static final RailSegment SEGMENT_EDEFAULT = RailSegment.IC_JCT_0;

  /**
   * The cached value of the '{@link #getSegment() <em>Segment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSegment()
   * @generated
   * @ordered
   */
  protected RailSegment segment = SEGMENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getBlock() <em>Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlock()
   * @generated
   * @ordered
   */
  protected Block block;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionalLineImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RailSLPackage.Literals.CONDITIONAL_LINE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContactPosition getContact()
  {
    return contact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContact(ContactPosition newContact)
  {
    ContactPosition oldContact = contact;
    contact = newContact == null ? CONTACT_EDEFAULT : newContact;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RailSLPackage.CONDITIONAL_LINE__CONTACT, oldContact, contact));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RailSegment getSegment()
  {
    return segment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSegment(RailSegment newSegment)
  {
    RailSegment oldSegment = segment;
    segment = newSegment == null ? SEGMENT_EDEFAULT : newSegment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RailSLPackage.CONDITIONAL_LINE__SEGMENT, oldSegment, segment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Block getBlock()
  {
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBlock(Block newBlock, NotificationChain msgs)
  {
    Block oldBlock = block;
    block = newBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RailSLPackage.CONDITIONAL_LINE__BLOCK, oldBlock, newBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBlock(Block newBlock)
  {
    if (newBlock != block)
    {
      NotificationChain msgs = null;
      if (block != null)
        msgs = ((InternalEObject)block).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RailSLPackage.CONDITIONAL_LINE__BLOCK, null, msgs);
      if (newBlock != null)
        msgs = ((InternalEObject)newBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RailSLPackage.CONDITIONAL_LINE__BLOCK, null, msgs);
      msgs = basicSetBlock(newBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RailSLPackage.CONDITIONAL_LINE__BLOCK, newBlock, newBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RailSLPackage.CONDITIONAL_LINE__BLOCK:
        return basicSetBlock(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RailSLPackage.CONDITIONAL_LINE__CONTACT:
        return getContact();
      case RailSLPackage.CONDITIONAL_LINE__SEGMENT:
        return getSegment();
      case RailSLPackage.CONDITIONAL_LINE__BLOCK:
        return getBlock();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RailSLPackage.CONDITIONAL_LINE__CONTACT:
        setContact((ContactPosition)newValue);
        return;
      case RailSLPackage.CONDITIONAL_LINE__SEGMENT:
        setSegment((RailSegment)newValue);
        return;
      case RailSLPackage.CONDITIONAL_LINE__BLOCK:
        setBlock((Block)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RailSLPackage.CONDITIONAL_LINE__CONTACT:
        setContact(CONTACT_EDEFAULT);
        return;
      case RailSLPackage.CONDITIONAL_LINE__SEGMENT:
        setSegment(SEGMENT_EDEFAULT);
        return;
      case RailSLPackage.CONDITIONAL_LINE__BLOCK:
        setBlock((Block)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RailSLPackage.CONDITIONAL_LINE__CONTACT:
        return contact != CONTACT_EDEFAULT;
      case RailSLPackage.CONDITIONAL_LINE__SEGMENT:
        return segment != SEGMENT_EDEFAULT;
      case RailSLPackage.CONDITIONAL_LINE__BLOCK:
        return block != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (contact: ");
    result.append(contact);
    result.append(", segment: ");
    result.append(segment);
    result.append(')');
    return result.toString();
  }

} //ConditionalLineImpl
