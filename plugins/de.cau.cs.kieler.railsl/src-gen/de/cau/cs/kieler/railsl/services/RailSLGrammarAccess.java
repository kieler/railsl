/*
 * generated by Xtext 2.16.0
 */
package de.cau.cs.kieler.railsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RailSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RailProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.RailProgram");
		private final Assignment cBlockAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_0 = (RuleCall)cBlockAssignment.eContents().get(0);
		
		//RailProgram:
		//	block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//block=Block
		public Assignment getBlockAssignment() { return cBlockAssignment; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_0() { return cBlockBlockParserRuleCall_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cStartKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cStartKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndBlockEndEnumRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		
		//Block:
		//	('Start:' | 'start:') statements+=Statement+
		//	end=BlockEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//('Start:' | 'start:') statements+=Statement+ end=BlockEnd
		public Group getGroup() { return cGroup; }
		
		//'Start:' | 'start:'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Start:'
		public Keyword getStartKeyword_0_0() { return cStartKeyword_0_0; }
		
		//'start:'
		public Keyword getStartKeyword_0_1() { return cStartKeyword_0_1; }
		
		//statements+=Statement+
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
		
		//end=BlockEnd
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }
		
		//BlockEnd
		public RuleCall getEndBlockEndEnumRuleCall_2_0() { return cEndBlockEndEnumRuleCall_2_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWaitStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOpStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConditionalStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cParallelStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Statement:
		//	SetStatement | WaitStatement | OpStatement | ConditionalStatement | ParallelStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//SetStatement | WaitStatement | OpStatement | ConditionalStatement | ParallelStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SetStatement
		public RuleCall getSetStatementParserRuleCall_0() { return cSetStatementParserRuleCall_0; }
		
		//WaitStatement
		public RuleCall getWaitStatementParserRuleCall_1() { return cWaitStatementParserRuleCall_1; }
		
		//OpStatement
		public RuleCall getOpStatementParserRuleCall_2() { return cOpStatementParserRuleCall_2; }
		
		//ConditionalStatement
		public RuleCall getConditionalStatementParserRuleCall_3() { return cConditionalStatementParserRuleCall_3; }
		
		//ParallelStatement
		public RuleCall getParallelStatementParserRuleCall_4() { return cParallelStatementParserRuleCall_4; }
	}
	public class SetStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.SetStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTrackStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPointStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SetStatement:
		//	TrackStatement | PointStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//TrackStatement | PointStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TrackStatement
		public RuleCall getTrackStatementParserRuleCall_0() { return cTrackStatementParserRuleCall_0; }
		
		//PointStatement
		public RuleCall getPointStatementParserRuleCall_1() { return cPointStatementParserRuleCall_1; }
	}
	public class TrackStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.TrackStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSetKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cTrackKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSegmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSegmentsRailSegmentEnumRuleCall_2_0 = (RuleCall)cSegmentsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cAndKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Group cGroup_3_0_2 = (Group)cAlternatives_3_0.eContents().get(2);
		private final Keyword cCommaKeyword_3_0_2_0 = (Keyword)cGroup_3_0_2.eContents().get(0);
		private final Keyword cAndKeyword_3_0_2_1 = (Keyword)cGroup_3_0_2.eContents().get(1);
		private final Assignment cSegmentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSegmentsRailSegmentEnumRuleCall_3_1_0 = (RuleCall)cSegmentsAssignment_3_1.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cSpeedAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cSpeedTrackSpeedStopEnumRuleCall_5_0_0 = (RuleCall)cSpeedAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cSpeedAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cSpeedTrackSpeedDriveEnumRuleCall_5_1_0_0 = (RuleCall)cSpeedAssignment_5_1_0.eContents().get(0);
		private final Assignment cReverseAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final Keyword cReverseReverseKeyword_5_1_1_0 = (Keyword)cReverseAssignment_5_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TrackStatement:
		//	('Set' | 'set') 'track'
		//	segments+=RailSegment ((',' | 'and' | ',' 'and') segments+=RailSegment)*
		//	'to' (speed=TrackSpeedStop | speed=TrackSpeedDrive reverse?='reverse'?) '.';
		@Override public ParserRule getRule() { return rule; }
		
		//('Set' | 'set') 'track' segments+=RailSegment ((',' | 'and' | ',' 'and') segments+=RailSegment)* 'to'
		//(speed=TrackSpeedStop | speed=TrackSpeedDrive reverse?='reverse'?) '.'
		public Group getGroup() { return cGroup; }
		
		//'Set' | 'set'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Set'
		public Keyword getSetKeyword_0_0() { return cSetKeyword_0_0; }
		
		//'set'
		public Keyword getSetKeyword_0_1() { return cSetKeyword_0_1; }
		
		//'track'
		public Keyword getTrackKeyword_1() { return cTrackKeyword_1; }
		
		//segments+=RailSegment
		public Assignment getSegmentsAssignment_2() { return cSegmentsAssignment_2; }
		
		//RailSegment
		public RuleCall getSegmentsRailSegmentEnumRuleCall_2_0() { return cSegmentsRailSegmentEnumRuleCall_2_0; }
		
		//((',' | 'and' | ',' 'and') segments+=RailSegment)*
		public Group getGroup_3() { return cGroup_3; }
		
		//',' | 'and' | ',' 'and'
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//','
		public Keyword getCommaKeyword_3_0_0() { return cCommaKeyword_3_0_0; }
		
		//'and'
		public Keyword getAndKeyword_3_0_1() { return cAndKeyword_3_0_1; }
		
		//',' 'and'
		public Group getGroup_3_0_2() { return cGroup_3_0_2; }
		
		//','
		public Keyword getCommaKeyword_3_0_2_0() { return cCommaKeyword_3_0_2_0; }
		
		//'and'
		public Keyword getAndKeyword_3_0_2_1() { return cAndKeyword_3_0_2_1; }
		
		//segments+=RailSegment
		public Assignment getSegmentsAssignment_3_1() { return cSegmentsAssignment_3_1; }
		
		//RailSegment
		public RuleCall getSegmentsRailSegmentEnumRuleCall_3_1_0() { return cSegmentsRailSegmentEnumRuleCall_3_1_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//speed=TrackSpeedStop | speed=TrackSpeedDrive reverse?='reverse'?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//speed=TrackSpeedStop
		public Assignment getSpeedAssignment_5_0() { return cSpeedAssignment_5_0; }
		
		//TrackSpeedStop
		public RuleCall getSpeedTrackSpeedStopEnumRuleCall_5_0_0() { return cSpeedTrackSpeedStopEnumRuleCall_5_0_0; }
		
		//speed=TrackSpeedDrive reverse?='reverse'?
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//speed=TrackSpeedDrive
		public Assignment getSpeedAssignment_5_1_0() { return cSpeedAssignment_5_1_0; }
		
		//TrackSpeedDrive
		public RuleCall getSpeedTrackSpeedDriveEnumRuleCall_5_1_0_0() { return cSpeedTrackSpeedDriveEnumRuleCall_5_1_0_0; }
		
		//reverse?='reverse'?
		public Assignment getReverseAssignment_5_1_1() { return cReverseAssignment_5_1_1; }
		
		//'reverse'
		public Keyword getReverseReverseKeyword_5_1_1_0() { return cReverseReverseKeyword_5_1_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
	}
	public class PointStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.PointStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSetKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cPointKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPointsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPointsINTTerminalRuleCall_2_0 = (RuleCall)cPointsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cAndKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Group cGroup_3_0_2 = (Group)cAlternatives_3_0.eContents().get(2);
		private final Keyword cCommaKeyword_3_0_2_0 = (Keyword)cGroup_3_0_2.eContents().get(0);
		private final Keyword cAndKeyword_3_0_2_1 = (Keyword)cGroup_3_0_2.eContents().get(1);
		private final Assignment cPointsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPointsINTTerminalRuleCall_3_1_0 = (RuleCall)cPointsAssignment_3_1.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOrientationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOrientationPointOrinetationEnumRuleCall_5_0 = (RuleCall)cOrientationAssignment_5.eContents().get(0);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PointStatement:
		//	('Set' | 'set') 'point'
		//	points+=INT ((',' | 'and' | ',' 'and') points+=INT)*
		//	'to' orientation=PointOrinetation '.';
		@Override public ParserRule getRule() { return rule; }
		
		//('Set' | 'set') 'point' points+=INT ((',' | 'and' | ',' 'and') points+=INT)* 'to' orientation=PointOrinetation '.'
		public Group getGroup() { return cGroup; }
		
		//'Set' | 'set'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Set'
		public Keyword getSetKeyword_0_0() { return cSetKeyword_0_0; }
		
		//'set'
		public Keyword getSetKeyword_0_1() { return cSetKeyword_0_1; }
		
		//'point'
		public Keyword getPointKeyword_1() { return cPointKeyword_1; }
		
		//points+=INT
		public Assignment getPointsAssignment_2() { return cPointsAssignment_2; }
		
		//INT
		public RuleCall getPointsINTTerminalRuleCall_2_0() { return cPointsINTTerminalRuleCall_2_0; }
		
		//((',' | 'and' | ',' 'and') points+=INT)*
		public Group getGroup_3() { return cGroup_3; }
		
		//',' | 'and' | ',' 'and'
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//','
		public Keyword getCommaKeyword_3_0_0() { return cCommaKeyword_3_0_0; }
		
		//'and'
		public Keyword getAndKeyword_3_0_1() { return cAndKeyword_3_0_1; }
		
		//',' 'and'
		public Group getGroup_3_0_2() { return cGroup_3_0_2; }
		
		//','
		public Keyword getCommaKeyword_3_0_2_0() { return cCommaKeyword_3_0_2_0; }
		
		//'and'
		public Keyword getAndKeyword_3_0_2_1() { return cAndKeyword_3_0_2_1; }
		
		//points+=INT
		public Assignment getPointsAssignment_3_1() { return cPointsAssignment_3_1; }
		
		//INT
		public RuleCall getPointsINTTerminalRuleCall_3_1_0() { return cPointsINTTerminalRuleCall_3_1_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//orientation=PointOrinetation
		public Assignment getOrientationAssignment_5() { return cOrientationAssignment_5; }
		
		//PointOrinetation
		public RuleCall getOrientationPointOrinetationEnumRuleCall_5_0() { return cOrientationPointOrinetationEnumRuleCall_5_0; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
	}
	public class WaitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.WaitStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTimeWaitStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContactWaitStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WaitStatement:
		//	TimeWaitStatement | ContactWaitStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//TimeWaitStatement | ContactWaitStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TimeWaitStatement
		public RuleCall getTimeWaitStatementParserRuleCall_0() { return cTimeWaitStatementParserRuleCall_0; }
		
		//ContactWaitStatement
		public RuleCall getContactWaitStatementParserRuleCall_1() { return cContactWaitStatementParserRuleCall_1; }
	}
	public class TimeWaitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.TimeWaitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cWaitKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cWaitKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeINTTerminalRuleCall_2_0 = (RuleCall)cTimeAssignment_2.eContents().get(0);
		private final Keyword cSecondsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TimeWaitStatement:
		//	('Wait' | 'wait') 'for'
		//	time=INT
		//	'seconds.';
		@Override public ParserRule getRule() { return rule; }
		
		//('Wait' | 'wait') 'for' time=INT 'seconds.'
		public Group getGroup() { return cGroup; }
		
		//'Wait' | 'wait'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Wait'
		public Keyword getWaitKeyword_0_0() { return cWaitKeyword_0_0; }
		
		//'wait'
		public Keyword getWaitKeyword_0_1() { return cWaitKeyword_0_1; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//time=INT
		public Assignment getTimeAssignment_2() { return cTimeAssignment_2; }
		
		//INT
		public RuleCall getTimeINTTerminalRuleCall_2_0() { return cTimeINTTerminalRuleCall_2_0; }
		
		//'seconds.'
		public Keyword getSecondsKeyword_3() { return cSecondsKeyword_3; }
	}
	public class ContactWaitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.ContactWaitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventContactEventEnumRuleCall_0_0 = (RuleCall)cEventAssignment_0.eContents().get(0);
		private final Assignment cContactAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContactContactPositionEnumRuleCall_1_0 = (RuleCall)cContactAssignment_1.eContents().get(0);
		private final Keyword cContactKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSegmentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSegmentRailSegmentEnumRuleCall_4_0 = (RuleCall)cSegmentAssignment_4.eContents().get(0);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ContactWaitStatement:
		//	event=ContactEvent
		//	contact=ContactPosition
		//	'contact' 'of'?
		//	segment=RailSegment '.';
		@Override public ParserRule getRule() { return rule; }
		
		//event=ContactEvent contact=ContactPosition 'contact' 'of'? segment=RailSegment '.'
		public Group getGroup() { return cGroup; }
		
		//event=ContactEvent
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }
		
		//ContactEvent
		public RuleCall getEventContactEventEnumRuleCall_0_0() { return cEventContactEventEnumRuleCall_0_0; }
		
		//contact=ContactPosition
		public Assignment getContactAssignment_1() { return cContactAssignment_1; }
		
		//ContactPosition
		public RuleCall getContactContactPositionEnumRuleCall_1_0() { return cContactContactPositionEnumRuleCall_1_0; }
		
		//'contact'
		public Keyword getContactKeyword_2() { return cContactKeyword_2; }
		
		//'of'?
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//segment=RailSegment
		public Assignment getSegmentAssignment_4() { return cSegmentAssignment_4; }
		
		//RailSegment
		public RuleCall getSegmentRailSegmentEnumRuleCall_4_0() { return cSegmentRailSegmentEnumRuleCall_4_0; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
	}
	public class OpStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.OpStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCrossingStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLightStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OpStatement:
		//	CrossingStatement | LightStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//CrossingStatement | LightStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CrossingStatement
		public RuleCall getCrossingStatementParserRuleCall_0() { return cCrossingStatementParserRuleCall_0; }
		
		//LightStatement
		public RuleCall getLightStatementParserRuleCall_1() { return cLightStatementParserRuleCall_1; }
	}
	public class CrossingStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.CrossingStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModeCrossingModeEnumRuleCall_0_0 = (RuleCall)cModeAssignment_0.eContents().get(0);
		private final Keyword cCrossingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CrossingStatement:
		//	mode=CrossingMode 'crossing.';
		@Override public ParserRule getRule() { return rule; }
		
		//mode=CrossingMode 'crossing.'
		public Group getGroup() { return cGroup; }
		
		//mode=CrossingMode
		public Assignment getModeAssignment_0() { return cModeAssignment_0; }
		
		//CrossingMode
		public RuleCall getModeCrossingModeEnumRuleCall_0_0() { return cModeCrossingModeEnumRuleCall_0_0; }
		
		//'crossing.'
		public Keyword getCrossingKeyword_1() { return cCrossingKeyword_1; }
	}
	public class LightStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.LightStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTurnKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cTurnKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLightKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLightsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLightsINTTerminalRuleCall_2_0 = (RuleCall)cLightsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cAndKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Group cGroup_3_0_2 = (Group)cAlternatives_3_0.eContents().get(2);
		private final Keyword cCommaKeyword_3_0_2_0 = (Keyword)cGroup_3_0_2.eContents().get(0);
		private final Keyword cAndKeyword_3_0_2_1 = (Keyword)cGroup_3_0_2.eContents().get(1);
		private final Assignment cLightsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLightsINTTerminalRuleCall_3_1_0 = (RuleCall)cLightsAssignment_3_1.eContents().get(0);
		private final Assignment cStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cStateAlternatives_4_0 = (Alternatives)cStateAssignment_4.eContents().get(0);
		private final Keyword cStateOnKeyword_4_0_0 = (Keyword)cStateAlternatives_4_0.eContents().get(0);
		private final Keyword cStateOffKeyword_4_0_1 = (Keyword)cStateAlternatives_4_0.eContents().get(1);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LightStatement:
		//	('Turn' | 'turn') 'light'
		//	lights+=INT ((',' | 'and' | ',' 'and') lights+=INT)*
		//	state=('on' | 'off')
		//	'.';
		@Override public ParserRule getRule() { return rule; }
		
		//('Turn' | 'turn') 'light' lights+=INT ((',' | 'and' | ',' 'and') lights+=INT)* state=('on' | 'off') '.'
		public Group getGroup() { return cGroup; }
		
		//'Turn' | 'turn'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Turn'
		public Keyword getTurnKeyword_0_0() { return cTurnKeyword_0_0; }
		
		//'turn'
		public Keyword getTurnKeyword_0_1() { return cTurnKeyword_0_1; }
		
		//'light'
		public Keyword getLightKeyword_1() { return cLightKeyword_1; }
		
		//lights+=INT
		public Assignment getLightsAssignment_2() { return cLightsAssignment_2; }
		
		//INT
		public RuleCall getLightsINTTerminalRuleCall_2_0() { return cLightsINTTerminalRuleCall_2_0; }
		
		//((',' | 'and' | ',' 'and') lights+=INT)*
		public Group getGroup_3() { return cGroup_3; }
		
		//',' | 'and' | ',' 'and'
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//','
		public Keyword getCommaKeyword_3_0_0() { return cCommaKeyword_3_0_0; }
		
		//'and'
		public Keyword getAndKeyword_3_0_1() { return cAndKeyword_3_0_1; }
		
		//',' 'and'
		public Group getGroup_3_0_2() { return cGroup_3_0_2; }
		
		//','
		public Keyword getCommaKeyword_3_0_2_0() { return cCommaKeyword_3_0_2_0; }
		
		//'and'
		public Keyword getAndKeyword_3_0_2_1() { return cAndKeyword_3_0_2_1; }
		
		//lights+=INT
		public Assignment getLightsAssignment_3_1() { return cLightsAssignment_3_1; }
		
		//INT
		public RuleCall getLightsINTTerminalRuleCall_3_1_0() { return cLightsINTTerminalRuleCall_3_1_0; }
		
		//state=('on' | 'off')
		public Assignment getStateAssignment_4() { return cStateAssignment_4; }
		
		//('on' | 'off')
		public Alternatives getStateAlternatives_4_0() { return cStateAlternatives_4_0; }
		
		//'on'
		public Keyword getStateOnKeyword_4_0_0() { return cStateOnKeyword_4_0_0; }
		
		//'off'
		public Keyword getStateOffKeyword_4_0_1() { return cStateOffKeyword_4_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
	}
	public class ConditionalStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.ConditionalStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cBranchKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cBranchKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cLinesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinesConditionalLineParserRuleCall_1_0 = (RuleCall)cLinesAssignment_1.eContents().get(0);
		private final Assignment cLinesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLinesConditionalLineParserRuleCall_2_0 = (RuleCall)cLinesAssignment_2.eContents().get(0);
		
		//ConditionalStatement:
		//	('Branch:' | 'branch:') lines+=ConditionalLine
		//	lines+=ConditionalLine+;
		@Override public ParserRule getRule() { return rule; }
		
		//('Branch:' | 'branch:') lines+=ConditionalLine lines+=ConditionalLine+
		public Group getGroup() { return cGroup; }
		
		//'Branch:' | 'branch:'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Branch:'
		public Keyword getBranchKeyword_0_0() { return cBranchKeyword_0_0; }
		
		//'branch:'
		public Keyword getBranchKeyword_0_1() { return cBranchKeyword_0_1; }
		
		//lines+=ConditionalLine
		public Assignment getLinesAssignment_1() { return cLinesAssignment_1; }
		
		//ConditionalLine
		public RuleCall getLinesConditionalLineParserRuleCall_1_0() { return cLinesConditionalLineParserRuleCall_1_0; }
		
		//lines+=ConditionalLine+
		public Assignment getLinesAssignment_2() { return cLinesAssignment_2; }
		
		//ConditionalLine
		public RuleCall getLinesConditionalLineParserRuleCall_2_0() { return cLinesConditionalLineParserRuleCall_2_0; }
	}
	public class ConditionalLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.ConditionalLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cIfKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cContactAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContactContactPositionEnumRuleCall_1_0 = (RuleCall)cContactAssignment_1.eContents().get(0);
		private final Keyword cContactKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSegmentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSegmentRailSegmentEnumRuleCall_4_0 = (RuleCall)cSegmentAssignment_4.eContents().get(0);
		private final Keyword cIsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cReachedKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Keyword cFirstKeyword_7_0 = (Keyword)cAlternatives_7.eContents().get(0);
		private final Keyword cFirstKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		private final Keyword cDoKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBlockAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBlockBlockParserRuleCall_9_0 = (RuleCall)cBlockAssignment_9.eContents().get(0);
		
		//ConditionalLine:
		//	('If' | 'if') contact=ContactPosition
		//	'contact' 'of' segment=RailSegment
		//	'is' 'reached' ('first' | 'first,') 'do' block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//('If' | 'if') contact=ContactPosition 'contact' 'of' segment=RailSegment 'is' 'reached' ('first' | 'first,') 'do'
		//block=Block
		public Group getGroup() { return cGroup; }
		
		//'If' | 'if'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'If'
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }
		
		//'if'
		public Keyword getIfKeyword_0_1() { return cIfKeyword_0_1; }
		
		//contact=ContactPosition
		public Assignment getContactAssignment_1() { return cContactAssignment_1; }
		
		//ContactPosition
		public RuleCall getContactContactPositionEnumRuleCall_1_0() { return cContactContactPositionEnumRuleCall_1_0; }
		
		//'contact'
		public Keyword getContactKeyword_2() { return cContactKeyword_2; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//segment=RailSegment
		public Assignment getSegmentAssignment_4() { return cSegmentAssignment_4; }
		
		//RailSegment
		public RuleCall getSegmentRailSegmentEnumRuleCall_4_0() { return cSegmentRailSegmentEnumRuleCall_4_0; }
		
		//'is'
		public Keyword getIsKeyword_5() { return cIsKeyword_5; }
		
		//'reached'
		public Keyword getReachedKeyword_6() { return cReachedKeyword_6; }
		
		//'first' | 'first,'
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'first'
		public Keyword getFirstKeyword_7_0() { return cFirstKeyword_7_0; }
		
		//'first,'
		public Keyword getFirstKeyword_7_1() { return cFirstKeyword_7_1; }
		
		//'do'
		public Keyword getDoKeyword_8() { return cDoKeyword_8; }
		
		//block=Block
		public Assignment getBlockAssignment_9() { return cBlockAssignment_9; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_9_0() { return cBlockBlockParserRuleCall_9_0; }
	}
	public class ParallelStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.ParallelStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cParallelKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cParallelKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cBlocksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlocksBlockParserRuleCall_1_0 = (RuleCall)cBlocksAssignment_1.eContents().get(0);
		private final Assignment cBlocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlocksBlockParserRuleCall_2_0 = (RuleCall)cBlocksAssignment_2.eContents().get(0);
		
		//ParallelStatement:
		//	('Parallel:' | 'parallel:') blocks+=Block
		//	blocks+=Block+;
		@Override public ParserRule getRule() { return rule; }
		
		//('Parallel:' | 'parallel:') blocks+=Block blocks+=Block+
		public Group getGroup() { return cGroup; }
		
		//'Parallel:' | 'parallel:'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Parallel:'
		public Keyword getParallelKeyword_0_0() { return cParallelKeyword_0_0; }
		
		//'parallel:'
		public Keyword getParallelKeyword_0_1() { return cParallelKeyword_0_1; }
		
		//blocks+=Block
		public Assignment getBlocksAssignment_1() { return cBlocksAssignment_1; }
		
		//Block
		public RuleCall getBlocksBlockParserRuleCall_1_0() { return cBlocksBlockParserRuleCall_1_0; }
		
		//blocks+=Block+
		public Assignment getBlocksAssignment_2() { return cBlocksAssignment_2; }
		
		//Block
		public RuleCall getBlocksBlockParserRuleCall_2_0() { return cBlocksBlockParserRuleCall_2_0; }
	}
	
	public class BlockEndElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.BlockEnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cENDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cENDEndKeyword_0_0 = (Keyword)cENDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cENDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cENDEndKeyword_1_0 = (Keyword)cENDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLOOPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLOOPLoopKeyword_2_0 = (Keyword)cLOOPEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLOOPEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLOOPLoopKeyword_3_0 = (Keyword)cLOOPEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum BlockEnd:
		//	END='End.' | END='end.' |
		//	LOOP='Loop.' | LOOP='loop.';
		public EnumRule getRule() { return rule; }
		
		//END='End.' | END='end.' | LOOP='Loop.' | LOOP='loop.'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//END='End.'
		public EnumLiteralDeclaration getENDEnumLiteralDeclaration_0() { return cENDEnumLiteralDeclaration_0; }
		
		//'End.'
		public Keyword getENDEndKeyword_0_0() { return cENDEndKeyword_0_0; }
		
		//END='end.'
		public EnumLiteralDeclaration getENDEnumLiteralDeclaration_1() { return cENDEnumLiteralDeclaration_1; }
		
		//'end.'
		public Keyword getENDEndKeyword_1_0() { return cENDEndKeyword_1_0; }
		
		//LOOP='Loop.'
		public EnumLiteralDeclaration getLOOPEnumLiteralDeclaration_2() { return cLOOPEnumLiteralDeclaration_2; }
		
		//'Loop.'
		public Keyword getLOOPLoopKeyword_2_0() { return cLOOPLoopKeyword_2_0; }
		
		//LOOP='loop.'
		public EnumLiteralDeclaration getLOOPEnumLiteralDeclaration_3() { return cLOOPEnumLiteralDeclaration_3; }
		
		//'loop.'
		public Keyword getLOOPLoopKeyword_3_0() { return cLOOPLoopKeyword_3_0; }
	}
	public class TrackSpeedStopElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.TrackSpeedStop");
		private final EnumLiteralDeclaration cSTOPEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSTOPStopKeyword_0 = (Keyword)cSTOPEnumLiteralDeclaration.eContents().get(0);
		
		//enum TrackSpeedStop returns TrackSpeed:
		//	STOP='stop';
		public EnumRule getRule() { return rule; }
		
		//STOP='stop'
		public EnumLiteralDeclaration getSTOPEnumLiteralDeclaration() { return cSTOPEnumLiteralDeclaration; }
		
		//'stop'
		public Keyword getSTOPStopKeyword_0() { return cSTOPStopKeyword_0; }
	}
	public class TrackSpeedDriveElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.TrackSpeedDrive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFULLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFULLFullKeyword_0_0 = (Keyword)cFULLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSLOWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSLOWSlowKeyword_1_0 = (Keyword)cSLOWEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TrackSpeedDrive returns TrackSpeed:
		//	FULL='full' | SLOW='slow';
		public EnumRule getRule() { return rule; }
		
		//FULL='full' | SLOW='slow'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FULL='full'
		public EnumLiteralDeclaration getFULLEnumLiteralDeclaration_0() { return cFULLEnumLiteralDeclaration_0; }
		
		//'full'
		public Keyword getFULLFullKeyword_0_0() { return cFULLFullKeyword_0_0; }
		
		//SLOW='slow'
		public EnumLiteralDeclaration getSLOWEnumLiteralDeclaration_1() { return cSLOWEnumLiteralDeclaration_1; }
		
		//'slow'
		public Keyword getSLOWSlowKeyword_1_0() { return cSLOWSlowKeyword_1_0; }
	}
	public class PointOrinetationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.PointOrinetation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRAIGHTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRAIGHTStraightKeyword_0_0 = (Keyword)cSTRAIGHTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBRANCHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBRANCHBranchKeyword_1_0 = (Keyword)cBRANCHEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PointOrinetation:
		//	STRAIGHT='straight' | BRANCH='branch';
		public EnumRule getRule() { return rule; }
		
		//STRAIGHT='straight' | BRANCH='branch'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRAIGHT='straight'
		public EnumLiteralDeclaration getSTRAIGHTEnumLiteralDeclaration_0() { return cSTRAIGHTEnumLiteralDeclaration_0; }
		
		//'straight'
		public Keyword getSTRAIGHTStraightKeyword_0_0() { return cSTRAIGHTStraightKeyword_0_0; }
		
		//BRANCH='branch'
		public EnumLiteralDeclaration getBRANCHEnumLiteralDeclaration_1() { return cBRANCHEnumLiteralDeclaration_1; }
		
		//'branch'
		public Keyword getBRANCHBranchKeyword_1_0() { return cBRANCHBranchKeyword_1_0; }
	}
	public class ContactEventElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.ContactEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREACHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREACHReachKeyword_0_0 = (Keyword)cREACHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREACHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cREACHReachKeyword_1_0 = (Keyword)cREACHEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPASSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPASSPassKeyword_2_0 = (Keyword)cPASSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPASSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPASSPassKeyword_3_0 = (Keyword)cPASSEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ContactEvent:
		//	REACH='Reach' | REACH='reach' |
		//	PASS='Pass' | PASS='pass';
		public EnumRule getRule() { return rule; }
		
		//REACH='Reach' | REACH='reach' | PASS='Pass' | PASS='pass'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//REACH='Reach'
		public EnumLiteralDeclaration getREACHEnumLiteralDeclaration_0() { return cREACHEnumLiteralDeclaration_0; }
		
		//'Reach'
		public Keyword getREACHReachKeyword_0_0() { return cREACHReachKeyword_0_0; }
		
		//REACH='reach'
		public EnumLiteralDeclaration getREACHEnumLiteralDeclaration_1() { return cREACHEnumLiteralDeclaration_1; }
		
		//'reach'
		public Keyword getREACHReachKeyword_1_0() { return cREACHReachKeyword_1_0; }
		
		//PASS='Pass'
		public EnumLiteralDeclaration getPASSEnumLiteralDeclaration_2() { return cPASSEnumLiteralDeclaration_2; }
		
		//'Pass'
		public Keyword getPASSPassKeyword_2_0() { return cPASSPassKeyword_2_0; }
		
		//PASS='pass'
		public EnumLiteralDeclaration getPASSEnumLiteralDeclaration_3() { return cPASSEnumLiteralDeclaration_3; }
		
		//'pass'
		public Keyword getPASSPassKeyword_3_0() { return cPASSPassKeyword_3_0; }
	}
	public class ContactPositionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.ContactPosition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFIRSTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFIRSTFirstKeyword_0_0 = (Keyword)cFIRSTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSECONDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSECONDSecondKeyword_1_0 = (Keyword)cSECONDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ContactPosition:
		//	FIRST='first' | SECOND='second';
		public EnumRule getRule() { return rule; }
		
		//FIRST='first' | SECOND='second'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FIRST='first'
		public EnumLiteralDeclaration getFIRSTEnumLiteralDeclaration_0() { return cFIRSTEnumLiteralDeclaration_0; }
		
		//'first'
		public Keyword getFIRSTFirstKeyword_0_0() { return cFIRSTFirstKeyword_0_0; }
		
		//SECOND='second'
		public EnumLiteralDeclaration getSECONDEnumLiteralDeclaration_1() { return cSECONDEnumLiteralDeclaration_1; }
		
		//'second'
		public Keyword getSECONDSecondKeyword_1_0() { return cSECONDSecondKeyword_1_0; }
	}
	public class CrossingModeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.CrossingMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOPENEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOPENOpenKeyword_0_0 = (Keyword)cOPENEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOPENEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOPENOpenKeyword_1_0 = (Keyword)cOPENEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCLOSEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCLOSECloseKeyword_2_0 = (Keyword)cCLOSEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCLOSEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCLOSECloseKeyword_3_0 = (Keyword)cCLOSEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum CrossingMode:
		//	OPEN='Open' | OPEN='open' |
		//	CLOSE='Close' | CLOSE='close';
		public EnumRule getRule() { return rule; }
		
		//OPEN='Open' | OPEN='open' | CLOSE='Close' | CLOSE='close'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OPEN='Open'
		public EnumLiteralDeclaration getOPENEnumLiteralDeclaration_0() { return cOPENEnumLiteralDeclaration_0; }
		
		//'Open'
		public Keyword getOPENOpenKeyword_0_0() { return cOPENOpenKeyword_0_0; }
		
		//OPEN='open'
		public EnumLiteralDeclaration getOPENEnumLiteralDeclaration_1() { return cOPENEnumLiteralDeclaration_1; }
		
		//'open'
		public Keyword getOPENOpenKeyword_1_0() { return cOPENOpenKeyword_1_0; }
		
		//CLOSE='Close'
		public EnumLiteralDeclaration getCLOSEEnumLiteralDeclaration_2() { return cCLOSEEnumLiteralDeclaration_2; }
		
		//'Close'
		public Keyword getCLOSECloseKeyword_2_0() { return cCLOSECloseKeyword_2_0; }
		
		//CLOSE='close'
		public EnumLiteralDeclaration getCLOSEEnumLiteralDeclaration_3() { return cCLOSEEnumLiteralDeclaration_3; }
		
		//'close'
		public Keyword getCLOSECloseKeyword_3_0() { return cCLOSECloseKeyword_3_0; }
	}
	public class LightModeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.LightMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cONOnKeyword_0_0 = (Keyword)cONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOFFEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOFFOffKeyword_1_0 = (Keyword)cOFFEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LightMode:
		//	ON='on' | OFF='off';
		public EnumRule getRule() { return rule; }
		
		//ON='on' | OFF='off'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ON='on'
		public EnumLiteralDeclaration getONEnumLiteralDeclaration_0() { return cONEnumLiteralDeclaration_0; }
		
		//'on'
		public Keyword getONOnKeyword_0_0() { return cONOnKeyword_0_0; }
		
		//OFF='off'
		public EnumLiteralDeclaration getOFFEnumLiteralDeclaration_1() { return cOFFEnumLiteralDeclaration_1; }
		
		//'off'
		public Keyword getOFFOffKeyword_1_0() { return cOFFOffKeyword_1_0; }
	}
	public class RailSegmentElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.railsl.RailSL.RailSegment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cKH_ST_0EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cKH_ST_0KH_ST_0Keyword_0_0 = (Keyword)cKH_ST_0EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cKH_ST_1EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cKH_ST_1KH_ST_1Keyword_1_0 = (Keyword)cKH_ST_1EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cKH_ST_2EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cKH_ST_2KH_ST_2Keyword_2_0 = (Keyword)cKH_ST_2EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cKH_ST_3EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cKH_ST_3KH_ST_3Keyword_3_0 = (Keyword)cKH_ST_3EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cKH_ST_4EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cKH_ST_4KH_ST_4Keyword_4_0 = (Keyword)cKH_ST_4EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cKH_ST_5EnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cKH_ST_5KH_ST_5Keyword_5_0 = (Keyword)cKH_ST_5EnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cKH_ST_6EnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cKH_ST_6KH_ST_6Keyword_6_0 = (Keyword)cKH_ST_6EnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cKH_LN_0EnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cKH_LN_0KH_LN_0Keyword_7_0 = (Keyword)cKH_LN_0EnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cKH_LN_1EnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cKH_LN_1KH_LN_1Keyword_8_0 = (Keyword)cKH_LN_1EnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cKH_LN_2EnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cKH_LN_2KH_LN_2Keyword_9_0 = (Keyword)cKH_LN_2EnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cKH_LN_3EnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cKH_LN_3KH_LN_3Keyword_10_0 = (Keyword)cKH_LN_3EnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cKH_LN_4EnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cKH_LN_4KH_LN_4Keyword_11_0 = (Keyword)cKH_LN_4EnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cKH_LN_5EnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cKH_LN_5KH_LN_5Keyword_12_0 = (Keyword)cKH_LN_5EnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cKH_LN_6EnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cKH_LN_6KH_LN_6Keyword_13_0 = (Keyword)cKH_LN_6EnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cKH_LN_7EnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cKH_LN_7KH_LN_7Keyword_14_0 = (Keyword)cKH_LN_7EnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cKH_LN_8EnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cKH_LN_8KH_LN_8Keyword_15_0 = (Keyword)cKH_LN_8EnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cKIO_LN_0EnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cKIO_LN_0KIO_LN_0Keyword_16_0 = (Keyword)cKIO_LN_0EnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cKIO_LN_1EnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cKIO_LN_1KIO_LN_1Keyword_17_0 = (Keyword)cKIO_LN_1EnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cOC_ST_0EnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cOC_ST_0OC_ST_0Keyword_18_0 = (Keyword)cOC_ST_0EnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cOC_ST_1EnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cOC_ST_1OC_ST_1Keyword_19_0 = (Keyword)cOC_ST_1EnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cOC_ST_2EnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cOC_ST_2OC_ST_2Keyword_20_0 = (Keyword)cOC_ST_2EnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cOC_ST_3EnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cOC_ST_3OC_ST_3Keyword_21_0 = (Keyword)cOC_ST_3EnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cOC_ST_4EnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cOC_ST_4OC_ST_4Keyword_22_0 = (Keyword)cOC_ST_4EnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cOC_LN_0EnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cOC_LN_0OC_LN_0Keyword_23_0 = (Keyword)cOC_LN_0EnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cOC_LN_1EnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cOC_LN_1OC_LN_1Keyword_24_0 = (Keyword)cOC_LN_1EnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cOC_LN_2EnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cOC_LN_2OC_LN_2Keyword_25_0 = (Keyword)cOC_LN_2EnumLiteralDeclaration_25.eContents().get(0);
		private final EnumLiteralDeclaration cOC_LN_3EnumLiteralDeclaration_26 = (EnumLiteralDeclaration)cAlternatives.eContents().get(26);
		private final Keyword cOC_LN_3OC_LN_3Keyword_26_0 = (Keyword)cOC_LN_3EnumLiteralDeclaration_26.eContents().get(0);
		private final EnumLiteralDeclaration cOC_LN_4EnumLiteralDeclaration_27 = (EnumLiteralDeclaration)cAlternatives.eContents().get(27);
		private final Keyword cOC_LN_4OC_LN_4Keyword_27_0 = (Keyword)cOC_LN_4EnumLiteralDeclaration_27.eContents().get(0);
		private final EnumLiteralDeclaration cOC_LN_5EnumLiteralDeclaration_28 = (EnumLiteralDeclaration)cAlternatives.eContents().get(28);
		private final Keyword cOC_LN_5OC_LN_5Keyword_28_0 = (Keyword)cOC_LN_5EnumLiteralDeclaration_28.eContents().get(0);
		private final EnumLiteralDeclaration cIC_ST_0EnumLiteralDeclaration_29 = (EnumLiteralDeclaration)cAlternatives.eContents().get(29);
		private final Keyword cIC_ST_0IC_ST_0Keyword_29_0 = (Keyword)cIC_ST_0EnumLiteralDeclaration_29.eContents().get(0);
		private final EnumLiteralDeclaration cIC_ST_1EnumLiteralDeclaration_30 = (EnumLiteralDeclaration)cAlternatives.eContents().get(30);
		private final Keyword cIC_ST_1IC_ST_1Keyword_30_0 = (Keyword)cIC_ST_1EnumLiteralDeclaration_30.eContents().get(0);
		private final EnumLiteralDeclaration cIC_ST_2EnumLiteralDeclaration_31 = (EnumLiteralDeclaration)cAlternatives.eContents().get(31);
		private final Keyword cIC_ST_2IC_ST_2Keyword_31_0 = (Keyword)cIC_ST_2EnumLiteralDeclaration_31.eContents().get(0);
		private final EnumLiteralDeclaration cIC_ST_3EnumLiteralDeclaration_32 = (EnumLiteralDeclaration)cAlternatives.eContents().get(32);
		private final Keyword cIC_ST_3IC_ST_3Keyword_32_0 = (Keyword)cIC_ST_3EnumLiteralDeclaration_32.eContents().get(0);
		private final EnumLiteralDeclaration cIC_ST_4EnumLiteralDeclaration_33 = (EnumLiteralDeclaration)cAlternatives.eContents().get(33);
		private final Keyword cIC_ST_4IC_ST_4Keyword_33_0 = (Keyword)cIC_ST_4EnumLiteralDeclaration_33.eContents().get(0);
		private final EnumLiteralDeclaration cIC_LN_0EnumLiteralDeclaration_34 = (EnumLiteralDeclaration)cAlternatives.eContents().get(34);
		private final Keyword cIC_LN_0IC_LN_0Keyword_34_0 = (Keyword)cIC_LN_0EnumLiteralDeclaration_34.eContents().get(0);
		private final EnumLiteralDeclaration cIC_LN_1EnumLiteralDeclaration_35 = (EnumLiteralDeclaration)cAlternatives.eContents().get(35);
		private final Keyword cIC_LN_1IC_LN_1Keyword_35_0 = (Keyword)cIC_LN_1EnumLiteralDeclaration_35.eContents().get(0);
		private final EnumLiteralDeclaration cIC_LN_2EnumLiteralDeclaration_36 = (EnumLiteralDeclaration)cAlternatives.eContents().get(36);
		private final Keyword cIC_LN_2IC_LN_2Keyword_36_0 = (Keyword)cIC_LN_2EnumLiteralDeclaration_36.eContents().get(0);
		private final EnumLiteralDeclaration cIC_LN_3EnumLiteralDeclaration_37 = (EnumLiteralDeclaration)cAlternatives.eContents().get(37);
		private final Keyword cIC_LN_3IC_LN_3Keyword_37_0 = (Keyword)cIC_LN_3EnumLiteralDeclaration_37.eContents().get(0);
		private final EnumLiteralDeclaration cIC_LN_4EnumLiteralDeclaration_38 = (EnumLiteralDeclaration)cAlternatives.eContents().get(38);
		private final Keyword cIC_LN_4IC_LN_4Keyword_38_0 = (Keyword)cIC_LN_4EnumLiteralDeclaration_38.eContents().get(0);
		private final EnumLiteralDeclaration cIC_LN_5EnumLiteralDeclaration_39 = (EnumLiteralDeclaration)cAlternatives.eContents().get(39);
		private final Keyword cIC_LN_5IC_LN_5Keyword_39_0 = (Keyword)cIC_LN_5EnumLiteralDeclaration_39.eContents().get(0);
		private final EnumLiteralDeclaration cOC_JCT_0EnumLiteralDeclaration_40 = (EnumLiteralDeclaration)cAlternatives.eContents().get(40);
		private final Keyword cOC_JCT_0OC_JCT_0Keyword_40_0 = (Keyword)cOC_JCT_0EnumLiteralDeclaration_40.eContents().get(0);
		private final EnumLiteralDeclaration cIC_JCT_0EnumLiteralDeclaration_41 = (EnumLiteralDeclaration)cAlternatives.eContents().get(41);
		private final Keyword cIC_JCT_0IC_JCT_0Keyword_41_0 = (Keyword)cIC_JCT_0EnumLiteralDeclaration_41.eContents().get(0);
		private final EnumLiteralDeclaration cOI_LN_0EnumLiteralDeclaration_42 = (EnumLiteralDeclaration)cAlternatives.eContents().get(42);
		private final Keyword cOI_LN_0OI_LN_0Keyword_42_0 = (Keyword)cOI_LN_0EnumLiteralDeclaration_42.eContents().get(0);
		private final EnumLiteralDeclaration cOI_LN_1EnumLiteralDeclaration_43 = (EnumLiteralDeclaration)cAlternatives.eContents().get(43);
		private final Keyword cOI_LN_1OI_LN_1Keyword_43_0 = (Keyword)cOI_LN_1EnumLiteralDeclaration_43.eContents().get(0);
		private final EnumLiteralDeclaration cOI_LN_2EnumLiteralDeclaration_44 = (EnumLiteralDeclaration)cAlternatives.eContents().get(44);
		private final Keyword cOI_LN_2OI_LN_2Keyword_44_0 = (Keyword)cOI_LN_2EnumLiteralDeclaration_44.eContents().get(0);
		private final EnumLiteralDeclaration cIO_LN_0EnumLiteralDeclaration_45 = (EnumLiteralDeclaration)cAlternatives.eContents().get(45);
		private final Keyword cIO_LN_0IO_LN_0Keyword_45_0 = (Keyword)cIO_LN_0EnumLiteralDeclaration_45.eContents().get(0);
		private final EnumLiteralDeclaration cIO_LN_1EnumLiteralDeclaration_46 = (EnumLiteralDeclaration)cAlternatives.eContents().get(46);
		private final Keyword cIO_LN_1IO_LN_1Keyword_46_0 = (Keyword)cIO_LN_1EnumLiteralDeclaration_46.eContents().get(0);
		private final EnumLiteralDeclaration cIO_LN_2EnumLiteralDeclaration_47 = (EnumLiteralDeclaration)cAlternatives.eContents().get(47);
		private final Keyword cIO_LN_2IO_LN_2Keyword_47_0 = (Keyword)cIO_LN_2EnumLiteralDeclaration_47.eContents().get(0);
		
		//enum RailSegment:
		//	KH_ST_0 | KH_ST_1 | KH_ST_2 | KH_ST_3 | KH_ST_4 | KH_ST_5 | KH_ST_6 |
		//	KH_LN_0 | KH_LN_1 | KH_LN_2 | KH_LN_3 | KH_LN_4 | KH_LN_5 | KH_LN_6 | KH_LN_7 | KH_LN_8 |
		//	KIO_LN_0 | KIO_LN_1 | OC_ST_0 | OC_ST_1 | OC_ST_2 | OC_ST_3 | OC_ST_4 |
		//	OC_LN_0 | OC_LN_1 | OC_LN_2 | OC_LN_3 | OC_LN_4 | OC_LN_5 |
		//	IC_ST_0 | IC_ST_1 | IC_ST_2 | IC_ST_3 | IC_ST_4 |
		//	IC_LN_0 | IC_LN_1 | IC_LN_2 | IC_LN_3 | IC_LN_4 | IC_LN_5 |
		//	OC_JCT_0 | IC_JCT_0 | OI_LN_0 | OI_LN_1 | OI_LN_2 |
		//	IO_LN_0 | IO_LN_1 | IO_LN_2;
		public EnumRule getRule() { return rule; }
		
		//KH_ST_0 | KH_ST_1 | KH_ST_2 | KH_ST_3 | KH_ST_4 | KH_ST_5 | KH_ST_6 | KH_LN_0 | KH_LN_1 | KH_LN_2 | KH_LN_3 | KH_LN_4 |
		//KH_LN_5 | KH_LN_6 | KH_LN_7 | KH_LN_8 | KIO_LN_0 | KIO_LN_1 | OC_ST_0 | OC_ST_1 | OC_ST_2 | OC_ST_3 | OC_ST_4 | OC_LN_0
		//| OC_LN_1 | OC_LN_2 | OC_LN_3 | OC_LN_4 | OC_LN_5 | IC_ST_0 | IC_ST_1 | IC_ST_2 | IC_ST_3 | IC_ST_4 | IC_LN_0 | IC_LN_1
		//| IC_LN_2 | IC_LN_3 | IC_LN_4 | IC_LN_5 | OC_JCT_0 | IC_JCT_0 | OI_LN_0 | OI_LN_1 | OI_LN_2 | IO_LN_0 | IO_LN_1 |
		//IO_LN_2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KH_ST_0
		public EnumLiteralDeclaration getKH_ST_0EnumLiteralDeclaration_0() { return cKH_ST_0EnumLiteralDeclaration_0; }
		
		//"KH_ST_0"
		public Keyword getKH_ST_0KH_ST_0Keyword_0_0() { return cKH_ST_0KH_ST_0Keyword_0_0; }
		
		//KH_ST_1
		public EnumLiteralDeclaration getKH_ST_1EnumLiteralDeclaration_1() { return cKH_ST_1EnumLiteralDeclaration_1; }
		
		//"KH_ST_1"
		public Keyword getKH_ST_1KH_ST_1Keyword_1_0() { return cKH_ST_1KH_ST_1Keyword_1_0; }
		
		//KH_ST_2
		public EnumLiteralDeclaration getKH_ST_2EnumLiteralDeclaration_2() { return cKH_ST_2EnumLiteralDeclaration_2; }
		
		//"KH_ST_2"
		public Keyword getKH_ST_2KH_ST_2Keyword_2_0() { return cKH_ST_2KH_ST_2Keyword_2_0; }
		
		//KH_ST_3
		public EnumLiteralDeclaration getKH_ST_3EnumLiteralDeclaration_3() { return cKH_ST_3EnumLiteralDeclaration_3; }
		
		//"KH_ST_3"
		public Keyword getKH_ST_3KH_ST_3Keyword_3_0() { return cKH_ST_3KH_ST_3Keyword_3_0; }
		
		//KH_ST_4
		public EnumLiteralDeclaration getKH_ST_4EnumLiteralDeclaration_4() { return cKH_ST_4EnumLiteralDeclaration_4; }
		
		//"KH_ST_4"
		public Keyword getKH_ST_4KH_ST_4Keyword_4_0() { return cKH_ST_4KH_ST_4Keyword_4_0; }
		
		//KH_ST_5
		public EnumLiteralDeclaration getKH_ST_5EnumLiteralDeclaration_5() { return cKH_ST_5EnumLiteralDeclaration_5; }
		
		//"KH_ST_5"
		public Keyword getKH_ST_5KH_ST_5Keyword_5_0() { return cKH_ST_5KH_ST_5Keyword_5_0; }
		
		//KH_ST_6
		public EnumLiteralDeclaration getKH_ST_6EnumLiteralDeclaration_6() { return cKH_ST_6EnumLiteralDeclaration_6; }
		
		//"KH_ST_6"
		public Keyword getKH_ST_6KH_ST_6Keyword_6_0() { return cKH_ST_6KH_ST_6Keyword_6_0; }
		
		//KH_LN_0
		public EnumLiteralDeclaration getKH_LN_0EnumLiteralDeclaration_7() { return cKH_LN_0EnumLiteralDeclaration_7; }
		
		//"KH_LN_0"
		public Keyword getKH_LN_0KH_LN_0Keyword_7_0() { return cKH_LN_0KH_LN_0Keyword_7_0; }
		
		//KH_LN_1
		public EnumLiteralDeclaration getKH_LN_1EnumLiteralDeclaration_8() { return cKH_LN_1EnumLiteralDeclaration_8; }
		
		//"KH_LN_1"
		public Keyword getKH_LN_1KH_LN_1Keyword_8_0() { return cKH_LN_1KH_LN_1Keyword_8_0; }
		
		//KH_LN_2
		public EnumLiteralDeclaration getKH_LN_2EnumLiteralDeclaration_9() { return cKH_LN_2EnumLiteralDeclaration_9; }
		
		//"KH_LN_2"
		public Keyword getKH_LN_2KH_LN_2Keyword_9_0() { return cKH_LN_2KH_LN_2Keyword_9_0; }
		
		//KH_LN_3
		public EnumLiteralDeclaration getKH_LN_3EnumLiteralDeclaration_10() { return cKH_LN_3EnumLiteralDeclaration_10; }
		
		//"KH_LN_3"
		public Keyword getKH_LN_3KH_LN_3Keyword_10_0() { return cKH_LN_3KH_LN_3Keyword_10_0; }
		
		//KH_LN_4
		public EnumLiteralDeclaration getKH_LN_4EnumLiteralDeclaration_11() { return cKH_LN_4EnumLiteralDeclaration_11; }
		
		//"KH_LN_4"
		public Keyword getKH_LN_4KH_LN_4Keyword_11_0() { return cKH_LN_4KH_LN_4Keyword_11_0; }
		
		//KH_LN_5
		public EnumLiteralDeclaration getKH_LN_5EnumLiteralDeclaration_12() { return cKH_LN_5EnumLiteralDeclaration_12; }
		
		//"KH_LN_5"
		public Keyword getKH_LN_5KH_LN_5Keyword_12_0() { return cKH_LN_5KH_LN_5Keyword_12_0; }
		
		//KH_LN_6
		public EnumLiteralDeclaration getKH_LN_6EnumLiteralDeclaration_13() { return cKH_LN_6EnumLiteralDeclaration_13; }
		
		//"KH_LN_6"
		public Keyword getKH_LN_6KH_LN_6Keyword_13_0() { return cKH_LN_6KH_LN_6Keyword_13_0; }
		
		//KH_LN_7
		public EnumLiteralDeclaration getKH_LN_7EnumLiteralDeclaration_14() { return cKH_LN_7EnumLiteralDeclaration_14; }
		
		//"KH_LN_7"
		public Keyword getKH_LN_7KH_LN_7Keyword_14_0() { return cKH_LN_7KH_LN_7Keyword_14_0; }
		
		//KH_LN_8
		public EnumLiteralDeclaration getKH_LN_8EnumLiteralDeclaration_15() { return cKH_LN_8EnumLiteralDeclaration_15; }
		
		//"KH_LN_8"
		public Keyword getKH_LN_8KH_LN_8Keyword_15_0() { return cKH_LN_8KH_LN_8Keyword_15_0; }
		
		//KIO_LN_0
		public EnumLiteralDeclaration getKIO_LN_0EnumLiteralDeclaration_16() { return cKIO_LN_0EnumLiteralDeclaration_16; }
		
		//"KIO_LN_0"
		public Keyword getKIO_LN_0KIO_LN_0Keyword_16_0() { return cKIO_LN_0KIO_LN_0Keyword_16_0; }
		
		//KIO_LN_1
		public EnumLiteralDeclaration getKIO_LN_1EnumLiteralDeclaration_17() { return cKIO_LN_1EnumLiteralDeclaration_17; }
		
		//"KIO_LN_1"
		public Keyword getKIO_LN_1KIO_LN_1Keyword_17_0() { return cKIO_LN_1KIO_LN_1Keyword_17_0; }
		
		//OC_ST_0
		public EnumLiteralDeclaration getOC_ST_0EnumLiteralDeclaration_18() { return cOC_ST_0EnumLiteralDeclaration_18; }
		
		//"OC_ST_0"
		public Keyword getOC_ST_0OC_ST_0Keyword_18_0() { return cOC_ST_0OC_ST_0Keyword_18_0; }
		
		//OC_ST_1
		public EnumLiteralDeclaration getOC_ST_1EnumLiteralDeclaration_19() { return cOC_ST_1EnumLiteralDeclaration_19; }
		
		//"OC_ST_1"
		public Keyword getOC_ST_1OC_ST_1Keyword_19_0() { return cOC_ST_1OC_ST_1Keyword_19_0; }
		
		//OC_ST_2
		public EnumLiteralDeclaration getOC_ST_2EnumLiteralDeclaration_20() { return cOC_ST_2EnumLiteralDeclaration_20; }
		
		//"OC_ST_2"
		public Keyword getOC_ST_2OC_ST_2Keyword_20_0() { return cOC_ST_2OC_ST_2Keyword_20_0; }
		
		//OC_ST_3
		public EnumLiteralDeclaration getOC_ST_3EnumLiteralDeclaration_21() { return cOC_ST_3EnumLiteralDeclaration_21; }
		
		//"OC_ST_3"
		public Keyword getOC_ST_3OC_ST_3Keyword_21_0() { return cOC_ST_3OC_ST_3Keyword_21_0; }
		
		//OC_ST_4
		public EnumLiteralDeclaration getOC_ST_4EnumLiteralDeclaration_22() { return cOC_ST_4EnumLiteralDeclaration_22; }
		
		//"OC_ST_4"
		public Keyword getOC_ST_4OC_ST_4Keyword_22_0() { return cOC_ST_4OC_ST_4Keyword_22_0; }
		
		//OC_LN_0
		public EnumLiteralDeclaration getOC_LN_0EnumLiteralDeclaration_23() { return cOC_LN_0EnumLiteralDeclaration_23; }
		
		//"OC_LN_0"
		public Keyword getOC_LN_0OC_LN_0Keyword_23_0() { return cOC_LN_0OC_LN_0Keyword_23_0; }
		
		//OC_LN_1
		public EnumLiteralDeclaration getOC_LN_1EnumLiteralDeclaration_24() { return cOC_LN_1EnumLiteralDeclaration_24; }
		
		//"OC_LN_1"
		public Keyword getOC_LN_1OC_LN_1Keyword_24_0() { return cOC_LN_1OC_LN_1Keyword_24_0; }
		
		//OC_LN_2
		public EnumLiteralDeclaration getOC_LN_2EnumLiteralDeclaration_25() { return cOC_LN_2EnumLiteralDeclaration_25; }
		
		//"OC_LN_2"
		public Keyword getOC_LN_2OC_LN_2Keyword_25_0() { return cOC_LN_2OC_LN_2Keyword_25_0; }
		
		//OC_LN_3
		public EnumLiteralDeclaration getOC_LN_3EnumLiteralDeclaration_26() { return cOC_LN_3EnumLiteralDeclaration_26; }
		
		//"OC_LN_3"
		public Keyword getOC_LN_3OC_LN_3Keyword_26_0() { return cOC_LN_3OC_LN_3Keyword_26_0; }
		
		//OC_LN_4
		public EnumLiteralDeclaration getOC_LN_4EnumLiteralDeclaration_27() { return cOC_LN_4EnumLiteralDeclaration_27; }
		
		//"OC_LN_4"
		public Keyword getOC_LN_4OC_LN_4Keyword_27_0() { return cOC_LN_4OC_LN_4Keyword_27_0; }
		
		//OC_LN_5
		public EnumLiteralDeclaration getOC_LN_5EnumLiteralDeclaration_28() { return cOC_LN_5EnumLiteralDeclaration_28; }
		
		//"OC_LN_5"
		public Keyword getOC_LN_5OC_LN_5Keyword_28_0() { return cOC_LN_5OC_LN_5Keyword_28_0; }
		
		//IC_ST_0
		public EnumLiteralDeclaration getIC_ST_0EnumLiteralDeclaration_29() { return cIC_ST_0EnumLiteralDeclaration_29; }
		
		//"IC_ST_0"
		public Keyword getIC_ST_0IC_ST_0Keyword_29_0() { return cIC_ST_0IC_ST_0Keyword_29_0; }
		
		//IC_ST_1
		public EnumLiteralDeclaration getIC_ST_1EnumLiteralDeclaration_30() { return cIC_ST_1EnumLiteralDeclaration_30; }
		
		//"IC_ST_1"
		public Keyword getIC_ST_1IC_ST_1Keyword_30_0() { return cIC_ST_1IC_ST_1Keyword_30_0; }
		
		//IC_ST_2
		public EnumLiteralDeclaration getIC_ST_2EnumLiteralDeclaration_31() { return cIC_ST_2EnumLiteralDeclaration_31; }
		
		//"IC_ST_2"
		public Keyword getIC_ST_2IC_ST_2Keyword_31_0() { return cIC_ST_2IC_ST_2Keyword_31_0; }
		
		//IC_ST_3
		public EnumLiteralDeclaration getIC_ST_3EnumLiteralDeclaration_32() { return cIC_ST_3EnumLiteralDeclaration_32; }
		
		//"IC_ST_3"
		public Keyword getIC_ST_3IC_ST_3Keyword_32_0() { return cIC_ST_3IC_ST_3Keyword_32_0; }
		
		//IC_ST_4
		public EnumLiteralDeclaration getIC_ST_4EnumLiteralDeclaration_33() { return cIC_ST_4EnumLiteralDeclaration_33; }
		
		//"IC_ST_4"
		public Keyword getIC_ST_4IC_ST_4Keyword_33_0() { return cIC_ST_4IC_ST_4Keyword_33_0; }
		
		//IC_LN_0
		public EnumLiteralDeclaration getIC_LN_0EnumLiteralDeclaration_34() { return cIC_LN_0EnumLiteralDeclaration_34; }
		
		//"IC_LN_0"
		public Keyword getIC_LN_0IC_LN_0Keyword_34_0() { return cIC_LN_0IC_LN_0Keyword_34_0; }
		
		//IC_LN_1
		public EnumLiteralDeclaration getIC_LN_1EnumLiteralDeclaration_35() { return cIC_LN_1EnumLiteralDeclaration_35; }
		
		//"IC_LN_1"
		public Keyword getIC_LN_1IC_LN_1Keyword_35_0() { return cIC_LN_1IC_LN_1Keyword_35_0; }
		
		//IC_LN_2
		public EnumLiteralDeclaration getIC_LN_2EnumLiteralDeclaration_36() { return cIC_LN_2EnumLiteralDeclaration_36; }
		
		//"IC_LN_2"
		public Keyword getIC_LN_2IC_LN_2Keyword_36_0() { return cIC_LN_2IC_LN_2Keyword_36_0; }
		
		//IC_LN_3
		public EnumLiteralDeclaration getIC_LN_3EnumLiteralDeclaration_37() { return cIC_LN_3EnumLiteralDeclaration_37; }
		
		//"IC_LN_3"
		public Keyword getIC_LN_3IC_LN_3Keyword_37_0() { return cIC_LN_3IC_LN_3Keyword_37_0; }
		
		//IC_LN_4
		public EnumLiteralDeclaration getIC_LN_4EnumLiteralDeclaration_38() { return cIC_LN_4EnumLiteralDeclaration_38; }
		
		//"IC_LN_4"
		public Keyword getIC_LN_4IC_LN_4Keyword_38_0() { return cIC_LN_4IC_LN_4Keyword_38_0; }
		
		//IC_LN_5
		public EnumLiteralDeclaration getIC_LN_5EnumLiteralDeclaration_39() { return cIC_LN_5EnumLiteralDeclaration_39; }
		
		//"IC_LN_5"
		public Keyword getIC_LN_5IC_LN_5Keyword_39_0() { return cIC_LN_5IC_LN_5Keyword_39_0; }
		
		//OC_JCT_0
		public EnumLiteralDeclaration getOC_JCT_0EnumLiteralDeclaration_40() { return cOC_JCT_0EnumLiteralDeclaration_40; }
		
		//"OC_JCT_0"
		public Keyword getOC_JCT_0OC_JCT_0Keyword_40_0() { return cOC_JCT_0OC_JCT_0Keyword_40_0; }
		
		//IC_JCT_0
		public EnumLiteralDeclaration getIC_JCT_0EnumLiteralDeclaration_41() { return cIC_JCT_0EnumLiteralDeclaration_41; }
		
		//"IC_JCT_0"
		public Keyword getIC_JCT_0IC_JCT_0Keyword_41_0() { return cIC_JCT_0IC_JCT_0Keyword_41_0; }
		
		//OI_LN_0
		public EnumLiteralDeclaration getOI_LN_0EnumLiteralDeclaration_42() { return cOI_LN_0EnumLiteralDeclaration_42; }
		
		//"OI_LN_0"
		public Keyword getOI_LN_0OI_LN_0Keyword_42_0() { return cOI_LN_0OI_LN_0Keyword_42_0; }
		
		//OI_LN_1
		public EnumLiteralDeclaration getOI_LN_1EnumLiteralDeclaration_43() { return cOI_LN_1EnumLiteralDeclaration_43; }
		
		//"OI_LN_1"
		public Keyword getOI_LN_1OI_LN_1Keyword_43_0() { return cOI_LN_1OI_LN_1Keyword_43_0; }
		
		//OI_LN_2
		public EnumLiteralDeclaration getOI_LN_2EnumLiteralDeclaration_44() { return cOI_LN_2EnumLiteralDeclaration_44; }
		
		//"OI_LN_2"
		public Keyword getOI_LN_2OI_LN_2Keyword_44_0() { return cOI_LN_2OI_LN_2Keyword_44_0; }
		
		//IO_LN_0
		public EnumLiteralDeclaration getIO_LN_0EnumLiteralDeclaration_45() { return cIO_LN_0EnumLiteralDeclaration_45; }
		
		//"IO_LN_0"
		public Keyword getIO_LN_0IO_LN_0Keyword_45_0() { return cIO_LN_0IO_LN_0Keyword_45_0; }
		
		//IO_LN_1
		public EnumLiteralDeclaration getIO_LN_1EnumLiteralDeclaration_46() { return cIO_LN_1EnumLiteralDeclaration_46; }
		
		//"IO_LN_1"
		public Keyword getIO_LN_1IO_LN_1Keyword_46_0() { return cIO_LN_1IO_LN_1Keyword_46_0; }
		
		//IO_LN_2
		public EnumLiteralDeclaration getIO_LN_2EnumLiteralDeclaration_47() { return cIO_LN_2EnumLiteralDeclaration_47; }
		
		//"IO_LN_2"
		public Keyword getIO_LN_2IO_LN_2Keyword_47_0() { return cIO_LN_2IO_LN_2Keyword_47_0; }
	}
	
	private final RailProgramElements pRailProgram;
	private final BlockElements pBlock;
	private final BlockEndElements eBlockEnd;
	private final StatementElements pStatement;
	private final SetStatementElements pSetStatement;
	private final TrackStatementElements pTrackStatement;
	private final TrackSpeedStopElements eTrackSpeedStop;
	private final TrackSpeedDriveElements eTrackSpeedDrive;
	private final PointStatementElements pPointStatement;
	private final PointOrinetationElements ePointOrinetation;
	private final WaitStatementElements pWaitStatement;
	private final TimeWaitStatementElements pTimeWaitStatement;
	private final ContactWaitStatementElements pContactWaitStatement;
	private final ContactEventElements eContactEvent;
	private final ContactPositionElements eContactPosition;
	private final OpStatementElements pOpStatement;
	private final CrossingStatementElements pCrossingStatement;
	private final CrossingModeElements eCrossingMode;
	private final LightStatementElements pLightStatement;
	private final LightModeElements eLightMode;
	private final ConditionalStatementElements pConditionalStatement;
	private final ConditionalLineElements pConditionalLine;
	private final ParallelStatementElements pParallelStatement;
	private final RailSegmentElements eRailSegment;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RailSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRailProgram = new RailProgramElements();
		this.pBlock = new BlockElements();
		this.eBlockEnd = new BlockEndElements();
		this.pStatement = new StatementElements();
		this.pSetStatement = new SetStatementElements();
		this.pTrackStatement = new TrackStatementElements();
		this.eTrackSpeedStop = new TrackSpeedStopElements();
		this.eTrackSpeedDrive = new TrackSpeedDriveElements();
		this.pPointStatement = new PointStatementElements();
		this.ePointOrinetation = new PointOrinetationElements();
		this.pWaitStatement = new WaitStatementElements();
		this.pTimeWaitStatement = new TimeWaitStatementElements();
		this.pContactWaitStatement = new ContactWaitStatementElements();
		this.eContactEvent = new ContactEventElements();
		this.eContactPosition = new ContactPositionElements();
		this.pOpStatement = new OpStatementElements();
		this.pCrossingStatement = new CrossingStatementElements();
		this.eCrossingMode = new CrossingModeElements();
		this.pLightStatement = new LightStatementElements();
		this.eLightMode = new LightModeElements();
		this.pConditionalStatement = new ConditionalStatementElements();
		this.pConditionalLine = new ConditionalLineElements();
		this.pParallelStatement = new ParallelStatementElements();
		this.eRailSegment = new RailSegmentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.railsl.RailSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RailProgram:
	//	block=Block;
	public RailProgramElements getRailProgramAccess() {
		return pRailProgram;
	}
	
	public ParserRule getRailProgramRule() {
		return getRailProgramAccess().getRule();
	}
	
	//Block:
	//	('Start:' | 'start:') statements+=Statement+
	//	end=BlockEnd;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//enum BlockEnd:
	//	END='End.' | END='end.' |
	//	LOOP='Loop.' | LOOP='loop.';
	public BlockEndElements getBlockEndAccess() {
		return eBlockEnd;
	}
	
	public EnumRule getBlockEndRule() {
		return getBlockEndAccess().getRule();
	}
	
	//Statement:
	//	SetStatement | WaitStatement | OpStatement | ConditionalStatement | ParallelStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//SetStatement:
	//	TrackStatement | PointStatement;
	public SetStatementElements getSetStatementAccess() {
		return pSetStatement;
	}
	
	public ParserRule getSetStatementRule() {
		return getSetStatementAccess().getRule();
	}
	
	//TrackStatement:
	//	('Set' | 'set') 'track'
	//	segments+=RailSegment ((',' | 'and' | ',' 'and') segments+=RailSegment)*
	//	'to' (speed=TrackSpeedStop | speed=TrackSpeedDrive reverse?='reverse'?) '.';
	public TrackStatementElements getTrackStatementAccess() {
		return pTrackStatement;
	}
	
	public ParserRule getTrackStatementRule() {
		return getTrackStatementAccess().getRule();
	}
	
	//enum TrackSpeedStop returns TrackSpeed:
	//	STOP='stop';
	public TrackSpeedStopElements getTrackSpeedStopAccess() {
		return eTrackSpeedStop;
	}
	
	public EnumRule getTrackSpeedStopRule() {
		return getTrackSpeedStopAccess().getRule();
	}
	
	//enum TrackSpeedDrive returns TrackSpeed:
	//	FULL='full' | SLOW='slow';
	public TrackSpeedDriveElements getTrackSpeedDriveAccess() {
		return eTrackSpeedDrive;
	}
	
	public EnumRule getTrackSpeedDriveRule() {
		return getTrackSpeedDriveAccess().getRule();
	}
	
	//PointStatement:
	//	('Set' | 'set') 'point'
	//	points+=INT ((',' | 'and' | ',' 'and') points+=INT)*
	//	'to' orientation=PointOrinetation '.';
	public PointStatementElements getPointStatementAccess() {
		return pPointStatement;
	}
	
	public ParserRule getPointStatementRule() {
		return getPointStatementAccess().getRule();
	}
	
	//enum PointOrinetation:
	//	STRAIGHT='straight' | BRANCH='branch';
	public PointOrinetationElements getPointOrinetationAccess() {
		return ePointOrinetation;
	}
	
	public EnumRule getPointOrinetationRule() {
		return getPointOrinetationAccess().getRule();
	}
	
	//WaitStatement:
	//	TimeWaitStatement | ContactWaitStatement;
	public WaitStatementElements getWaitStatementAccess() {
		return pWaitStatement;
	}
	
	public ParserRule getWaitStatementRule() {
		return getWaitStatementAccess().getRule();
	}
	
	//TimeWaitStatement:
	//	('Wait' | 'wait') 'for'
	//	time=INT
	//	'seconds.';
	public TimeWaitStatementElements getTimeWaitStatementAccess() {
		return pTimeWaitStatement;
	}
	
	public ParserRule getTimeWaitStatementRule() {
		return getTimeWaitStatementAccess().getRule();
	}
	
	//ContactWaitStatement:
	//	event=ContactEvent
	//	contact=ContactPosition
	//	'contact' 'of'?
	//	segment=RailSegment '.';
	public ContactWaitStatementElements getContactWaitStatementAccess() {
		return pContactWaitStatement;
	}
	
	public ParserRule getContactWaitStatementRule() {
		return getContactWaitStatementAccess().getRule();
	}
	
	//enum ContactEvent:
	//	REACH='Reach' | REACH='reach' |
	//	PASS='Pass' | PASS='pass';
	public ContactEventElements getContactEventAccess() {
		return eContactEvent;
	}
	
	public EnumRule getContactEventRule() {
		return getContactEventAccess().getRule();
	}
	
	//enum ContactPosition:
	//	FIRST='first' | SECOND='second';
	public ContactPositionElements getContactPositionAccess() {
		return eContactPosition;
	}
	
	public EnumRule getContactPositionRule() {
		return getContactPositionAccess().getRule();
	}
	
	//OpStatement:
	//	CrossingStatement | LightStatement;
	public OpStatementElements getOpStatementAccess() {
		return pOpStatement;
	}
	
	public ParserRule getOpStatementRule() {
		return getOpStatementAccess().getRule();
	}
	
	//CrossingStatement:
	//	mode=CrossingMode 'crossing.';
	public CrossingStatementElements getCrossingStatementAccess() {
		return pCrossingStatement;
	}
	
	public ParserRule getCrossingStatementRule() {
		return getCrossingStatementAccess().getRule();
	}
	
	//enum CrossingMode:
	//	OPEN='Open' | OPEN='open' |
	//	CLOSE='Close' | CLOSE='close';
	public CrossingModeElements getCrossingModeAccess() {
		return eCrossingMode;
	}
	
	public EnumRule getCrossingModeRule() {
		return getCrossingModeAccess().getRule();
	}
	
	//LightStatement:
	//	('Turn' | 'turn') 'light'
	//	lights+=INT ((',' | 'and' | ',' 'and') lights+=INT)*
	//	state=('on' | 'off')
	//	'.';
	public LightStatementElements getLightStatementAccess() {
		return pLightStatement;
	}
	
	public ParserRule getLightStatementRule() {
		return getLightStatementAccess().getRule();
	}
	
	//enum LightMode:
	//	ON='on' | OFF='off';
	public LightModeElements getLightModeAccess() {
		return eLightMode;
	}
	
	public EnumRule getLightModeRule() {
		return getLightModeAccess().getRule();
	}
	
	//ConditionalStatement:
	//	('Branch:' | 'branch:') lines+=ConditionalLine
	//	lines+=ConditionalLine+;
	public ConditionalStatementElements getConditionalStatementAccess() {
		return pConditionalStatement;
	}
	
	public ParserRule getConditionalStatementRule() {
		return getConditionalStatementAccess().getRule();
	}
	
	//ConditionalLine:
	//	('If' | 'if') contact=ContactPosition
	//	'contact' 'of' segment=RailSegment
	//	'is' 'reached' ('first' | 'first,') 'do' block=Block;
	public ConditionalLineElements getConditionalLineAccess() {
		return pConditionalLine;
	}
	
	public ParserRule getConditionalLineRule() {
		return getConditionalLineAccess().getRule();
	}
	
	//ParallelStatement:
	//	('Parallel:' | 'parallel:') blocks+=Block
	//	blocks+=Block+;
	public ParallelStatementElements getParallelStatementAccess() {
		return pParallelStatement;
	}
	
	public ParserRule getParallelStatementRule() {
		return getParallelStatementAccess().getRule();
	}
	
	//enum RailSegment:
	//	KH_ST_0 | KH_ST_1 | KH_ST_2 | KH_ST_3 | KH_ST_4 | KH_ST_5 | KH_ST_6 |
	//	KH_LN_0 | KH_LN_1 | KH_LN_2 | KH_LN_3 | KH_LN_4 | KH_LN_5 | KH_LN_6 | KH_LN_7 | KH_LN_8 |
	//	KIO_LN_0 | KIO_LN_1 | OC_ST_0 | OC_ST_1 | OC_ST_2 | OC_ST_3 | OC_ST_4 |
	//	OC_LN_0 | OC_LN_1 | OC_LN_2 | OC_LN_3 | OC_LN_4 | OC_LN_5 |
	//	IC_ST_0 | IC_ST_1 | IC_ST_2 | IC_ST_3 | IC_ST_4 |
	//	IC_LN_0 | IC_LN_1 | IC_LN_2 | IC_LN_3 | IC_LN_4 | IC_LN_5 |
	//	OC_JCT_0 | IC_JCT_0 | OI_LN_0 | OI_LN_1 | OI_LN_2 |
	//	IO_LN_0 | IO_LN_1 | IO_LN_2;
	public RailSegmentElements getRailSegmentAccess() {
		return eRailSegment;
	}
	
	public EnumRule getRailSegmentRule() {
		return getRailSegmentAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
