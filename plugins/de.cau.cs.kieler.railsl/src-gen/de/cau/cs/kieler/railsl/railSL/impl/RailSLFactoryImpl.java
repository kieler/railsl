/**
 * generated by Xtext 2.37.0
 */
package de.cau.cs.kieler.railsl.railSL.impl;

import de.cau.cs.kieler.railsl.railSL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RailSLFactoryImpl extends EFactoryImpl implements RailSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RailSLFactory init()
  {
    try
    {
      RailSLFactory theRailSLFactory = (RailSLFactory)EPackage.Registry.INSTANCE.getEFactory(RailSLPackage.eNS_URI);
      if (theRailSLFactory != null)
      {
        return theRailSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RailSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RailSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RailSLPackage.RAIL_PROGRAM: return createRailProgram();
      case RailSLPackage.BLOCK: return createBlock();
      case RailSLPackage.STATEMENT: return createStatement();
      case RailSLPackage.SET_STATEMENT: return createSetStatement();
      case RailSLPackage.TRACK_STATEMENT: return createTrackStatement();
      case RailSLPackage.POINT_STATEMENT: return createPointStatement();
      case RailSLPackage.WAIT_STATEMENT: return createWaitStatement();
      case RailSLPackage.TIME_WAIT_STATEMENT: return createTimeWaitStatement();
      case RailSLPackage.CONTACT_WAIT_STATEMENT: return createContactWaitStatement();
      case RailSLPackage.OP_STATEMENT: return createOpStatement();
      case RailSLPackage.CROSSING_STATEMENT: return createCrossingStatement();
      case RailSLPackage.LIGHT_STATEMENT: return createLightStatement();
      case RailSLPackage.CONDITIONAL_STATEMENT: return createConditionalStatement();
      case RailSLPackage.CONDITIONAL_LINE: return createConditionalLine();
      case RailSLPackage.PARALLEL_STATEMENT: return createParallelStatement();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case RailSLPackage.BLOCK_END:
        return createBlockEndFromString(eDataType, initialValue);
      case RailSLPackage.TRACK_SPEED:
        return createTrackSpeedFromString(eDataType, initialValue);
      case RailSLPackage.POINT_ORIENTATION:
        return createPointOrientationFromString(eDataType, initialValue);
      case RailSLPackage.CONTACT_EVENT:
        return createContactEventFromString(eDataType, initialValue);
      case RailSLPackage.CONTACT_POSITION:
        return createContactPositionFromString(eDataType, initialValue);
      case RailSLPackage.CROSSING_MODE:
        return createCrossingModeFromString(eDataType, initialValue);
      case RailSLPackage.LIGHT_MODE:
        return createLightModeFromString(eDataType, initialValue);
      case RailSLPackage.RAIL_SEGMENT:
        return createRailSegmentFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case RailSLPackage.BLOCK_END:
        return convertBlockEndToString(eDataType, instanceValue);
      case RailSLPackage.TRACK_SPEED:
        return convertTrackSpeedToString(eDataType, instanceValue);
      case RailSLPackage.POINT_ORIENTATION:
        return convertPointOrientationToString(eDataType, instanceValue);
      case RailSLPackage.CONTACT_EVENT:
        return convertContactEventToString(eDataType, instanceValue);
      case RailSLPackage.CONTACT_POSITION:
        return convertContactPositionToString(eDataType, instanceValue);
      case RailSLPackage.CROSSING_MODE:
        return convertCrossingModeToString(eDataType, instanceValue);
      case RailSLPackage.LIGHT_MODE:
        return convertLightModeToString(eDataType, instanceValue);
      case RailSLPackage.RAIL_SEGMENT:
        return convertRailSegmentToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RailProgram createRailProgram()
  {
    RailProgramImpl railProgram = new RailProgramImpl();
    return railProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetStatement createSetStatement()
  {
    SetStatementImpl setStatement = new SetStatementImpl();
    return setStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TrackStatement createTrackStatement()
  {
    TrackStatementImpl trackStatement = new TrackStatementImpl();
    return trackStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PointStatement createPointStatement()
  {
    PointStatementImpl pointStatement = new PointStatementImpl();
    return pointStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WaitStatement createWaitStatement()
  {
    WaitStatementImpl waitStatement = new WaitStatementImpl();
    return waitStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeWaitStatement createTimeWaitStatement()
  {
    TimeWaitStatementImpl timeWaitStatement = new TimeWaitStatementImpl();
    return timeWaitStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContactWaitStatement createContactWaitStatement()
  {
    ContactWaitStatementImpl contactWaitStatement = new ContactWaitStatementImpl();
    return contactWaitStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpStatement createOpStatement()
  {
    OpStatementImpl opStatement = new OpStatementImpl();
    return opStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CrossingStatement createCrossingStatement()
  {
    CrossingStatementImpl crossingStatement = new CrossingStatementImpl();
    return crossingStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LightStatement createLightStatement()
  {
    LightStatementImpl lightStatement = new LightStatementImpl();
    return lightStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalStatement createConditionalStatement()
  {
    ConditionalStatementImpl conditionalStatement = new ConditionalStatementImpl();
    return conditionalStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalLine createConditionalLine()
  {
    ConditionalLineImpl conditionalLine = new ConditionalLineImpl();
    return conditionalLine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParallelStatement createParallelStatement()
  {
    ParallelStatementImpl parallelStatement = new ParallelStatementImpl();
    return parallelStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BlockEnd createBlockEndFromString(EDataType eDataType, String initialValue)
  {
    BlockEnd result = BlockEnd.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBlockEndToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TrackSpeed createTrackSpeedFromString(EDataType eDataType, String initialValue)
  {
    TrackSpeed result = TrackSpeed.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTrackSpeedToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PointOrientation createPointOrientationFromString(EDataType eDataType, String initialValue)
  {
    PointOrientation result = PointOrientation.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPointOrientationToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContactEvent createContactEventFromString(EDataType eDataType, String initialValue)
  {
    ContactEvent result = ContactEvent.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertContactEventToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContactPosition createContactPositionFromString(EDataType eDataType, String initialValue)
  {
    ContactPosition result = ContactPosition.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertContactPositionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CrossingMode createCrossingModeFromString(EDataType eDataType, String initialValue)
  {
    CrossingMode result = CrossingMode.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCrossingModeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LightMode createLightModeFromString(EDataType eDataType, String initialValue)
  {
    LightMode result = LightMode.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLightModeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RailSegment createRailSegmentFromString(EDataType eDataType, String initialValue)
  {
    RailSegment result = RailSegment.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRailSegmentToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RailSLPackage getRailSLPackage()
  {
    return (RailSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RailSLPackage getPackage()
  {
    return RailSLPackage.eINSTANCE;
  }

} //RailSLFactoryImpl
