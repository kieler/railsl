/**
 * generated by Xtext 2.16.0
 */
package de.cau.cs.kieler.railsl.railSL;


/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Crossing Statement</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.railsl.railSL.CrossingStatement#getMode <em>Mode</em>}</li>
 * </ul>
 *
 * @see de.cau.cs.kieler.railsl.railSL.RailSLPackage#getCrossingStatement()
 * @model
 * @generated
 */
public interface CrossingStatement extends OpStatement
{
  /**
   * Returns the value of the '<em><b>Mode</b></em>' attribute.
   * The literals are from the enumeration {@link de.cau.cs.kieler.railsl.railSL.CrossingMode}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Mode</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Mode</em>' attribute.
   * @see de.cau.cs.kieler.railsl.railSL.CrossingMode
   * @see #setMode(CrossingMode)
   * @see de.cau.cs.kieler.railsl.railSL.RailSLPackage#getCrossingStatement_Mode()
   * @model
   * @generated
   */
  CrossingMode getMode();

  /**
   * Sets the value of the '{@link de.cau.cs.kieler.railsl.railSL.CrossingStatement#getMode <em>Mode</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Mode</em>' attribute.
   * @see de.cau.cs.kieler.railsl.railSL.CrossingMode
   * @see #getMode()
   * @generated
   */
  void setMode(CrossingMode value);

} // CrossingStatement
