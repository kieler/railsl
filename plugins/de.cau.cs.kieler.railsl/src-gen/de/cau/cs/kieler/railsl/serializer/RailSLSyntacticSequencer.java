/*
 * generated by Xtext 2.16.0
 */
package de.cau.cs.kieler.railsl.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.railsl.services.RailSLGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class RailSLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected RailSLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Block_StartKeyword_0_0_or_StartKeyword_0_1;
	protected AbstractElementAlias match_ConditionalLine_FirstKeyword_7_0_or_FirstKeyword_7_1;
	protected AbstractElementAlias match_ConditionalLine_IfKeyword_0_0_or_IfKeyword_0_1;
	protected AbstractElementAlias match_ConditionalLine_OfKeyword_3_q;
	protected AbstractElementAlias match_ConditionalStatement_BranchKeyword_0_0_or_BranchKeyword_0_1;
	protected AbstractElementAlias match_ContactWaitStatement_OfKeyword_3_q;
	protected AbstractElementAlias match_LightStatement_AndKeyword_3_0_1_or_CommaKeyword_3_0_0;
	protected AbstractElementAlias match_LightStatement_TurnKeyword_0_0_or_TurnKeyword_0_1;
	protected AbstractElementAlias match_ParallelStatement_ParallelKeyword_0_0_or_ParallelKeyword_0_1;
	protected AbstractElementAlias match_PointStatement_AndKeyword_3_0_1_or_CommaKeyword_3_0_0;
	protected AbstractElementAlias match_PointStatement_SetKeyword_0_0_or_SetKeyword_0_1;
	protected AbstractElementAlias match_TimeWaitStatement_WaitKeyword_0_0_or_WaitKeyword_0_1;
	protected AbstractElementAlias match_TrackStatement_AndKeyword_3_0_1_or_CommaKeyword_3_0_0;
	protected AbstractElementAlias match_TrackStatement_SetKeyword_0_0_or_SetKeyword_0_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (RailSLGrammarAccess) access;
		match_Block_StartKeyword_0_0_or_StartKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBlockAccess().getStartKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getBlockAccess().getStartKeyword_0_1()));
		match_ConditionalLine_FirstKeyword_7_0_or_FirstKeyword_7_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getConditionalLineAccess().getFirstKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getConditionalLineAccess().getFirstKeyword_7_1()));
		match_ConditionalLine_IfKeyword_0_0_or_IfKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getConditionalLineAccess().getIfKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getConditionalLineAccess().getIfKeyword_0_1()));
		match_ConditionalLine_OfKeyword_3_q = new TokenAlias(false, true, grammarAccess.getConditionalLineAccess().getOfKeyword_3());
		match_ConditionalStatement_BranchKeyword_0_0_or_BranchKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getConditionalStatementAccess().getBranchKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getConditionalStatementAccess().getBranchKeyword_0_1()));
		match_ContactWaitStatement_OfKeyword_3_q = new TokenAlias(false, true, grammarAccess.getContactWaitStatementAccess().getOfKeyword_3());
		match_LightStatement_AndKeyword_3_0_1_or_CommaKeyword_3_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLightStatementAccess().getAndKeyword_3_0_1()), new TokenAlias(false, false, grammarAccess.getLightStatementAccess().getCommaKeyword_3_0_0()));
		match_LightStatement_TurnKeyword_0_0_or_TurnKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLightStatementAccess().getTurnKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getLightStatementAccess().getTurnKeyword_0_1()));
		match_ParallelStatement_ParallelKeyword_0_0_or_ParallelKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getParallelStatementAccess().getParallelKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getParallelStatementAccess().getParallelKeyword_0_1()));
		match_PointStatement_AndKeyword_3_0_1_or_CommaKeyword_3_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPointStatementAccess().getAndKeyword_3_0_1()), new TokenAlias(false, false, grammarAccess.getPointStatementAccess().getCommaKeyword_3_0_0()));
		match_PointStatement_SetKeyword_0_0_or_SetKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPointStatementAccess().getSetKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getPointStatementAccess().getSetKeyword_0_1()));
		match_TimeWaitStatement_WaitKeyword_0_0_or_WaitKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTimeWaitStatementAccess().getWaitKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getTimeWaitStatementAccess().getWaitKeyword_0_1()));
		match_TrackStatement_AndKeyword_3_0_1_or_CommaKeyword_3_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTrackStatementAccess().getAndKeyword_3_0_1()), new TokenAlias(false, false, grammarAccess.getTrackStatementAccess().getCommaKeyword_3_0_0()));
		match_TrackStatement_SetKeyword_0_0_or_SetKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTrackStatementAccess().getSetKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getTrackStatementAccess().getSetKeyword_0_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Block_StartKeyword_0_0_or_StartKeyword_0_1.equals(syntax))
				emit_Block_StartKeyword_0_0_or_StartKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConditionalLine_FirstKeyword_7_0_or_FirstKeyword_7_1.equals(syntax))
				emit_ConditionalLine_FirstKeyword_7_0_or_FirstKeyword_7_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConditionalLine_IfKeyword_0_0_or_IfKeyword_0_1.equals(syntax))
				emit_ConditionalLine_IfKeyword_0_0_or_IfKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConditionalLine_OfKeyword_3_q.equals(syntax))
				emit_ConditionalLine_OfKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConditionalStatement_BranchKeyword_0_0_or_BranchKeyword_0_1.equals(syntax))
				emit_ConditionalStatement_BranchKeyword_0_0_or_BranchKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ContactWaitStatement_OfKeyword_3_q.equals(syntax))
				emit_ContactWaitStatement_OfKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LightStatement_AndKeyword_3_0_1_or_CommaKeyword_3_0_0.equals(syntax))
				emit_LightStatement_AndKeyword_3_0_1_or_CommaKeyword_3_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LightStatement_TurnKeyword_0_0_or_TurnKeyword_0_1.equals(syntax))
				emit_LightStatement_TurnKeyword_0_0_or_TurnKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ParallelStatement_ParallelKeyword_0_0_or_ParallelKeyword_0_1.equals(syntax))
				emit_ParallelStatement_ParallelKeyword_0_0_or_ParallelKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PointStatement_AndKeyword_3_0_1_or_CommaKeyword_3_0_0.equals(syntax))
				emit_PointStatement_AndKeyword_3_0_1_or_CommaKeyword_3_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PointStatement_SetKeyword_0_0_or_SetKeyword_0_1.equals(syntax))
				emit_PointStatement_SetKeyword_0_0_or_SetKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TimeWaitStatement_WaitKeyword_0_0_or_WaitKeyword_0_1.equals(syntax))
				emit_TimeWaitStatement_WaitKeyword_0_0_or_WaitKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TrackStatement_AndKeyword_3_0_1_or_CommaKeyword_3_0_0.equals(syntax))
				emit_TrackStatement_AndKeyword_3_0_1_or_CommaKeyword_3_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TrackStatement_SetKeyword_0_0_or_SetKeyword_0_1.equals(syntax))
				emit_TrackStatement_SetKeyword_0_0_or_SetKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'Start:' | 'start:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) statements+=Statement
	 */
	protected void emit_Block_StartKeyword_0_0_or_StartKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'first' | 'first,'
	 *
	 * This ambiguous syntax occurs at:
	 *     segment=RailSegment 'is' 'reached' (ambiguity) 'do' block=Block
	 */
	protected void emit_ConditionalLine_FirstKeyword_7_0_or_FirstKeyword_7_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'If' | 'if'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) contact=ContactPosition
	 */
	protected void emit_ConditionalLine_IfKeyword_0_0_or_IfKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'of'?
	 *
	 * This ambiguous syntax occurs at:
	 *     contact=ContactPosition 'contact' (ambiguity) segment=RailSegment
	 */
	protected void emit_ConditionalLine_OfKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Branch:' | 'branch:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) lines+=ConditionalLine
	 */
	protected void emit_ConditionalStatement_BranchKeyword_0_0_or_BranchKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'of'?
	 *
	 * This ambiguous syntax occurs at:
	 *     contact=ContactPosition 'contact' (ambiguity) segment=RailSegment
	 */
	protected void emit_ContactWaitStatement_OfKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ',' | 'and'
	 *
	 * This ambiguous syntax occurs at:
	 *     lights+=INT (ambiguity) lights+=INT
	 */
	protected void emit_LightStatement_AndKeyword_3_0_1_or_CommaKeyword_3_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Turn' | 'turn'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'light' lights+=INT
	 */
	protected void emit_LightStatement_TurnKeyword_0_0_or_TurnKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Parallel:' | 'parallel:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) blocks+=Block
	 */
	protected void emit_ParallelStatement_ParallelKeyword_0_0_or_ParallelKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ',' | 'and'
	 *
	 * This ambiguous syntax occurs at:
	 *     points+=INT (ambiguity) points+=INT
	 */
	protected void emit_PointStatement_AndKeyword_3_0_1_or_CommaKeyword_3_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Set' | 'set'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'point' points+=INT
	 */
	protected void emit_PointStatement_SetKeyword_0_0_or_SetKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Wait' | 'wait'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'for' time=INT
	 */
	protected void emit_TimeWaitStatement_WaitKeyword_0_0_or_WaitKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ',' | 'and'
	 *
	 * This ambiguous syntax occurs at:
	 *     segments+=RailSegment (ambiguity) segments+=RailSegment
	 */
	protected void emit_TrackStatement_AndKeyword_3_0_1_or_CommaKeyword_3_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Set' | 'set'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'track' segments+=RailSegment
	 */
	protected void emit_TrackStatement_SetKeyword_0_0_or_SetKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
