/*
 * generated by Xtext 2.10.0
 */
package de.cau.cs.kieler.railsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.generator.IFileSystemAccess

/**
 * Main class for code generation of RailSL.
 * 
 * Will generate static code such as PROM snippets and C headers when the editor is saved. 
 * 
 * @author Philip Eumann (peu) - stu121235@mail.uni-kiel.de
 */
class RailSLGenerator extends AbstractGenerator {

    /**
     * Generates static code required by PROM.
     * This method is called by XText whenever the editor is saved.
     */
    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        generateHeaders(fsa)
        generateSnippets(fsa)
    }

    /*************************************************************************
     * S T A T I C   C O D E   G E N E R A T I O N ***************************
     *************************************************************************/

    /**
     * Generates all snippets required for a compilation via PROM.
     */
    def void generateSnippets(IFileSystemAccess fsa) {
        fsa.generateFile('../snippets/contacts.ftl', generateContactsSnippet())
        fsa.generateFile('../snippets/lights.ftl', generateLightsSnippet())
        fsa.generateFile('../snippets/points.ftl', generatePointsSnippet())
        fsa.generateFile('../snippets/signals.ftl', generateSignalsSnippet())
        fsa.generateFile('../snippets/tracks.ftl', generateTracksSnippet())
        fsa.generateFile('../snippets/second.ftl', generateSecondSnippet())
        fsa.generateFile('../snippets/crossing.ftl', generateCrossingSnippet())
        fsa.generateFile('../snippets/ControllerMain.ftl', generateMainSnippet())
    }

    /**
     * Generates the header files 'kicking.h' and 'railway.h'
     */
    def void generateHeaders(IFileSystemAccess fsa) {
        var railwayH = '//===========================================================================//
//==             R T S Y S   M O D E L   R A I L W A Y   A P I             ==//
//==                   R A I L W A Y   I N T E R F A C E                   ==//
//==                                                                       ==//
//==   by Nis Boerge Wechselberg, Christian-Albrechts-University Kiel       ==//
//==                                                                       ==//
//==   Artwork by:                                                         ==//
//==   by Christian Motika, SS 2014, Christian-Albrechts-University Kiel   ==//
//===========================================================================//
//==                                                                       ==//
//==                                     (@@@)     (@@@@@)                 ==//
//==                               (@@)     (@@@@@@@)        (@@@@@@@)     ==//
//==                         (@@@@@@@)   (@@@@@)       (@@@@@@@@@@@)       ==//
//==                    (@@@)     (@@@@@@@)   (@@@@@@)             (@@@)   ==//
//==               (@@@@@@)    (@@@@@@)                (@)                 ==//
//==           (@@@)  (@@@@)           (@@)                                ==//
//==        (@@)              (@@@)                                        ==//
//==       .-.                                                             ==//
//==       ] [    .-.      _    .-----.                                    ==//
//==     ."   """"   """""" """"| .--`                                     ==//
//==    (:--:--:--:--:--:--:--:-| [___    .------------------------.       ==//
//==     |     :  :  :  :  :  : [_9_] |\'=\'|.----------------------.|       ==//
//==    /|.___________________________|___|\'--.___.--.___.--.___.-\'|       ==//
//==   / ||_.--.______.--.______.--._ |---\\\'--\\-.-/==\\-.-/==\\-.-/-\'/--     ==//
//==  /__;^=(==)======(==)======(==)=^~^^^ ^^^^(-)^^^^(-)^^^^(-)^^^        ==//
//==  ~~~^~~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~~ ==//
//==                                                                       ==//
//===========================================================================//
#ifndef RAILWAY_H
#define RAILWAY_H

#include "addressing.h"
#include "railPi.h"

/* Kept for compatibility purpose */
struct railway_hardware {};

/* Main data structure that contains all information and control structures
   needed to operate the system. This structure will be used like a handle for
   all other functions. */
struct railway_system {
  portConfig_t        *addresses;
  railPi_connector_t  railPi[4];
};
typedef struct railway_system railway_system_t;

/* Initialize the control structure to communicate with a given railway system
   described by (hardware). */
struct railway_system *railway_initsystem(struct railway_hardware *hardware);

/* Open all nodelinks required to operate the system with one function
   call. (hostformat) is a printf format string that forms the common base for
   all hostnames. A single %i is allowed in this string and will be expanded
   to the node number (example: "node%02i.rtsys"). (device) is the name of the
   remote serial port. This function will return 0 on success, in case of a
   failure it will print an error message, return -1/errno and close all
   previously opened links. */
int railway_openlinks_udp(struct railway_system *railway, char *hostformat, char *device);

/* Start the system (and the control thread) after all nodelinks have been
   registered. The thread will try to keep the cycle execution time between
   mincycle and maxcycle microseconds. Both values may be set to zero, this
   will cause the thread to execute cycles as fast as possible and to use the
   nodelink\'s timeouts as an upper limit. Returns 0 on success and -1/errno on
   failure. */
int railway_startcontrol(struct railway_system *railway, unsigned mincycle, unsigned maxcycle);

/* Stop the system (and the control thread), send disconnect commands to all
   nodes and reset them if desired. Be careful with this option: if the the
   system stops uncontrolled, there might be trains standing on points. A
   reset (or restart) in this situation might force such trains off the
   track. Returns 0 on success and -1/errno on failure. */
int railway_stopcontrol(struct railway_system *railway, int reset);

/* Test if the system is alive. The system may shut itself down if there are
   too many communication errors. An application should poll this flag in
   regular intervals and react if the system is not alive any more. */
int railway_alive(struct railway_system *railway);

/* Close all nodelinks that are registered with the control system. The system
   must be stopped for this to work, all successfully closed nodelinks will be
   unregistered (set to NULL) in the linktable. Returns 0 on success and -1 on
   errors, errno is set by the last registered error. */
int railway_closelinks(struct railway_system *railway);

/* Destroy the control structure, free used memory. This function may only be
   called if the system is not running. Nodelinks are not closed, this must be
   done prior to this call by railway_closelinks or at any other time by the
   application itself. */
int railway_donesystem(struct railway_system *railway);


/* ---- high level peripheral access -------------------------------------- */

/* Query if a specific block signal exists */
int signalexists(struct railway_system *railway, int block, int signaln);

/* Set one or more signals to a given color combination.

     (lights)  bitwise or of the constants RED, YELLOW and GREEN
     (block)   is the number of the block containing the signal
     (signal)  the number inside the block (0=beginning, 1=end of the
               block regarding the main direction)

   A value of -1 for (block) and/or (signal) acts as a wildcard and makes it
   possible to set a group of signals with only one command. */
#define RED     4
#define YELLOW  2
#define GREEN   1
void setsignal(struct railway_system *railway, int block, int signaln, int lights);

/* Read the current color combination of a signal.

     (block)   is the number of the block containing the signal
     (signal)  the number inside the block (0=beginning, 1=end of the
               block regarding the main direction)

   A value of -1 for (block) and/or (signal) acts as a wildcard. The function
   will return the state of the first matching signal in this case. */
unsigned getsignal(struct railway_system *railway, int block, int signaln);

/* Set one or more traffic lights at a crossing.

     (signal)    signal number
     (lights)    bitwise or of the constants RED, YELLOW and GREEN

   A value of -1 for (signal) acts as a wildcard and makes it possible to set
   a group of traffic lights with only one command. */
void setgatesignal(struct railway_system *railway, int signaln, int lights);

/* Get the status one traffic light at a crossing.

     (signal)    signal number

   A value of -1 for (signal) acts as a wildcard. The function will return the
   state of the first matching traffic light in this case. */
unsigned getgatesignal(struct railway_system *railway, int signaln);

/* Query if a specific contact exists */
int contactexists(struct railway_system *railway, int block, int contact);

/* Read the status of one contact pair in the system.

   (block)    block  number containing the signal
   (contact)  contact number inside the block (0=beginning, 1=end of the
              block regarding the main direction)
   (clear)    a nonzero value will remove the contact event from the buffer
              after reading

   Return values are NONE, FWD, REV or UNI as described below.

     NONE - not triggered
     FWD  - a train has passed the contact while driving forward
     REV  - dito, but with reverse direction
     UNI  - triggered, but the direction could not be detected (caused by
            unidirectional sensors, reed contact failures and too long
      polling intervals, see below)

   It is possible to use a value of -1 for (block) and/or (contact), the
   function will scan all contacts for an event in this case and return the
   first match. It doesn\'t make much sense to do this with function getcontact
   because it cannot return the location of the contact. Use the otherwise
   identical scancontact for such cases, which will set the call by reference
   parameters to the contact location.

   The function getcontactref works mostly like getcontact, but it uses a user
   supplied reference to determine which events are new. This allows an
   alternate control flow to parse events that the main program has already
   processed and cleared. The reference must be initialized to zero and will
   be updated by any call to this function. The caller should be aware that
   the history of directions is only one level deep. Events that are older
   will be reported as UNI instead of FWD or REV. */
#define NONE   0
#define FWD    1
#define REV    2
#define UNI    3
unsigned getcontact(struct railway_system *railway, int block, int contact, int clear);

/* Remove all contact events from the buffer for a given contact pair. It is
   also possible to use -1 as a wildcard for (block) and (contact) to clear
   whole groups of contacts. */
void clearcontact(struct railway_system *railway, int block, int contact);

/* Sensors at the gates of crossings can detect if the gate is open or the
   boom is down, and they are used exactly like the reed contact
   sensors. Whenever the gate is completely closed, the sensor returns a FWD
   reading. If the boom leaves this position, the sensor reports REV. Keep in
   mind that the gate sensors are filtered like contacts and ignore events
   that happen too fast. So the gate must stay open or closed for a short
   period of time before new events can be detected. */
unsigned getgatesensor(struct railway_system *railway, int gatesensor, int clear);
void cleargatesensor(struct railway_system *railway, int gatesensor);

/* Set the state of one or more track drivers.
     (block)   block number of the track
     (mode)    driver mode, one of TOFF,TFWD,TREV,TBRAKE
     (target)  speed setting, bitwise or of one of the constants TPWM or
               TSPEED and a speed value between 0 and 127.
   A value of -1 for (block) acts as a wildcard and makes it possible to set
   all tracks with only one command. */
// #define OFF    0
// #define BRAKE  3
// #define PWM    0
// #define SPEED  128
void settrack(struct railway_system *railway, int track, unsigned mode, unsigned target);

/* Get the state of one track driver. A (block) value of -1 will return the
   state of the first matching track. */
void gettrack(struct railway_system *railway, int track, unsigned *mode, unsigned *target);

/* Set the state of one or more points.
   (point)   the point number
   (state)   new state, STRAIGHT (=0) or BRANCH (!=0)
   A value of -1 for (point) acts as a wildcard and makes it possible to set
   all points with only one command. */
#define STRAIGHT  1
#define BRANCH    0
void setpoint(struct railway_system *railway, int point, int state);

/* Get the state of one point. A (point) value of -1 will return the state of
   the first matching point. */
int getpoint(struct railway_system *railway, int point);

/* Set the state of one or more lights.

   (light)   the light number
   (state)   new state, OFF (=0) or ON (!=0)

   A value of -1 for (light) acts as a wildcard and makes it possible to set
   all lights with only one command. */
#define OFF       1
#define ON        0
void setlight(struct railway_system *railway, int light, int state);

/* Get the state of one light. A (light) value of -1 will return the state of
   the first matching light. */
int getlight(struct railway_system *railway, int light);

/* Set the state of one or more crossing gates.

   (gate)      gate number
   (state)     new state, UP (=0) or DOWN (!=0)

   A value of -1 (gate) acts as a wildcard and makes it possible to set a
   group of gates with only one command. */
#define UP    1
#define DOWN  0
void setgate(struct railway_system *railway, int gate, int state);

/* Get the state of one gate. A value of -1 for (gate) acts as a wildcard. The
   function will return the state of the first matching gate in this case. */
int getgate(stru
        return resultct railway_system *railway, int gate);

/* Set the state of one or more bells.

   (bell)      bell number
   (state)     new state, OFF (=0) or ON (!=0)

   A value of -1 for (bell) acts as a wildcard and makes it possible to set a
   group of bells with only one command. */
void setbell(struct railway_system *railway, int bell, int state);

/* Get the state of one bell. A value of -1 for (bell) acts as a wildcard. The
   function will return the state of the first matching bell in this case. */
int getbell(struct railway_system *railway, int bell);

#endif'

        fsa.generateFile('railway.h', railwayH)

        val kickingH = '/* ==========================================================================

    kicking.h

    Railway layout definition. This file has been created automatically by a
    script. Do not edit this code, use the corresponding CSV file instead.

    Copyright 2005 Stephan Hoehrmann, stephan@hoehrmann.de

    This is free software, released under the terms of the GNU General
    Public License.

 ========================================================================= */

#ifndef _KICKING_H_

#include "railway.h"

#define IC_JCT_0     0
#define IC_LN_0      1
#define IC_LN_1      2
#define IC_LN_2      3
#define IC_LN_3      4
#define IC_LN_4      5
#define IC_LN_5      6
#define IC_ST_0      7
#define IC_ST_1      8
#define IC_ST_2      9
#define IC_ST_3      10
#define IC_ST_4      11
#define IO_LN_0      12
#define IO_LN_1      13
#define IO_LN_2      14
#define KH_LN_0      15
#define KH_LN_1      16
#define KH_LN_2      17
#define KH_LN_3      18
#define KH_LN_4      19
#define KH_LN_5      20
#define KH_LN_6      21
#define KH_LN_7      22
#define KH_LN_8      23
#define KH_ST_0      24
#define KH_ST_1      25
#define KH_ST_2      26
#define KH_ST_3      27
#define KH_ST_4      28
#define KH_ST_5      29
#define KH_ST_6      30
#define KIO_LN_0     31
#define KIO_LN_1     32
#define OC_JCT_0     33
#define OC_LN_0      34
#define OC_LN_1      35
#define OC_LN_2      36
#define OC_LN_3      37
#define OC_LN_4      38
#define OC_LN_5      39
#define OC_ST_0      40
#define OC_ST_1      41
#define OC_ST_2      42
#define OC_ST_3      43
#define OC_ST_4      44
#define OI_LN_0      45
#define OI_LN_1      46
#define OI_LN_2      47

struct railway_hardware kicking;

#define _KICKING_H_
#endif'
        fsa.generateFile("kicking.h", kickingH)
    }

    /**
     * Generate the static PROM main code snippet 
     */
    def String generateMainSnippet() {
'
<#include "/snippets/crossing.ftl" >
<#include "/snippets/contacts.ftl">
<#include "/snippets/lights.ftl">
<#include "/snippets/points.ftl">
<#include "/snippets/second.ftl">
<#include "/snippets/signals.ftl">
<#include "/snippets/tracks.ftl">

/******************************************************************
 * T E S T   H E A D E R                                          *
 *                                                                *
 * C O O L   S T U F F   H E R E                                  *
 ******************************************************************/

#include "kicking.h"
#include "railway.h"
#include "time.h"
#include "kieler-gen/controller.c"

// Basic dimension constants
#define NUM_OF_TRACKS 48
#define NUM_OF_POINTS 30
#define NUM_OF_LIGHTS 24

#define OPEN 0
#define CLOSED 1 


int main(int *argn, char *argv[]) {

    // Setup and establishing connection to the railway
    struct railway_system *railway;
    railway = railway_initsystem(&kicking);
    railway_openlinks_udp(railway,"node%02i","/dev/ttyS0");
    railway_startcontrol(railway,0,0);

    TickData *data = (TickData *) malloc(sizeof(TickData));

    reset(data);
    
    // Variable to keep track of the last time second was true
    clock_t lastSecond = clock();

    // variable to keep track of the crossing\'s current state
    int crossing = CLOSED;

    while(1) {
    
${inputs}
        
        tick(data);
        
${outputs}
    
    }
    
    // Shut down the connection to the railway
    railway_stopcontrol(railway,1);
    railway_closelinks(railway);
    railway_donesystem(railway);
    
    return 0;
}'
    }

    /**
     * Generate a static PROM code snippet as wrapper for the @code{tracks} variable.
     */
    def String generateTracksSnippet() {
'<#-- T R A C K S -->
<#macro tracks>
    <@output>
        // Set the tracks to the appropriate speed
        for (int i = 0; i < NUM_OF_TRACKS; i++) {
            settrack(railway, i, data->${varname}[i][1], data->${varname}[i][0]);
        }
    </@>
</#macro>'
    }

    /**
     * Generate a static PROM code snippet as wrapper for the @code{signals} variable.
     */
    def String generateSignalsSnippet() {
'<#-- S I G N A L S -->
<#macro signals>
    <@output>
        // Set all the signals appropriately
        for (int i = 0; i < NUM_OF_TRACKS; i++) {
            if ((i != KH_ST_0) && (i != KH_ST_6) && (i != IC_ST_0) && (i != IC_ST_4) && \\
                (i != OC_ST_0) && (i != OC_ST_4) && (i != IC_JCT_0) && (i != OC_JCT_0)) {
                setsignal(railway, i, 0, data->${varname}[i][0]);
                setsignal(railway, i, 1, data->${varname}[i][1]);
            }
        }
    </@>
</#macro>'
   }

    /**
     * Generate a static PROM code snippet as wrapper for the @code{points} variable.
     */
    def String generatePointsSnippet() {
'<#-- S W I T C H   P O I N T S -->
<#macro points>
    <@output>
        // Set all the switch points appropriately
        for (int i = 0; i < NUM_OF_POINTS; i++) {
            setpoint(railway, i, data->${varname}[i]);
        }
    </@>
</#macro>'
    }

    /**
     * Generate a static PROM code snippet as wrapper for the @code{lights} variable.
     */
    def String generateLightsSnippet() {
'<#-- L I G H T S -->
<#macro lights>
    <@output>
        // Set all the lights appropriately
        for (int i = 0; i < NUM_OF_LIGHTS; i++) {
            setlight(railway, i, data->${varname}[i]);
        }
    </@>
</#macro>'
    }
    
    /**
     * Generate a static PROM code snippet as wrapper for the @code{contacts} variable.
     */
    def String generateContactsSnippet() {
'<#-- C O N T A C T S -->
<#macro contacts>
    <@input>
        // Scan the contacts at the beginning of each tick
        for (int i = 0; i < NUM_OF_TRACKS; i++) {
            if ((i != KH_ST_0) && (i != KH_ST_6) && (i != IC_ST_0) && (i != IC_ST_4) && \\
                (i != OC_ST_0) && (i != OC_ST_4) && (i != IC_JCT_0) && (i != OC_JCT_0)) {
                data->${varname}[i][0] = getcontact(railway, i, 0, 1);
                data->${varname}[i][1] = getcontact(railway, i, 1, 1);   
            }
        }
    </@>
</#macro>'
    }

    /**
     * Generate a static PROM code snippet as wrapper for the @code{second} variable.
     */
    def String generateSecondSnippet()  {
'<#-- S E C O N D -->
<#macro second>
    <@input>
        // Set second to true if at least one second has elapsed since the last time it was true
        if (((double) (clock() - lastSecond) / CLOCKS_PER_SEC) >= 1) {
            data->${varname} = 1;
            lastSecond = clock();
        }
    </@>
    <@output>
        data->${varname} = false;
    </@>
</#macro>'   
    }

    /**
     * Generate a static PROM code snippet as wrapper for the @code{crossing} variable.
     */
    def String generateCrossingSnippet() {
'<#-- C R O S S I N G -->
<#macro crossing>
    <@output>
        // If the crossing\'s state has been updated this tick, set it accordingly
        if (data->${varname} != crossing) {
            setgate(railway, 0, data->${varname});
            setgate(railway, 1, data->${varname});
        }
    </@>
</#macro>
'
    }
}
