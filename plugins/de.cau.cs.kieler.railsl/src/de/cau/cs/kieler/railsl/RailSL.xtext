grammar de.cau.cs.kieler.railsl.RailSL with org.eclipse.xtext.common.Terminals

generate railSL "http://www.cau.de/cs/kieler/railsl/RailSL"

RailProgram:
    block=Block;

Block:
    ('Start:' | 'start:')
    (statements+=Statement)+
    end=BlockEnd;

enum BlockEnd:
    END='End.' | END='end.' |
    LOOP='Loop.' | LOOP='loop.';

Statement:
    SetStatement | WaitStatement | OpStatement | ConditionalStatement | ParallelStatement;

SetStatement:
    TrackStatement | PointStatement;

TrackStatement:
    ('Set' | 'set') 'track'
    (segments+=RailSegment)
    ((',' | 'and' | ',' 'and') segments+=RailSegment)*
    'to' (speed=TrackSpeedStop | speed=TrackSpeedDrive (reverse?='reverse')?) '.';

enum TrackSpeedStop returns TrackSpeed:
    STOP='stop';

enum TrackSpeedDrive returns TrackSpeed:
    FULL='full' | SLOW='slow';

PointStatement:
    ('Set' | 'set') 'point'
    (points+=INT)
    ((',' | 'and' | ',' 'and') points+=INT)*
    'to' orientation=PointOrientation '.';

enum PointOrientation:
    STRAIGHT='straight' | BRANCH='branch';

WaitStatement:
    TimeWaitStatement | ContactWaitStatement;

TimeWaitStatement:
    ('Wait' | 'wait') 'for'
    time=INT
    'seconds.';

ContactWaitStatement:
    event=ContactEvent
    contact=ContactPosition
    'contact' 'of'?
    segment=RailSegment '.';

enum ContactEvent:
    REACH='Reach' | REACH='reach' |
    PASS='Pass' | PASS='pass';

enum ContactPosition:
    FIRST='first' | SECOND='second';

OpStatement:
    CrossingStatement | LightStatement;

CrossingStatement:
    mode=CrossingMode 'crossing.';

enum CrossingMode:
    OPEN='Open' | OPEN='open' |
    CLOSE='Close' | CLOSE='close';

LightStatement:
    ('Turn' | 'turn') 'light'
    (lights+=INT)
    ((',' | 'and' | ',' 'and') lights+=INT)*
    state=LightMode
    '.';

enum LightMode:
    ON='on' | OFF='off';

ConditionalStatement:
    ('Branch:' | 'branch:')
    lines+=ConditionalLine
    (lines+=ConditionalLine)+;

ConditionalLine:
    ('If' | 'if')
    contact=ContactPosition
    'contact' 'of' segment=RailSegment
    'is' 'reached' ('first' | 'first,') 'do' block=Block;

ParallelStatement:
    ('Parallel:' | 'parallel:')
    blocks+=Block
    (blocks+=Block)+;

enum RailSegment:
    IC_JCT_0 |
    IC_LN_0 |
    IC_LN_1 |
    IC_LN_2 |
    IC_LN_3 |
    IC_LN_4 |
    IC_LN_5 |
    IC_ST_0 |
    IC_ST_1 |
    IC_ST_2 |
    IC_ST_3 |
    IC_ST_4 |
    IO_LN_0 |
    IO_LN_1 |
    IO_LN_2 |
    KH_LN_0 |
    KH_LN_1 |
    KH_LN_2 |
    KH_LN_3 |
    KH_LN_4 |
    KH_LN_5 |
    KH_LN_6 |
    KH_LN_7 |
    KH_LN_8 |
    KH_ST_0 |
    KH_ST_1 |
    KH_ST_2 |
    KH_ST_3 |
    KH_ST_4 |
    KH_ST_5 |
    KH_ST_6 |
    KIO_LN_0 |
    KIO_LN_1 |
    OC_JCT_0 |
    OC_LN_0 |
    OC_LN_1 |
    OC_LN_2 |
    OC_LN_3 |
    OC_LN_4 |
    OC_LN_5 |
    OC_ST_0 |
    OC_ST_1 |
    OC_ST_2 |
    OC_ST_3 |
    OC_ST_4 |
    OI_LN_0 |
    OI_LN_1 |
    OI_LN_2;
