/* $**************  KCG Version 6.0.0b (build i19) **************
** Command: x2s C:/Programme/Esterel Technologies/Scade60d/libraries/libdigital/digital.xscade
** Generation date: 2009-02-24T01:42:07
*************************************************************$ */

/* xscade source: C:/Programme/Esterel Technologies/Scade60d/libraries/libdigital/digital.xscade */
package digital
  node FallingEdge(FE_Input : bool) returns (FE_Output : bool)
  var
    _L1 : bool;
    _L3 : bool;
    _L4 : bool;
    _L5 : bool;
  let
    _L1= FE_Input;
    FE_Output= _L3;
    _L3= _L4 and _L5;
    _L4= fby(_L1; 1; _L1);
    _L5= not _L1;
  tel;
  
  node FallingEdgeNoRetrigger(FENR_Input : bool; NumberOfCycle : int)
    returns (FENR_Output : bool)
  var
    _L10 : bool;
    _L11 : bool;
    _L12 : bool;
    _L22 : int;
    _L23 : bool;
    _L26 : int;
    _L36 : bool;
    _L37 : bool;
    _L9 : bool;
    _L40 : bool;
    _L47 : bool;
    _L50 : bool;
    _L61 : bool;
    _L63 : bool;
    _L64 : bool;
    _L65 : int;
    _L68 : int;
  let
    _L9= FENR_Input;
    FENR_Output= _L40;
    _L10= pre _L9;
    _L11= not _L9;
    _L12= _L11 and _L10;
    _L22= 0;
    _L23= _L22 < _L65;
    _L26= NumberOfCycle;
    _L36= _L37 and _L63;
    _L37= not _L50;
    _L40= _L47 and _L23;
    _L47= _L50 or _L63;
    _L50= fby(_L40; 1; _L61);
    _L61= false;
    _L63= _L64 -> _L12;
    _L64= false;
    _L65= (activate #13 count_down every _L47 initial default _L68)(_L36, _L26);
    _L68= 0;
  tel;
  
  node FallingEdgeRetrigger(FER_Input : bool; NumberOfCycle : int)
    returns (FER_Output : bool)
  var
    _L1 : bool;
    _L76 : bool;
    _L74 : bool;
    _L73 : bool;
    _L71 : int;
    _L70 : bool;
    _L68 : bool;
    _L65 : bool;
    _L64 : bool;
    _L63 : int;
    _L62 : bool;
    _L61 : bool;
    _L59 : bool;
    _L77 : int;
    _L79 : int;
  let
    _L1= FER_Input;
    FER_Output= _L62;
    _L76= _L63 < _L77;
    _L74= false;
    _L73= fby(_L62; 1; _L74);
    _L71= NumberOfCycle;
    _L70= false;
    _L68= _L61 and _L59;
    _L65= _L73 or _L64;
    _L64= _L70 -> _L68;
    _L63= 0;
    _L62= _L65 and _L76;
    _L61= not _L1;
    _L59= pre _L1;
    _L77= (activate #11 count_down every _L65 initial default _L79)(_L64, _L71);
    _L79= 0;
  tel;
  
  node FlipFlopJK(Set : bool; Reset : bool; Init : bool)
    returns (FFJK_Output : bool)
  var
    _L10 : bool;
    _L11 : bool;
    _L12 : bool;
    _L2 : bool;
    _L4 : bool;
    _L5 : bool;
    _L6 : bool;
    _L9 : bool;
    _L18 : bool;
    _L20 : bool;
    _L21 : bool;
  let
    _L2= _L9 -> _L10;
    _L4= pre _L2;
    _L5= Set;
    _L6= Reset;
    _L9= Init;
    FFJK_Output= _L2;
    _L10= if _L12 then _L11 else _L18;
    _L11= not _L4;
    _L12= _L5 and _L6;
    _L18= _L5 or _L21;
    _L20= not _L6;
    _L21= _L20 and _L4;
  tel;
  
  node FlipFlopReset(Set : bool; Reset : bool; Init : bool)
    returns (FFR_Output : bool)
  var
    _L10 : bool;
    _L2 : bool;
    _L4 : bool;
    _L7 : bool;
    _L8 : bool;
    _L11 : bool;
    _L12 : bool;
    _L14 : bool;
  let
    _L2= _L10 -> _L14;
    _L4= pre _L2;
    _L7= Set;
    _L8= Reset;
    FFR_Output= _L2;
    _L10= Init;
    _L11= _L7 or _L4;
    _L12= not _L8;
    _L14= _L12 and _L11;
  tel;
  
  node FlipFlopSet(Set : bool; Reset : bool; Init : bool)
    returns (FFS_Output : bool)
  var
    _L10 : bool;
    _L2 : bool;
    _L4 : bool;
    _L5 : bool;
    _L6 : bool;
    _L11 : bool;
    _L12 : bool;
    _L13 : bool;
  let
    _L2= _L10 -> _L13;
    _L4= pre _L2;
    FFS_Output= _L2;
    _L5= Set;
    _L6= Reset;
    _L10= Init;
    _L11= not _L6;
    _L12= _L11 and _L4;
    _L13= _L5 or _L12;
  tel;
  
  node RisingEdge(RE_Input : bool) returns (RE_Output : bool)
  var
    _L1 : bool;
    _L6 : bool;
    _L3 : bool;
    _L8 : bool;
  let
    _L1= RE_Input;
    RE_Output= _L6;
    _L3= fby(_L1; 1; _L1);
    _L6= _L8 and _L1;
    _L8= not _L3;
  tel;
  
  node RisingEdgeRetrigger(RER_Input : bool; NumberOfCycle : int)
    returns (RER_Output : bool)
  var
    _L13 : bool;
    _L14 : bool;
    _L16 : bool;
    _L31 : bool;
    _L44 : int;
    _L43 : bool;
    _L41 : int;
    _L39 : bool;
    _L38 : bool;
    _L36 : bool;
    _L35 : bool;
    _L46 : bool;
    _L47 : bool;
    _L48 : int;
    _L50 : int;
  let
    RER_Output= _L43;
    _L13= RER_Input;
    _L14= pre _L31;
    _L16= _L13 and _L14;
    _L31= not _L13;
    _L44= 0;
    _L43= _L38 and _L35;
    _L41= NumberOfCycle;
    _L39= fby(_L43; 1; _L36);
    _L38= _L39 or _L46;
    _L36= false;
    _L35= _L44 < _L48;
    _L46= _L47 -> _L16;
    _L47= false;
    _L48= (activate #11 count_down every _L38 initial default _L50)(_L46, _L41);
    _L50= 0;
  tel;
  
  function Toggle(T_Input : bool) returns (T_On : bool; T_Off : bool)
  var
    _L3 : bool;
    _L9 : bool;
  let
    _L3= T_Input;
    T_On= _L3;
    T_Off= _L9;
    _L9= not _L3;
  tel;
  
  node RisingEdgeNoRetrigger(RENR_Input : bool; NumberOfCycle : int)
    returns (RENR_Output : bool)
  var
    _L90 : bool;
    _L87 : bool;
    _L86 : int;
    _L85 : bool;
    _L84 : bool;
    _L82 : bool;
    _L81 : bool;
    _L80 : int;
    _L79 : bool;
    _L78 : bool;
    _L77 : bool;
    _L76 : bool;
    _L75 : bool;
    _L91 : bool;
    _L92 : bool;
    _L93 : int;
    _L95 : int;
  let
    RENR_Output= _L78;
    _L90= _L80 < _L93;
    _L87= fby(_L78; 1; _L92);
    _L86= NumberOfCycle;
    _L85= _L91 and _L76;
    _L84= false;
    _L82= _L87 or _L79;
    _L81= _L75 and _L79;
    _L80= 0;
    _L79= _L84 -> _L85;
    _L78= _L82 and _L90;
    _L77= not _L91;
    _L76= pre _L77;
    _L75= not _L87;
    _L91= RENR_Input;
    _L92= false;
    _L93= (activate #13 count_down every _L82 initial default _L95)(_L81, _L86);
    _L95= 0;
  tel;
  
  node count_down(Reset : bool; N : int) returns (cpt : int)
  var
    _L1 : bool;
    _L2 : int;
    _L3 : int;
    _L4 : int;
    _L7 : int;
    _L8 : int;
    _L13 : int;
  let
    _L1= Reset;
    _L2= N;
    cpt= _L3;
    _L3= if _L1 then _L2 else _L8;
    _L4= _L3 - _L7;
    _L7= 1;
    _L8= _L2 -> _L13;
    _L13= pre _L4;
  tel;
  
  node EitherEdge(EE_Input : bool) returns (EE_Output : bool)
  var
    _L1 : bool;
    _L3 : bool;
    _L4 : bool;
  let
    _L1= EE_Input;
    EE_Output= _L3;
    _L3= _L4 xor _L1;
    _L4= fby(_L1; 1; _L1);
  tel;
  
  function BoolVect2IntElt(Acc : int; bi : bool) returns (AccOut : int)
  var
    _L1 : int;
    _L2 : bool;
    _L4 : int;
    _L5 : int;
    _L6 : int;
    _L7 : int;
    _L8 : int;
    _L9 : int;
  let
    AccOut= _L8;
    _L1= Acc;
    _L2= bi;
    _L4= _L1 * _L9;
    _L5= if _L2 then _L6 else _L7;
    _L6= 1;
    _L7= 0;
    _L8= _L5 + _L4;
    _L9= 2;
  tel;
  
  function Int2BoolVectElt(Acc : int) returns (AccOut : int; bi : bool)
  var
    _L1 : int;
    _L9 : int;
    _L10 : int;
    _L11 : int;
    _L12 : bool;
    _L13 : int;
  let
    AccOut= _L10;
    _L1= Acc;
    _L9= 2;
    _L10= _L1 div _L9;
    bi= _L12;
    _L11= _L1 mod _L9;
    _L12= _L11 = _L13;
    _L13= 1;
  tel;
  
  function BoolVect2Int<<Nbool>>(BV : bool^Nbool) returns (Out : int)
  var
    _L2 : int;
    _L3 : int;
    _L4 : bool^Nbool;
  let
    _L2= (fold #1 BoolVect2IntElt <<Nbool>>)(_L3, _L4);
    _L3= 0;
    _L4= BV;
    Out= _L2;
  tel;
  
  function Int2BoolVect<<Nbool>>(In : int) returns (BV : bool^Nbool)
  var
    _L1 : int;
    _L3 : int;
    _L4 : bool^Nbool;
    _L5 : bool^Nbool;
  let
    _L1= In;
    BV= _L5;
    _L3, _L4= (mapfold #1 Int2BoolVectElt <<Nbool>>)(_L1);
    _L5= reverse _L4;
    _= _L3;
  tel;
  
end;

/* $**************  KCG Version 6.0.0b (build i19) **************
** -
** Generation date: 2009-02-24T01:42:07
*************************************************************$ */
/* $**************  KCG Version 6.0.0b (build i19) **************
** Command: x2s C:/Programme/Esterel Technologies/Scade60d/libraries/libdigital/TruthTables.xscade
** Generation date: 2009-02-24T01:42:07
*************************************************************$ */

/* xscade source: C:/Programme/Esterel Technologies/Scade60d/libraries/libdigital/TruthTables.xscade */
package truthtables
  open digital;
  type TruthTableValues = enum { T, F, X };
  
  function TruthTableElt(AccIn : bool; Cond : bool; TTelt : TruthTableValues)
    returns (AccOut : bool)
  var
    _L1 : bool;
    _L2 : bool;
    _L13 : bool;
    _L15 : bool;
    _L14 : bool;
    _L16 : bool;
    _L17 : TruthTableValues;
  let
    _L1= _L2 and _L13;
    _L2= AccIn;
    AccOut= _L1;
    _L13= (case _L17 of | T: _L14 | F: _L15 | _: _L16);
    _L14= Cond;
    _L15= not _L14;
    _L16= true;
    _L17= TTelt;
  tel;
  
  function TruthTableLineIdx<<Ncond>>(
      Idx : int;
      AccIn : int;
      Conditions : bool^Ncond;
      TTline : TruthTableValues^Ncond)
    returns (AccOut : int)
  var
    _L2 : bool;
    _L3 : int;
    _L4 : int;
    _L8 : int;
    _L10 : bool^Ncond;
    _L11 : bool;
    _L12 : TruthTableValues^Ncond;
  let
    _L2= (fold #1 TruthTableElt <<Ncond>>)(_L11, _L10, _L12);
    _L3= if _L2 then _L8 else _L4;
    AccOut= _L3;
    _L4= AccIn;
    _L8= Idx;
    _L10= Conditions;
    _L11= true;
    _L12= TTline;
  tel;
  
  function TruthTableIdx<<Ncond, Nlines>>(
      Conditions : bool^Ncond;
      Ttable : TruthTableValues^Ncond^Nlines)
    returns (LineIdx : int)
  var
    _L1 : bool^Ncond;
    _L2 : TruthTableValues^Ncond^Nlines;
    _L6 : int;
    _L8 : bool^Ncond^Nlines;
    _L9 : TruthTableValues^Ncond^Nlines;
    _L10 : int;
    _L11 : int;
    _L12 : int;
  let
    _L1= Conditions;
    _L2= Ttable;
    LineIdx= _L10;
    _L6= -1;
    _L8= _L1^Nlines;
    _L9= reverse _L2;
    _L10= _L11 - _L12;
    _L11= Nlines - 1;
    _L12= (foldi (#2 TruthTableLineIdx <<Ncond>>) <<Nlines>>)(_L6, _L8, _L9);
  tel;
  
  function TruthTableExh<<Nbool, Nres>>(BV : bool^Nbool; ResultValues : 'T^Nres)
    returns (Result : 'T)
  var
    _L1 : bool^Nbool;
    _L3 : 'T;
    _L4 : 'T^Nres;
    _L5 : int;
  let
    _L1= BV;
    _L3= (_L4.[_L5] default ResultValues[0]);
    _L4= ResultValues;
    Result= _L3;
    _L5= (#3 BoolVect2Int <<Nbool>>)(_L1);
  tel;
  
  function TruthTableLine<<Ncond>>(
      AccIn : 'T;
      Conditions : bool^Ncond;
      ResultValue : 'T;
      TTline : TruthTableValues^Ncond)
    returns (Continue : bool; AccOut : 'T)
  var
    _L2 : bool;
    _L3 : 'T;
    _L4 : 'T;
    _L10 : bool^Ncond;
    _L11 : bool;
    _L12 : TruthTableValues^Ncond;
    _L14 : 'T;
    _L15 : bool;
  let
    _L2= (fold #1 TruthTableElt <<Ncond>>)(_L11, _L10, _L12);
    _L3= if _L2 then _L14 else _L4;
    AccOut= _L3;
    _L4= AccIn;
    _L10= Conditions;
    _L11= true;
    _L12= TTline;
    _L14= ResultValue;
    Continue= _L15;
    _L15= not _L2;
  tel;
  
  function TruthTable<<Ncond, Nlines>>(
      Conditions : bool^Ncond;
      ResultValues : 'T^(Nlines + 1);
      Ttable : TruthTableValues^Ncond^Nlines)
    returns (Result : 'T)
  var
    _L1 : bool^Ncond;
    _L2 : TruthTableValues^Ncond^Nlines;
    _L7 : 'T^(Nlines + 1);
    _L9 : bool^Ncond^Nlines;
    _L12 : 'T;
    _L16 : 'T^(Nlines + 1);
    _L17 : bool;
    _L19 : 'T;
    _L18 : int;
    _L21 : 'T^(Nlines - 1 - 0 + 1);
  let
    _L1= Conditions;
    _L2= Ttable;
    Result= _L19;
    _L7= ResultValues;
    _L9= _L1^Nlines;
    _L12= _L16[Nlines];
    _L16= ResultValues;
    _L17= true;
    _L18, _L19=
      (foldw (#4 TruthTableLine <<Ncond>>) <<Nlines>> if _L17)(_L12, _L9, _L21, _L2);
    _= _L18;
    _L21= _L7 [0 .. Nlines - 1];
  tel;
  
end;

/* $**************  KCG Version 6.0.0b (build i19) **************
** -
** Generation date: 2009-02-24T01:42:07
*************************************************************$ */
/* $**************  KCG Version 6.0.0b (build i19) **************
** Command: x2s C:/Programme/Esterel Technologies/Scade60d/libraries/liblinear/linear.xscade
** Generation date: 2009-02-24T01:42:07
*************************************************************$ */

/* xscade source: C:/Programme/Esterel Technologies/Scade60d/libraries/liblinear/linear.xscade */
package linear
  function Gain(G_Input : 'T; Gain : 'T)
    returns (G_Output : 'T)
    where 'T numeric
  var
    _L1 : 'T;
    _L2 : 'T;
    _L3 : 'T;
  let
    _L1= G_Input;
    _L2= Gain;
    G_Output= _L3;
    _L3= _L1 * _L2;
  tel;
  
  node MeanCycle2(U : real) returns (MeanOn2Steps : real)
  var
    _L1 : real;
    _L13 : real;
    _L14 : real;
    _L8 : real;
    _L9 : real;
  let
    _L1= U;
    MeanOn2Steps= _L8;
    _L8= _L14 / _L9;
    _L9= 2.0;
    _L13= fby(_L1; 1; _L1);
    _L14= _L1 + _L13;
  tel;
  
  node MeanCycle3(U : real) returns (MeanOn3Step : real)
  var
    _L10 : real;
    _L11 : real;
    _L12 : real;
    _L6 : real;
    _L7 : real;
    _L9 : real;
  let
    MeanOn3Step= _L12;
    _L6= U;
    _L7= fby(_L6; 1; _L6);
    _L9= fby(_L7; 1; _L6);
    _L10= 3.0;
    _L11= _L6 + _L7 + _L9;
    _L12= _L11 / _L10;
  tel;
  
  node Derivative(u : real; TimeCycle : real) returns (Derivative : real)
  var
    _L1 : real;
    _L2 : real;
    _L3 : real;
    _L6 : real;
    _L7 : real;
    _L8 : real;
    _L9 : real;
  let
    _L1= _L3 - _L2;
    _L2= pre _L3;
    _L3= u;
    Derivative= _L6;
    _L6= _L7 -> _L8;
    _L7= 0.0;
    _L8= _L1 / _L9;
    _L9= TimeCycle;
  tel;
  
  node Filter1stOrderLoop(F1OL_Input : real; K1 : real; K2 : real; Init : real)
    returns (F1OL_Output : real)
  var
    _L9 : real;
    _L8 : real;
    _L7 : real;
    _L6 : real;
    _L5 : real;
    _L4 : real;
    _L3 : real;
    _L2 : real;
    _L1 : real;
  let
    _L9= Init;
    _L8= _L9 -> _L7;
    _L7= _L4 - _L6;
    _L6= _L5 * _L2;
    _L5= pre _L8;
    _L4= _L3 * _L1;
    F1OL_Output= _L8;
    _L3= F1OL_Input;
    _L2= K2;
    _L1= K1;
  tel;
  
  node IntegrTrapez(
      U : real;
      Reset : bool;
      TimeCycle : real;
      LowLimit : real;
      HiLimit : real)
    returns (Y : real)
  var
    _L1 : real;
    _L10 : real;
    _L11 : real;
    _L12 : real;
    _L2 : real;
    _L3 : real;
    _L4 : real;
    _L6 : real;
    _L7 : real;
    _L8 : real;
    _L9 : real;
    _L13 : real;
    _L14 : real;
    _L15 : real;
    _L16 : real;
    _L17 : bool;
    _L18 : bool;
    _L20 : real;
    _L21 : real;
    _L22 : bool;
  let
    _L2= TimeCycle;
    _L3= pre _L1;
    _L4= pre _L20;
    _L6= _L4 + _L7;
    _L7= _L12 * _L8;
    _L8= _L2 / _L11;
    _L9= _L10 -> _L6;
    Y= _L20;
    _L10= 0.0;
    _L11= 2.0;
    _L12= _L1 + _L3;
    _L1= U;
    _L13= LowLimit;
    _L14= HiLimit;
    _L15= if _L17 then _L13 else _L9;
    _L16= if _L18 then _L14 else _L15;
    _L17= _L9 <= _L13;
    _L18= _L15 >= _L14;
    _L20= if _L22 then _L21 else _L16;
    _L21= 0.0;
    _L22= Reset;
  tel;
  
  node IntegrFwd(
      U : real;
      Reset : bool;
      TimeCycle : real;
      LowLimit : real;
      HiLimit : real)
    returns (Y : real)
  var
    _L17 : bool;
    _L16 : bool;
    _L15 : real;
    _L14 : real;
    _L13 : real;
    _L12 : real;
    _L11 : real;
    _L8 : real;
    _L7 : real;
    _L5 : real;
    _L4 : real;
    _L3 : real;
    _L1 : real;
    _L19 : real;
    _L21 : real;
    _L22 : bool;
  let
    _L17= _L14 >= _L13;
    _L16= _L7 <= _L12;
    _L15= if _L17 then _L13 else _L14;
    _L14= if _L16 then _L12 else _L7;
    _L13= HiLimit;
    _L12= LowLimit;
    _L11= U;
    _L8= 0.0;
    Y= _L19;
    _L7= _L8 -> _L4;
    _L5= _L11 * _L1;
    _L4= _L3 + _L5;
    _L3= pre _L19;
    _L1= TimeCycle;
    _L19= if _L22 then _L21 else _L15;
    _L21= 0.0;
    _L22= Reset;
  tel;
  
  node Memory(M_Input : 'T; Reset : bool; MemCond : bool; InitVal : 'T)
    returns (Out : 'T)
  var
    _L8 : 'T;
    _L7 : 'T;
    _L6 : 'T;
    _L5 : 'T;
    _L3 : bool;
    _L2 : 'T;
    _L1 : bool;
    _L9 : 'T;
  let
    Out= _L8;
    _L8= if _L1 then _L2 else _L7;
    _L7= if _L3 then _L6 else _L5;
    _L6= M_Input;
    _L5= fby(_L8; 1; _L9);
    _L3= MemCond;
    _L2= InitVal;
    _L1= Reset;
    _L9= InitVal;
  tel;
  
  node HitCrossingEither(HCE_Input : 'T; Offset : 'T)
    returns (HCE_Output : bool)
    where 'T numeric
  var
    _L1 : 'T;
    _L5 : 'T;
    _L24 : bool;
    _L25 : bool;
    _L26 : bool;
    _L28 : bool;
    _L29 : bool;
    _L30 : bool;
    _L31 : bool;
    _L43 : 'T;
  let
    _L1= HCE_Input;
    _L5= Offset;
    _L24= _L43 <= _L5;
    _L25= _L1 >= _L5;
    _L26= _L24 and _L25;
    _L28= _L43 >= _L5;
    _L29= _L1 <= _L5;
    _L30= _L28 and _L29;
    _L31= _L26 or _L30;
    HCE_Output= _L31;
    _L43= fby(_L1; 1; _L1);
  tel;
  
  node HitCrossingFalling(HCF_Input : 'T; Offset : 'T)
    returns (HCF_Output : bool)
    where 'T numeric
  var
    _L1 : 'T;
    _L5 : 'T;
    _L10 : bool;
    _L18 : bool;
    _L22 : 'T;
    _L24 : bool;
    _L25 : bool;
    _L26 : bool;
    _L27 : bool;
    _L28 : bool;
    _L29 : bool;
    _L30 : bool;
  let
    _L1= HCF_Input;
    _L5= Offset;
    _L10= _L18 -> _L30;
    _L18= false;
    _L22= pre _L1;
    _L24= _L22 >= _L5;
    _L25= _L1 < _L5;
    _L26= _L24 and _L25;
    HCF_Output= _L10;
    _L27= _L22 > _L5;
    _L28= _L1 = _L5;
    _L29= _L27 and _L28;
    _L30= _L26 or _L29;
  tel;
  
  node HitCrossingRising(HCR_Input : 'T; Offset : 'T)
    returns (HCR_Output : bool)
    where 'T numeric
  var
    _L1 : 'T;
    _L5 : 'T;
    _L10 : bool;
    _L18 : bool;
    _L22 : 'T;
    _L24 : bool;
    _L25 : bool;
    _L26 : bool;
    _L27 : bool;
    _L28 : bool;
    _L29 : bool;
    _L30 : bool;
  let
    _L1= HCR_Input;
    _L5= Offset;
    _L10= _L18 -> _L30;
    _L18= false;
    _L22= pre _L1;
    _L24= _L22 <= _L5;
    _L25= _L1 > _L5;
    _L26= _L24 and _L25;
    HCR_Output= _L10;
    _L27= _L22 < _L5;
    _L28= _L1 = _L5;
    _L29= _L27 and _L28;
    _L30= _L26 or _L29;
  tel;
  
  node MemoryBasic(BM_Input : 'T; Init : 'T; Write : bool)
    returns (Memorized : 'T)
  var
    _L2 : 'T;
    _L4 : 'T;
    _L5 : bool;
    _L6 : 'T;
    _L7 : 'T;
  let
    _L2= BM_Input;
    Memorized= _L4;
    _L4= if _L5 then _L2 else _L6;
    _L5= Write;
    _L6= fby(_L4; 1; _L7);
    _L7= Init;
  tel;
  
end;

/* $**************  KCG Version 6.0.0b (build i19) **************
** -
** Generation date: 2009-02-24T01:42:07
*************************************************************$ */
/* $**************  KCG Version 6.0.0b (build i19) **************
** Command: x2s C:/Programme/Esterel Technologies/Scade60d/libraries/liblinear/filters.xscade
** Generation date: 2009-02-24T01:42:07
*************************************************************$ */

/* xscade source: C:/Programme/Esterel Technologies/Scade60d/libraries/liblinear/filters.xscade */
package filters
  node TransferFcn01(In : real; Num : real; Den : real^2) returns (Out : real)
  var
    _L44 : real;
    _L40 : real;
    _L29 : real;
    _L65 : real;
    _L66 : real;
    _L69 : real;
    _L72 : real;
    _L77 : real;
    _L78 : real;
  let
    Out= _L65;
    _L44= _L72 * _L65;
    _L40= _L29 * _L69;
    _L29= In;
    _L65= _L77 / _L78;
    _L66= _L40 - _L44;
    _L69= Num;
    _L72= Den[1];
    _L77= fby(_L66; 1; 0.0);
    _L78= Den[0];
  tel;
  
  node private SumDelay(Delay : real; Val : real) returns (Out : real)
  var
    _L2 : real;
    _L3 : real;
    _L15 : real;
    _L21 : real;
  let
    _L2= Delay;
    _L3= Val;
    Out= _L15;
    _L15= _L21 + _L3;
    _L21= fby(_L2; 1; 0.0);
  tel;
  
  node Filter01(In : real; Num : real; Den : real^2) returns (Out : real)
  var
    _L46 : real;
    _L66 : real;
    _L69 : real;
    _L71 : real;
    _L72 : real;
    _L73 : real;
    _L74 : real;
    _L76 : real;
    _L77 : real;
  let
    _L46= _L73 / _L66;
    Out= _L46;
    _L66= Den[0];
    _L69= In;
    _L71= _L69 * _L72;
    _L72= Num;
    _L73= _L71 - _L77;
    _L74= _L76 * _L46;
    _L76= Den[1];
    _L77= fby(_L74; 1; 0.0);
  tel;
  
  node Filter11(In : real; Num : real^2; Den : real^2) returns (Out : real)
  var
    _L200 : real;
    _L203 : real;
    _L229 : real;
    _L230 : real;
    _L231 : real;
    _L232 : real;
    _L233 : real;
    _L234 : real;
    _L235 : real;
    _L243 : real;
    _L244 : real;
    _L245 : real;
  let
    _L203= In;
    _L200= _L230 * _L203;
    _L229= _L231 / _L245;
    Out= _L229;
    _L230= Num[0];
    _L231= _L200 + _L244;
    _L232= Den[1];
    _L233= Num[1];
    _L234= _L203 * _L233;
    _L235= _L232 * _L229;
    _L243= _L234 - _L235;
    _L244= fby(_L243; 1; 0.0);
    _L245= Den[0];
  tel;
  
  node Filter0D<<Ds>>(In : real; Num : real; Den : real^Ds) returns (Out : real)
  var
    _L3 : real;
    _L14 : real^(Ds - 1);
    _L68 : real;
    _L73 : real^(Ds - 1);
    _L16 : real^(Ds - 1);
    _L116 : real;
    _L126 : real;
    _L129 : real;
    _L132 : real^(Ds - 1 - 1 + 1);
    _L134 : real^Ds;
    _L135 : real;
    _L136 : real;
    _L137 : real;
    _L138 : real;
  let
    _L3= In;
    _L14= reverse _L16;
    _L68= (fold #2 SumDelay <<Ds - 1>>)(_L126, _L14);
    Out= _L116;
    _L73= _L116^(Ds - 1);
    _L116= _L138 / _L136;
    _L126= 0.0;
    _L129= _L3 * _L135;
    _L132= _L134 [1 .. Ds - 1];
    _L134= Den;
    _L135= Num;
    _L136= Den[0];
    _L137= fby(_L68; 1; 0.0);
    _L138= _L129 - _L137;
    _L16= (map #14 $*$ <<Ds - 1>>)(_L132, _L73);
  tel;
  
  node FilterNN<<Ns>>(In : real; Num : real^Ns; Den : real^Ns)
    returns (Out : real)
  var
    _L3 : real;
    _L7 : real^(Ns - 1);
    _L68 : real;
    _L71 : real^(Ns - 1);
    _L73 : real^(Ns - 1);
    _L10 : real^(Ns - 1);
    _L16 : real^(Ns - 1);
    _L116 : real;
    _L126 : real;
    _L128 : real^(Ns - 1);
    _L129 : real^Ns;
    _L132 : real^Ns;
    _L133 : real;
    _L134 : real^(Ns - 1 - 1 + 1);
    _L135 : real;
    _L141 : real;
    _L140 : real;
    _L142 : real;
    _L143 : real;
    _L144 : real^(Ns - 1 - 1 + 1);
  let
    _L3= In;
    _L7= _L3^(Ns - 1);
    _L68= (fold #3 SumDelay <<Ns - 1>>)(_L126, _L128);
    Out= _L116;
    _L73= _L116^(Ns - 1);
    _L116= _L143 / _L133;
    _L126= 0.0;
    _L128= reverse _L71;
    _L129= Num;
    _L132= Den;
    _L133= Den[0];
    _L134= _L129 [1 .. Ns - 1];
    _L135= fby(_L68; 1; 0.0);
    _L140= Num[0];
    _L141= In;
    _L142= _L141 * _L140;
    _L143= _L142 + _L135;
    _L144= _L132 [1 .. Ns - 1];
    _L10= (map #19 $*$ <<Ns - 1>>)(_L7, _L134);
    _L16= (map #22 $*$ <<Ns - 1>>)(_L144, _L73);
    _L71= (map #25 $-$ <<Ns - 1>>)(_L10, _L16);
  tel;
  
  node FilterND<<Ns, Ds>>(In : real; Num : real^Ns; Den : real^Ds)
    returns (Out : real)
  var
    _L7 : real^(Ns - 1);
    _L68 : real;
    _L71 : real^(Ds - 1);
    _L73 : real^(Ds - 1);
    _L10 : real^(Ns - 1);
    _L16 : real^(Ds - 1);
    _L116 : real;
    _L118 : real;
    _L120 : real^(Ns - 1 + (Ds - Ns));
    _L124 : real^(Ds - Ns);
    _L126 : real;
    _L128 : real;
    _L129 : real^(Ds - 1);
    _L130 : real^Ns;
    _L133 : real^Ds;
    _L134 : real;
    _L135 : real^(Ds - 1 - 1 + 1);
    _L136 : real^(Ns - 1 - 1 + 1);
    _L137 : real;
    _L139 : real;
    _L138 : real;
    _L140 : real;
    _L143 : real;
  let
    _L7= _L128^(Ns - 1);
    _L68= (fold #3 SumDelay <<Ds - 1>>)(_L126, _L129);
    Out= _L116;
    _L73= _L116^(Ds - 1);
    _L116= _L137 / _L134;
    _L118= 0.0;
    _L120= _L10 @ _L124;
    _L124= _L118^(Ds - Ns);
    _L126= 0.0;
    _L128= In;
    _L129= reverse _L71;
    _L130= Num;
    _L133= Den;
    _L134= Den[0];
    _L135= _L133 [1 .. Ds - 1];
    _L136= _L130 [1 .. Ns - 1];
    _L137= _L140 + _L143;
    _L138= In;
    _L139= Num[0];
    _L140= _L138 * _L139;
    _L143= fby(_L68; 1; 0.0);
    _L10= (map #22 $*$ <<Ns - 1>>)(_L7, _L136);
    _L16= (map #25 $*$ <<Ds - 1>>)(_L135, _L73);
    _L71= (map #28 $-$ <<Ds - 1>>)(_L120, _L16);
  tel;
  
  node TransferFcn02(In : real; Num : real; Den : real^3) returns (Out : real)
  var
    _L29 : real;
    _L65 : real;
    _L75 : real;
    _L76 : real;
    _L77 : real;
    _L78 : real;
    _L79 : real;
    _L80 : real;
    _L81 : real;
    _L85 : real;
    _L86 : real;
    _L87 : real;
    _L107 : real;
  let
    Out= _L65;
    _L29= In;
    _L65= _L107 / _L87;
    _L75= Den[2];
    _L76= _L75 * _L65;
    _L77= _L29 * _L78;
    _L78= Num;
    _L80= fby(_L79; 1; 0.0);
    _L81= _L85 * _L65;
    _L85= Den[1];
    _L86= _L80 - _L81;
    _L87= Den[0];
    _L79= _L77 - _L76;
    _L107= fby(_L86; 1; 0.0);
  tel;
  
  node Filter02(In : real; Num : real; Den : real^3) returns (Out : real)
  var
    _L29 : real;
    _L40 : real;
    _L46 : real;
    _L63 : real;
    _L64 : real;
    _L65 : real;
    _L66 : real;
    _L67 : real;
    _L68 : real;
    _L69 : real;
    _L70 : real;
    _L74 : real;
    _L75 : real;
  let
    _L29= In;
    _L40= _L29 * _L63;
    _L46= _L74 / _L69;
    Out= _L46;
    _L63= Num;
    _L65= Den[1];
    _L66= _L65 * _L46;
    _L67= _L68 * _L46;
    _L68= Den[2];
    _L69= Den[0];
    _L70= fby(_L66; 1; 0.0);
    _L74= _L64 - _L75;
    _L75= fby(_L67; 2; 0.0);
    _L64= _L40 - _L70;
  tel;
  
  node TransferFcn0D<<Ds>>(In : real; Num : real; Den : real^Ds)
    returns (Out : real)
  var
    _L4 : real^(Ds - 2 - 1 + 1);
    _L5 : real^Ds;
    _L6 : real;
    _L7 : real;
    _L8 : real;
    _L9 : real;
    _L10 : real;
    _L11 : real;
    _L18 : real;
    _L19 : real^(Ds - 2);
    _L20 : real;
    _L21 : real;
    _L22 : real;
    _L23 : real^(Ds - 2);
    _L26 : real^(Ds - 2);
  let
    _L4= _L5 [1 .. Ds - 2];
    _L5= Den;
    _L6= In;
    _L7= Num;
    _L8= _L6 * _L7;
    _L9= Den[Ds - 1];
    _L10= _L9 * _L21;
    _L19= reverse _L23;
    _L20= fby(_L18; 1; 0.0);
    _L21= _L20 / _L22;
    _L22= Den[0];
    Out= _L21;
    _L26= _L21^(Ds - 2);
    _L11= _L8 - _L10;
    _L18= (fold #14 SumDelay <<Ds - 2>>)(_L11, _L19);
    _L23= (map #17 $*$ <<Ds - 2>>)(_L4, _L26);
  tel;
  
  node Filter01Norm(In : real; Num : real; Den : real) returns (Out : real)
  var
    _L69 : real;
    _L71 : real;
    _L72 : real;
    _L73 : real;
    _L74 : real;
    _L76 : real;
    _L77 : real;
  let
    Out= _L73;
    _L69= In;
    _L71= _L69 * _L72;
    _L72= Num;
    _L73= _L71 - _L77;
    _L74= _L76 * _L73;
    _L76= Den;
    _L77= fby(_L74; 1; 0.0);
  tel;
  
  node Filter12(In : real; Num : real^2; Den : real^3) returns (Out : real)
  var
    _L200 : real;
    _L203 : real;
    _L229 : real;
    _L230 : real;
    _L231 : real;
    _L232 : real;
    _L233 : real;
    _L234 : real;
    _L235 : real;
    _L243 : real;
    _L244 : real;
    _L245 : real;
    _L248 : real;
    _L249 : real;
    _L250 : real;
    _L253 : real;
  let
    _L203= In;
    _L200= _L230 * _L203;
    _L229= _L248 / _L245;
    Out= _L229;
    _L230= Num[0];
    _L231= _L200 + _L244;
    _L232= Den[1];
    _L233= Num[1];
    _L234= _L203 * _L233;
    _L235= _L232 * _L229;
    _L243= _L234 - _L235;
    _L244= fby(_L243; 1; 0.0);
    _L245= Den[0];
    _L248= _L231 - _L250;
    _L249= _L253 * _L229;
    _L250= fby(_L249; 2; 0.0);
    _L253= Den[2];
  tel;
  
  node TransferFcn12(In : real; Num : real^2; Den : real^3) returns (Out : real)
  var
    _L29 : real;
    _L65 : real;
    _L75 : real;
    _L76 : real;
    _L77 : real;
    _L78 : real;
    _L79 : real;
    _L80 : real;
    _L81 : real;
    _L85 : real;
    _L86 : real;
    _L87 : real;
    _L93 : real;
    _L94 : real;
    _L97 : real;
    _L98 : real;
    _L104 : real;
  let
    Out= _L65;
    _L29= In;
    _L65= _L98 / _L87;
    _L75= Den[2];
    _L76= _L75 * _L65;
    _L77= _L78 * _L29;
    _L78= Num[1];
    _L80= fby(_L79; 1; 0.0);
    _L81= _L85 * _L65;
    _L85= Den[1];
    _L87= Den[0];
    _L93= _L94 - _L81;
    _L86= _L80 + _L93;
    _L94= _L97 * _L104;
    _L97= Num[0];
    _L98= fby(_L86; 1; 0.0);
    _L79= _L77 - _L76;
    _L104= In;
  tel;
  
  node TransferFcnND<<Ns, Ds>>(In : real; Num : real^Ns; Den : real^Ds)
    returns (Out : real)
  var
    _L4 : real^(Ds - 1 - 1 + 1);
    _L5 : real^Ds;
    _L6 : real;
    _L7 : real^Ns;
    _L18 : real;
    _L19 : real^(Ds - 1);
    _L20 : real;
    _L21 : real;
    _L22 : real;
    _L23 : real^(Ds - 1);
    _L26 : real^(Ds - 1);
    _L31 : real^Ns;
    _L32 : real^Ns;
    _L36 : real^(Ns + (Ds - Ns - 1));
    _L38 : real;
    _L41 : real^(Ds - 1);
    _L47 : real;
    _L48 : real^(Ds - Ns - 1);
  let
    _L4= _L5 [1 .. Ds - 1];
    _L5= Den;
    _L6= In;
    _L7= Num;
    _L18= (fold #3 SumDelay <<Ds - 1>>)(_L47, _L19);
    _L19= reverse _L41;
    _L20= fby(_L18; 1; 0.0);
    _L21= _L20 / _L22;
    _L22= Den[0];
    Out= _L21;
    _L26= _L21^(Ds - 1);
    _L31= _L6^Ns;
    _L36= _L48 @ _L32;
    _L48= _L38^(Ds - Ns - 1);
    _L38= 0.0;
    _L47= 0.0;
    _L32= (map #17 $*$ <<Ns>>)(_L31, _L7);
    _L23= (map #19 $*$ <<Ds - 1>>)(_L4, _L26);
    _L41= (map #22 $-$ <<Ds - 1>>)(_L36, _L23);
  tel;
  
  node Filter02Norm(In : real; Num : real; Den : real^2) returns (Out : real)
  var
    _L29 : real;
    _L40 : real;
    _L63 : real;
    _L64 : real;
    _L65 : real;
    _L66 : real;
    _L67 : real;
    _L68 : real;
    _L70 : real;
    _L74 : real;
    _L75 : real;
  let
    _L29= In;
    _L40= _L29 * _L63;
    Out= _L74;
    _L63= Num;
    _L65= Den[0];
    _L66= _L65 * _L74;
    _L67= _L68 * _L74;
    _L68= Den[1];
    _L70= fby(_L66; 1; 0.0);
    _L74= _L64 - _L75;
    _L75= fby(_L67; 2; 0.0);
    _L64= _L40 - _L70;
  tel;
  
  node Filter11Norm(In : real; Num : real^2; Den : real) returns (Out : real)
  var
    _L200 : real;
    _L203 : real;
    _L230 : real;
    _L231 : real;
    _L232 : real;
    _L233 : real;
    _L234 : real;
    _L235 : real;
    _L243 : real;
    _L244 : real;
  let
    _L203= In;
    _L200= _L230 * _L203;
    Out= _L231;
    _L230= Num[0];
    _L231= _L200 + _L244;
    _L232= Den;
    _L233= Num[1];
    _L234= _L203 * _L233;
    _L235= _L232 * _L231;
    _L243= _L234 - _L235;
    _L244= fby(_L243; 1; 0.0);
  tel;
  
  node Filter12Norm(In : real; Num : real^2; Den : real^2) returns (Out : real)
  var
    _L200 : real;
    _L203 : real;
    _L230 : real;
    _L231 : real;
    _L232 : real;
    _L233 : real;
    _L234 : real;
    _L235 : real;
    _L243 : real;
    _L244 : real;
    _L248 : real;
    _L249 : real;
    _L250 : real;
    _L253 : real;
  let
    _L203= In;
    _L200= _L230 * _L203;
    Out= _L248;
    _L230= Num[0];
    _L231= _L200 + _L244;
    _L232= Den[0];
    _L233= Num[1];
    _L234= _L203 * _L233;
    _L235= _L232 * _L248;
    _L243= _L234 - _L235;
    _L244= fby(_L243; 1; 0.0);
    _L248= _L231 - _L250;
    _L249= _L253 * _L248;
    _L250= fby(_L249; 2; 0.0);
    _L253= Den[1];
  tel;
  
  node Filter0DNorm<<Ds>>(In : real; Num : real; Den : real^Ds)
    returns (Out : real)
  var
    _L3 : real;
    _L14 : real^Ds;
    _L68 : real;
    _L73 : real^Ds;
    _L16 : real^Ds;
    _L126 : real;
    _L129 : real;
    _L134 : real^Ds;
    _L135 : real;
    _L137 : real;
    _L138 : real;
  let
    _L3= In;
    _L14= reverse _L16;
    _L68= (fold #2 SumDelay <<Ds>>)(_L126, _L14);
    Out= _L138;
    _L73= _L138^Ds;
    _L126= 0.0;
    _L129= _L3 * _L135;
    _L134= Den;
    _L135= Num;
    _L137= fby(_L68; 1; 0.0);
    _L138= _L129 - _L137;
    _L16= (map #8 $*$ <<Ds>>)(_L134, _L73);
  tel;
  
  node FilterNDNorm<<Ns, Ds>>(In : real; Num : real^Ns; Den : real^Ds)
    returns (Out : real)
  var
    _L7 : real^(Ns - 1);
    _L68 : real;
    _L71 : real^Ds;
    _L73 : real^Ds;
    _L10 : real^(Ns - 1);
    _L16 : real^Ds;
    _L118 : real;
    _L120 : real^(Ns - 1 + (Ds - Ns + 1));
    _L124 : real^(Ds - Ns + 1);
    _L126 : real;
    _L128 : real;
    _L129 : real^Ds;
    _L130 : real^Ns;
    _L133 : real^Ds;
    _L136 : real^(Ns - 1 - 1 + 1);
    _L137 : real;
    _L139 : real;
    _L138 : real;
    _L140 : real;
    _L143 : real;
  let
    _L7= _L128^(Ns - 1);
    _L68= (fold #3 SumDelay <<Ds>>)(_L126, _L129);
    Out= _L137;
    _L73= _L137^Ds;
    _L118= 0.0;
    _L120= _L10 @ _L124;
    _L124= _L118^(Ds - Ns + 1);
    _L126= 0.0;
    _L128= In;
    _L129= reverse _L71;
    _L130= Num;
    _L133= Den;
    _L136= _L130 [1 .. Ns - 1];
    _L137= _L140 + _L143;
    _L138= In;
    _L139= Num[0];
    _L140= _L138 * _L139;
    _L143= fby(_L68; 1; 0.0);
    _L10= (map #17 $*$ <<Ns - 1>>)(_L7, _L136);
    _L16= (map #20 $*$ <<Ds>>)(_L133, _L73);
    _L71= (map #22 $-$ <<Ds>>)(_L120, _L16);
  tel;
  
  node FilterNNNorm<<Ns>>(In : real; Num : real^Ns; Den : real^(Ns - 1))
    returns (Out : real)
  var
    _L3 : real;
    _L7 : real^(Ns - 1);
    _L68 : real;
    _L71 : real^(Ns - 1);
    _L73 : real^(Ns - 1);
    _L10 : real^(Ns - 1);
    _L16 : real^(Ns - 1);
    _L126 : real;
    _L128 : real^(Ns - 1);
    _L129 : real^Ns;
    _L132 : real^(Ns - 1);
    _L134 : real^(Ns - 1 - 1 + 1);
    _L135 : real;
    _L141 : real;
    _L140 : real;
    _L142 : real;
    _L143 : real;
  let
    _L3= In;
    _L7= _L3^(Ns - 1);
    _L68= (fold #3 SumDelay <<Ns - 1>>)(_L126, _L128);
    Out= _L143;
    _L73= _L143^(Ns - 1);
    _L126= 0.0;
    _L128= reverse _L71;
    _L129= Num;
    _L132= Den;
    _L134= _L129 [1 .. Ns - 1];
    _L135= fby(_L68; 1; 0.0);
    _L140= Num[0];
    _L141= In;
    _L142= _L141 * _L140;
    _L143= _L142 + _L135;
    _L10= (map #15 $*$ <<Ns - 1>>)(_L7, _L134);
    _L16= (map #18 $*$ <<Ns - 1>>)(_L132, _L73);
    _L71= (map #21 $-$ <<Ns - 1>>)(_L10, _L16);
  tel;
  
end;

/* $**************  KCG Version 6.0.0b (build i19) **************
** -
** Generation date: 2009-02-24T01:42:07
*************************************************************$ */
/* $**************  KCG Version 6.0.0b (build i19) **************
** Command: x2s C:/Programme/Esterel Technologies/Scade60d/libraries/libmath/math.xscade
** Generation date: 2009-02-24T01:42:08
*************************************************************$ */

/* xscade source: C:/Programme/Esterel Technologies/Scade60d/libraries/libmath/math.xscade */
package math
  function Abs(A_Input : 'T) returns (A_Output : 'T) where 'T numeric
  var
    _L1 : bool;
    _L2 : 'T;
    _L3 : 'T;
    _L5 : 'T;
    _L8 : 'T;
  let
    _L1= _L8 <= _L5;
    _L2= if _L1 then _L5 else _L3;
    _L3= -_L5;
    _L5= A_Input;
    A_Output= _L2;
    _L8= (0 : 'T);
  tel;
  
  function BoolToInt(BTI_Input : bool) returns (BTI_Output : int)
  var
    _L1 : bool;
    _L2 : int;
    _L3 : int;
    _L4 : int;
  let
    _L1= BTI_Input;
    BTI_Output= _L2;
    _L2= if _L1 then _L3 else _L4;
    _L3= 1;
    _L4= 0;
  tel;
  
  function BoolToReal(BTR_Input : bool) returns (BTR_Output : real)
  var
    _L10 : real;
    _L5 : bool;
    _L6 : real;
    _L9 : real;
  let
    _L5= BTR_Input;
    BTR_Output= _L6;
    _L6= if _L5 then _L10 else _L9;
    _L9= 0.0;
    _L10= 1.0;
  tel;
  
  function InRangeInIn(IRII_Input : 'T; A : 'T; B : 'T)
    returns (IRII_Output : bool)
    where 'T numeric
  var
    _L10 : 'T;
    _L12 : bool;
    _L13 : 'T;
    _L2 : bool;
    _L4 : bool;
    _L8 : 'T;
  let
    _L2= _L12 and _L4;
    _L4= _L8 >= _L10;
    _L8= IRII_Input;
    IRII_Output= _L2;
    _L10= A;
    _L12= _L13 >= _L8;
    _L13= B;
  tel;
  
  function InRangeInOut(IRIO_Input : 'T; A : 'T; B : 'T)
    returns (IRIO_Output : bool)
    where 'T numeric
  var
    _L3 : 'T;
    _L14 : bool;
    _L13 : 'T;
    _L12 : 'T;
    _L10 : bool;
    _L17 : bool;
  let
    _L3= IRIO_Input;
    _L14= _L3 >= _L12;
    _L13= B;
    _L12= A;
    _L10= _L17 and _L14;
    IRIO_Output= _L10;
    _L17= _L13 > _L3;
  tel;
  
  function InRangeOutIn(IROI_Input : 'T; A : 'T; B : 'T)
    returns (IROI_Output : bool)
    where 'T numeric
  var
    _L3 : 'T;
    _L7 : bool;
    _L29 : bool;
    _L24 : 'T;
    _L23 : 'T;
    _L30 : bool;
  let
    _L3= IROI_Input;
    IROI_Output= _L29;
    _L7= _L3 > _L23;
    _L29= _L30 and _L7;
    _L24= B;
    _L23= A;
    _L30= _L24 >= _L3;
  tel;
  
  function InRangeOutOut(IROO_Input : 'T; A : 'T; B : 'T)
    returns (IROO_Output : bool)
    where 'T numeric
  var
    _L3 : 'T;
    _L29 : bool;
    _L28 : bool;
    _L24 : 'T;
    _L23 : 'T;
    _L30 : bool;
  let
    _L3= IROO_Input;
    IROO_Output= _L29;
    _L29= _L28 and _L30;
    _L28= _L24 > _L3;
    _L24= B;
    _L23= A;
    _L30= _L3 > _L23;
  tel;
  
  function Max(I1 : 'T; I2 : 'T) returns (Ma_Output : 'T) where 'T numeric
  var
    _L1 : 'T;
    _L2 : 'T;
    _L3 : bool;
    _L4 : 'T;
  let
    _L1= I1;
    _L2= I2;
    _L3= _L1 >= _L2;
    _L4= if _L3 then _L1 else _L2;
    Ma_Output= _L4;
  tel;
  
  function Max3(I1 : 'T; I2 : 'T; I3 : 'T)
    returns (Ma3_Output : 'T)
    where 'T numeric
  var
    _L1 : 'T;
    _L2 : 'T;
    _L3 : 'T;
    _L4 : bool;
    _L5 : bool;
    _L6 : bool;
    _L7 : bool;
    _L8 : 'T;
    _L9 : 'T;
  let
    _L1= I1;
    _L2= I2;
    _L3= I3;
    _L4= _L1 >= _L2;
    _L5= _L1 >= _L3;
    _L6= _L2 >= _L3;
    _L7= _L4 and _L5;
    _L8= if _L7 then _L1 else _L9;
    _L9= if _L6 then _L2 else _L3;
    Ma3_Output= _L8;
  tel;
  
  function Mean3(I1 : 'T; I2 : 'T; I3 : 'T)
    returns (Me3_Output : real)
    where 'T numeric
  var
    _L1 : 'T;
    _L2 : 'T;
    _L3 : 'T;
    _L4 : 'T;
    _L5 : real;
    _L6 : 'T;
  let
    _L1= I1;
    _L2= I2;
    _L3= I3;
    _L4= _L1 + _L2 + _L3;
    _L5= _L4 / _L6;
    _L6= (3 : 'T);
    Me3_Output= _L5;
  tel;
  
  function Min(I1 : 'T; I2 : 'T) returns (Mi_Output : 'T) where 'T numeric
  var
    _L21 : 'T;
    _L22 : 'T;
    _L24 : 'T;
    _L25 : bool;
  let
    _L21= I1;
    _L22= I2;
    _L24= if _L25 then _L21 else _L22;
    _L25= _L21 <= _L22;
    Mi_Output= _L24;
  tel;
  
  function Min3(I1 : 'T; I2 : 'T; I3 : 'T)
    returns (Mi3_Output : 'T)
    where 'T numeric
  var
    _L1 : bool;
    _L2 : bool;
    _L3 : bool;
    _L4 : 'T;
    _L5 : 'T;
    _L6 : 'T;
    _L7 : bool;
    _L8 : 'T;
    _L9 : 'T;
  let
    _L1= _L4 <= _L5;
    _L2= _L4 <= _L6;
    _L3= _L5 <= _L6;
    _L4= I1;
    _L5= I2;
    _L6= I3;
    _L7= _L1 and _L2;
    _L8= if _L7 then _L4 else _L9;
    _L9= if _L3 then _L5 else _L6;
    Mi3_Output= _L8;
  tel;
  
  function Sign(S_Input : real) returns (S_Ouput : real)
  var
    _L1 : real;
    _L15 : real;
    _L16 : real;
    _L4 : bool;
    _L5 : bool;
    _L7 : real;
    _L8 : real;
    _L20 : real;
    _L21 : real;
  let
    _L1= S_Input;
    _L4= _L1 > _L15;
    _L5= _L15 = _L1;
    S_Ouput= _L7;
    _L7= if _L4 then _L16 else _L8;
    _L8= if _L5 then _L21 else _L20;
    _L15= 0.0;
    _L16= 1.0;
    _L20= -1.0;
    _L21= 0.0;
  tel;
  
  function Mean(I1 : 'T; I2 : 'T) returns (Me_output : real) where 'T numeric
  var
    _L1 : 'T;
    _L2 : 'T;
    _L3 : real;
    _L4 : 'T;
    _L5 : 'T;
  let
    _L1= I1;
    _L2= I2;
    _L3= _L4 / _L5;
    _L4= _L1 + _L2;
    _L5= (2 : 'T);
    Me_output= _L3;
  tel;
  
  function Round(R_Input : real) returns (R_Output : int)
  var
    _L2 : bool;
    _L4 : real;
    _L5 : real;
    _L7 : real;
    _L8 : int;
    _L9 : real;
    _L10 : int;
    _L12 : real;
    _L17 : real;
    _L22 : real;
    _L21 : real;
    _L20 : real;
    _L19 : real;
    _L18 : bool;
    _L25 : real;
    _L26 : real;
    _L27 : bool;
    _L34 : real;
  let
    _L2= _L12 >= _L17;
    _L4= if _L2 then _L5 else _L34;
    _L5= _L34 + _L7;
    _L7= 1.0;
    _L8= int _L25;
    R_Output= _L8;
    _L9= R_Input;
    _L10= int _L9;
    _L12= _L9 - _L34;
    _L17= 0.5;
    _L22= _L34 - _L21;
    _L21= 1.0;
    _L20= -0.5;
    _L19= if _L18 then _L22 else _L34;
    _L18= _L12 <= _L20;
    _L25= if _L27 then _L19 else _L4;
    _L26= 0.0;
    _L27= _L12 < _L26;
    _L34= real _L10;
  tel;
  
  function OctetToInt(
      b1 : bool;
      b2 : bool;
      b3 : bool;
      b4 : bool;
      b5 : bool;
      b6 : bool;
      b7 : bool;
      b8 : bool)
    returns (OTI_Output : int)
  var
    _L1 : bool;
    _L2 : bool;
    _L3 : bool;
    _L4 : bool;
    _L5 : int;
    _L6 : int;
    _L7 : int;
    _L10 : int;
    _L9 : int;
    _L8 : int;
    _L13 : int;
    _L12 : int;
    _L11 : int;
    _L16 : int;
    _L15 : int;
    _L14 : int;
    _L17 : int;
    _L18 : int;
    _L19 : int;
    _L23 : int;
    _L22 : int;
    _L21 : int;
    _L20 : int;
    _L31 : int;
    _L30 : int;
    _L29 : int;
    _L28 : int;
    _L32 : int;
    _L33 : bool;
    _L34 : bool;
    _L35 : bool;
    _L36 : bool;
    _L40 : int;
    _L39 : int;
    _L38 : int;
    _L37 : int;
    _L43 : int;
    _L42 : int;
    _L41 : int;
  let
    _L1= b1;
    _L2= b2;
    _L3= b3;
    _L4= b4;
    _L5= if _L1 then _L6 else _L7;
    _L6= 1;
    _L7= 0;
    _L10= 2;
    _L9= 0;
    _L8= if _L2 then _L10 else _L9;
    _L13= 4;
    _L12= 0;
    _L11= if _L3 then _L13 else _L12;
    _L16= 8;
    _L15= 0;
    _L14= if _L4 then _L16 else _L15;
    _L17= _L11 + _L32;
    _L18= _L8 + _L17;
    _L19= _L5 + _L18;
    OTI_Output= _L19;
    _L23= 0;
    _L22= 16;
    _L21= _L20 + _L29;
    _L20= if _L33 then _L22 else _L23;
    _L31= 0;
    _L30= 32;
    _L29= _L28 + _L40;
    _L28= if _L34 then _L30 else _L31;
    _L32= _L14 + _L21;
    _L33= b5;
    _L34= b6;
    _L35= b7;
    _L36= b8;
    _L40= _L37 + _L43;
    _L39= 64;
    _L38= 0;
    _L37= if _L35 then _L39 else _L38;
    _L43= if _L36 then _L42 else _L41;
    _L42= 128;
    _L41= 0;
  tel;
  
  function RoundCeil(RC_Input : real) returns (RC_Output : int)
  var
    _L1 : real;
    _L2 : bool;
    _L3 : real;
    _L4 : int;
    _L6 : int;
    _L7 : real;
    _L9 : int;
    _L10 : real;
    _L11 : int;
    _L12 : real;
    _L14 : bool;
  let
    _L1= RC_Input;
    _L2= _L1 <= _L3;
    _L3= 0.0;
    _L4= if _L2 then _L6 else _L9;
    _L6= int _L1;
    _L7= real _L6;
    _L9= if _L14 then _L6 else _L11;
    _L10= _L1 + _L12;
    _L11= int _L10;
    _L12= 1.0;
    RC_Output= _L4;
    _L14= _L7 = _L1;
  tel;
  
  function RoundFloor(RF_Input : real) returns (RF_Output : int)
  var
    _L1 : real;
    _L24 : bool;
    _L25 : real;
    _L26 : int;
    _L30 : real;
    _L31 : real;
    _L32 : int;
    _L33 : int;
    _L38 : int;
    _L41 : real;
    _L43 : bool;
  let
    _L1= RF_Input;
    RF_Output= _L26;
    _L24= _L1 >= _L25;
    _L25= 0.0;
    _L26= if _L24 then _L33 else _L38;
    _L30= _L1 - _L31;
    _L31= 1.0;
    _L32= int _L30;
    _L33= int _L1;
    _L38= if _L43 then _L33 else _L32;
    _L41= real _L33;
    _L43= _L41 = _L1;
  tel;
  
  function IntToBool(ITB_Input : int) returns (ITB_Output : bool)
  var
    _L1 : int;
    _L2 : bool;
    _L3 : int;
  let
    _L1= ITB_Input;
    _L2= _L1 <> _L3;
    ITB_Output= _L2;
    _L3= 0;
  tel;
  
  function RealToBool(RTB_Input : real) returns (RTB_Output : bool)
  var
    _L3 : bool;
    _L2 : real;
    _L1 : real;
  let
    _L3= _L2 <> _L1;
    _L2= RTB_Input;
    _L1= 0.0;
    RTB_Output= _L3;
  tel;
  
end;

/* $**************  KCG Version 6.0.0b (build i19) **************
** -
** Generation date: 2009-02-24T01:42:08
*************************************************************$ */
/* $**************  KCG Version 6.0.0b (build i19) **************
** Command: x2s C:/Programme/Esterel Technologies/Scade60d/libraries/libmath/vect.xscade
** Generation date: 2009-02-24T01:42:08
*************************************************************$ */

/* xscade source: C:/Programme/Esterel Technologies/Scade60d/libraries/libmath/vect.xscade */
package vect
  function ScalProd<<n>>(V : 'T^n; W : 'T^n) returns (SP : 'T) where 'T numeric
  var
    _L2 : 'T^n;
    _L3 : 'T^n;
    _L4 : 'T;
    _L6 : 'T;
    _L7 : 'T^n;
  let
    _L2= V;
    _L3= W;
    SP= _L6;
    _L4= (0 : 'T);
    _L6= (fold #2 $+$ <<n>>)(_L4, _L7);
    _L7= (map #1 $*$ <<n>>)(_L2, _L3);
  tel;
  
  function MatVectProd<<m, n>>(A : 'T^n^m; V : 'T^n)
    returns (R : 'T^m)
    where 'T numeric
  var
    _L1 : 'T^n^m;
    _L2 : 'T^n;
    _L4 : 'T^n^m;
    _L7 : 'T^m;
  let
    _L1= A;
    _L2= V;
    R= _L7;
    _L7= (map (#1 ScalProd <<n>>) <<m>>)(_L1, _L4);
    _L4= _L2^m;
  tel;
  
  function MatProd<<m, n, p>>(A : 'T^n^m; B : 'T^p^n)
    returns (C : 'T^p^m)
    where 'T numeric
  var
    _L1 : 'T^n^m;
    _L2 : 'T^p^n;
    _L4 : 'T^p^n^m;
    _L7 : 'T^p^m;
  let
    _L1= A;
    _L2= B;
    C= _L7;
    _L4= _L2^m;
    _L7= (map (#1 VectMatProd <<n, p>>) <<m>>)(_L1, _L4);
  tel;
  
  function VectMatProd<<m, n>>(V : 'T^m; A : 'T^n^m)
    returns (R : 'T^n)
    where 'T numeric
  var
    _L1 : 'T^n^m;
    _L2 : 'T^m;
    _L4 : 'T^m^n;
    _L5 : 'T^m^n;
    _L8 : 'T^n;
  let
    _L1= A;
    _L2= V;
    R= _L8;
    _L8= (map (#1 ScalProd <<m>>) <<n>>)(_L5, _L4);
    _L4= _L2^n;
    _L5= transpose (_L1; 1; 2);
  tel;
  
end;

/* $**************  KCG Version 6.0.0b (build i19) **************
** -
** Generation date: 2009-02-24T01:42:08
*************************************************************$ */
/* $**************  KCG Version 6.0.0b (build i19) **************
** Command: x2s C:/Programme/Esterel Technologies/Scade60d/libraries/libmathext/mathext.xscade
** Generation date: 2009-02-24T01:42:08
*************************************************************$ */

/* xscade source: C:/Programme/Esterel Technologies/Scade60d/libraries/libmathext/mathext.xscade */
package mathext
  function imported #pragma kcg 
							name AcosR_mathext
						 #end AcosR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name AcoshR_mathext
						 #end AcoshR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name AsinR_mathext
						 #end AsinR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name AsinhR_mathext
						 #end AsinhR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name Atan2R_mathext
						 #end Atan2R(
      Input1 : real;
      Input2 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name AtanR_mathext
						 #end AtanR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name AtanhR_mathext
						 #end AtanhR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name CosR_mathext
						 #end CosR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name CoshR_mathext
						 #end CoshR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name ExpR_mathext
						 #end ExpR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name LnR_mathext
						 #end LnR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name LogR_mathext
						 #end LogR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name PowerRR_mathext
						 #end PowerRR(
      P_Input : real;
      Power : real)
    returns (P_Output : real);
  
  function imported #pragma kcg 
							name SinR_mathext
						 #end SinR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name SinhR_mathext
						 #end SinhR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name SqrtR_mathext
						 #end SqrtR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name TanR_mathext
						 #end TanR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name TanhR_mathext
						 #end TanhR(
      Input1 : real)
    returns (Output1 : real);
  
  function imported #pragma kcg 
							name TenPowR_mathext
						 #end TenPowR(
      Input1 : real)
    returns (Output1 : real);
  
  function Square(Square_In : 'T) returns (Square_Out : 'T) where 'T numeric
  var
    _L1 : 'T;
    _L2 : 'T;
  let
    _L1= Square_In;
    _L2= _L1 * _L1;
    Square_Out= _L2;
  tel;
  
  function Inv(Inv_In : 'T) returns (Inv_Out : real) where 'T numeric
  var
    _L1 : 'T;
    _L2 : 'T;
    _L3 : real;
  let
    _L1= Inv_In;
    _L2= (1 : 'T);
    _L3= _L2 / _L1;
    Inv_Out= _L3;
  tel;
  
  function HypotR(HypotR_I1 : real; HypotR_I2 : real) returns (HypotR_O : real)
  var
    _L1 : real;
    _L2 : real;
    _L3 : real;
    _L4 : real;
    _L5 : real;
    _L6 : real;
  let
    _L1= HypotR_I2;
    _L2= HypotR_I1;
    _L3= _L2 * _L2;
    _L4= _L1 * _L1;
    _L5= _L3 + _L4;
    _L6= #4 SqrtR(_L5);
    HypotR_O= _L6;
  tel;
  
  function imported #pragma kcg 
							name PowerI_mathext
						 #end PowerI(
      P_Input : int;
      Power : int)
    returns (P_Output : int);
  
  function imported #pragma kcg 
							name PowerR_mathext
						 #end PowerR(
      P_Input : real;
      Power : int)
    returns (P_Output : real);
  
end;

/* $**************  KCG Version 6.0.0b (build i19) **************
** -
** Generation date: 2009-02-24T01:42:08
*************************************************************$ */
/* $**************  KCG Version 6.0.0b (build i19) **************
** Command: x2s C:/Programme/Esterel Technologies/Scade60d/libraries/libpwlinear/pwlinear.xscade
** Generation date: 2009-02-24T01:42:08
*************************************************************$ */

/* xscade source: C:/Programme/Esterel Technologies/Scade60d/libraries/libpwlinear/pwlinear.xscade */
package pwlinear
  function DeadBandSymmetrical(DBS_Input : 'T; Tolerance : 'T)
    returns (DBS_Output : 'T)
    where 'T numeric
  var
    _L26 : 'T;
    _L25 : bool;
    _L22 : 'T;
    _L20 : 'T;
    _L19 : 'T;
    _L18 : bool;
    _L17 : 'T;
    _L30 : 'T;
    _L31 : 'T;
    _L34 : 'T;
  let
    _L17= if _L25 then _L20 else _L26;
    _L18= _L34 >= _L30;
    _L19= _L34 - _L30;
    _L20= _L30 + _L34;
    _L22= (0 : 'T);
    _L25= _L31 >= _L34;
    _L26= if _L18 then _L19 else _L22;
    _L30= Tolerance;
    _L31= -_L30;
    DBS_Output= _L17;
    _L34= DBS_Input;
  tel;
  
  function DeadBandUnSymmetrical(DBUS_Input : 'T; LowTol : 'T; HiTol : 'T)
    returns (DBUS_Output : 'T)
    where 'T numeric
  var
    _L10 : 'T;
    _L8 : 'T;
    _L7 : 'T;
    _L5 : 'T;
    _L3 : bool;
    _L2 : bool;
    _L1 : 'T;
    _L11 : 'T;
    _L13 : 'T;
    _L15 : 'T;
  let
    _L10= DBUS_Input;
    _L8= (0 : 'T);
    _L7= HiTol;
    DBUS_Output= _L1;
    _L5= if _L3 then _L13 else _L8;
    _L3= _L10 >= _L7;
    _L2= _L11 >= _L10;
    _L1= if _L2 then _L15 else _L5;
    _L11= LowTol;
    _L13= _L10 - _L7;
    _L15= _L10 - _L11;
  tel;
  
  function LimiterUnSymmetrical(LUS_Input : 'T; LowLimit : 'T; HighLimit : 'T)
    returns (LUS_Output : 'T)
    where 'T numeric
  var
    _L1 : bool;
    _L11 : 'T;
    _L13 : 'T;
    _L15 : 'T;
    _L2 : bool;
    _L3 : 'T;
    _L9 : 'T;
  let
    _L1= _L3 >= _L15;
    _L2= _L3 <= _L13;
    _L3= LUS_Input;
    _L9= if _L1 then _L15 else _L11;
    _L11= if _L2 then _L13 else _L3;
    _L13= LowLimit;
    _L15= HighLimit;
    LUS_Output= _L9;
  tel;
  
  function PreLoadSymmetrical(PLS_Input : 'T; Offset : 'T; Slope : 'T)
    returns (PLS_Output : 'T)
    where 'T numeric
  var
    _L1 : bool;
    _L10 : 'T;
    _L2 : 'T;
    _L4 : 'T;
    _L5 : 'T;
    _L6 : 'T;
    _L8 : 'T;
    _L9 : 'T;
    _L12 : 'T;
  let
    _L1= _L6 > _L12;
    _L2= if _L1 then _L10 else _L5;
    _L4= _L8 + _L2;
    _L5= -_L10;
    _L6= PLS_Input;
    _L8= _L6 * _L9;
    _L9= Slope;
    _L10= Offset;
    PLS_Output= _L4;
    _L12= (0 : 'T);
  tel;
  
  function PreLoadUnSymmetrical(
      PLUS_Input : 'T;
      NegOffset : 'T;
      PosOffset : 'T;
      Slope : 'T)
    returns (PLUS_Output : 'T)
    where 'T numeric
  var
    _L1 : 'T;
    _L12 : 'T;
    _L14 : 'T;
    _L15 : 'T;
    _L4 : bool;
    _L5 : 'T;
    _L7 : 'T;
    _L9 : 'T;
    _L16 : 'T;
  let
    _L1= PLUS_Input;
    PLUS_Output= _L7;
    _L4= _L1 < _L16;
    _L5= if _L4 then _L12 else _L15;
    _L7= _L9 + _L5;
    _L9= _L1 * _L14;
    _L12= NegOffset;
    _L14= Slope;
    _L15= PosOffset;
    _L16= (0 : 'T);
  tel;
  
  node ClockCounter(Reset : bool) returns (Count : int)
  var
    _L1 : int;
    _L2 : int;
    _L6 : int;
    _L7 : int;
    _L8 : int;
    _L11 : int;
    _L13 : bool;
    _L16 : int;
  let
    _L2= if _L13 then _L16 else _L7;
    Count= _L1;
    _L6= pre _L1;
    _L7= _L8 + _L6;
    _L8= 1;
    _L1= _L11 -> _L2;
    _L11= 0;
    _L13= Reset;
    _L16= 0;
  tel;
  
  function Quantizer(Q_Input : real; Interval : real) returns (Q_Output : real)
  var
    _L8 : real;
    _L11 : real;
    _L12 : real;
    _L13 : real;
    _L142 : real;
    _L140 : bool;
    _L139 : real;
    _L138 : real;
    _L137 : real;
    _L136 : real;
    _L135 : real;
    _L134 : real;
    _L133 : int;
    _L130 : real;
    _L129 : bool;
    _L128 : real;
    _L127 : real;
    _L126 : real;
    _L125 : bool;
    _L124 : real;
  let
    _L8= Q_Input;
    Q_Output= _L13;
    _L11= Interval;
    _L12= _L8 / _L11;
    _L13= _L136 * _L11;
    _L142= _L12 - _L124;
    _L140= _L142 <= _L137;
    _L139= _L124 - _L126;
    _L138= 1.0;
    _L137= -0.5;
    _L136= if _L125 then _L134 else _L127;
    _L135= _L124 + _L138;
    _L134= if _L140 then _L139 else _L124;
    _L133= int _L12;
    _L130= 0.0;
    _L129= _L142 >= _L128;
    _L128= 0.5;
    _L127= if _L129 then _L135 else _L124;
    _L126= 1.0;
    _L125= _L142 < _L130;
    _L124= real _L133;
  tel;
  
  node RateLimiter(
      RL_Input : real;
      Rising : real;
      Falling : real;
      deltaT : real)
    returns (RL_Output : real)
  var
    _L1 : real;
    _L6 : real;
    _L7 : real;
    _L8 : bool;
    _L9 : real;
    _L10 : real;
    _L12 : bool;
    _L13 : real;
    _L14 : real;
    _L38 : real;
    _L40 : real;
    _L41 : real;
    _L42 : real;
    _L46 : real;
    _L47 : real;
  let
    _L1= RL_Input;
    RL_Output= _L9;
    _L6= Rising;
    _L7= Falling;
    _L8= _L38 < _L7;
    _L9= if _L8 then _L10 else _L13;
    _L12= _L38 > _L6;
    _L13= if _L12 then _L14 else _L1;
    _L10= _L46 + _L41;
    _L14= _L46 + _L42;
    _L38= _L47 / _L40;
    _L40= deltaT;
    _L41= _L7 * _L40;
    _L42= _L6 * _L40;
    _L46= fby(_L9; 1; _L1);
    _L47= _L1 - _L46;
  tel;
  
  node Counter(Incr : 'T; Reset : bool) returns (Count : 'T) where 'T numeric
  var
    _L2 : 'T;
    _L3 : bool;
    _L4 : 'T;
    _L9 : 'T;
    _L18 : 'T;
    _L46 : 'T;
  let
    _L2= Incr;
    _L3= Reset;
    Count= _L9;
    _L4= if _L3 then _L46 else _L18;
    _L9= _L4 + _L2;
    _L18= fby(_L9; 1; _L46);
    _L46= (0 : 'T);
  tel;
  
  node FallingHysteresis(LL : 'T; FH_Input : 'T; UL : 'T; Init : bool)
    returns (FH_Output : bool)
    where 'T numeric
  var
    _L10 : bool;
    _L9 : bool;
    _L6 : bool;
    _L5 : bool;
    _L4 : bool;
    _L3 : 'T;
    _L2 : 'T;
    _L1 : 'T;
    _L16 : bool;
    _L17 : bool;
  let
    _L10= _L2 < _L3;
    _L9= _L2 <= _L1;
    _L6= pre _L17;
    _L5= _L4 -> _L6;
    _L4= Init;
    FH_Output= _L17;
    _L3= LL;
    _L2= FH_Input;
    _L1= UL;
    _L16= _L9 and _L5;
    _L17= _L10 or _L16;
  tel;
  
  node RisingHysteresis(UL : 'T; A : 'T; LL : 'T; Init : bool)
    returns (S : bool)
    where 'T numeric
  var
    _L6 : 'T;
    _L7 : 'T;
    _L8 : 'T;
    _L9 : bool;
    _L10 : bool;
    _L11 : bool;
    _L15 : bool;
    _L16 : bool;
    _L22 : bool;
    _L24 : bool;
  let
    _L6= UL;
    _L7= A;
    _L8= LL;
    S= _L24;
    _L9= Init;
    _L10= _L9 -> _L11;
    _L11= pre _L24;
    _L15= _L7 > _L6;
    _L16= _L7 >= _L8;
    _L22= _L16 and _L10;
    _L24= _L15 or _L22;
  tel;
  
  function LimiterSymmetrical(LS_Input : 'T; BandOrigin : 'T; Tolerance : 'T)
    returns (LS_Output : 'T)
    where 'T numeric
  var
    Upper_limit : 'T;
    lower_limit : 'T;
    _L1 : bool;
    _L10 : 'T;
    _L2 : bool;
    _L5 : 'T;
    _L7 : 'T;
    _L8 : 'T;
    _L9 : 'T;
  let
    _L1= _L8 >= Upper_limit;
    _L2= _L8 <= lower_limit;
    lower_limit= _L9 - _L10;
    Upper_limit= _L10 + _L9;
    _L5= if _L1 then Upper_limit else _L7;
    _L7= if _L2 then lower_limit else _L8;
    _L8= LS_Input;
    LS_Output= _L5;
    _L9= BandOrigin;
    _L10= Tolerance;
  tel;
  
end;

/* $**************  KCG Version 6.0.0b (build i19) **************
** -
** Generation date: 2009-02-24T01:42:08
*************************************************************$ */
/* $**************  KCG Version 6.0.0b (build i19) **************
** Command: x2s C:/Programme/Esterel Technologies/Scade60d/libraries/libpwlinear/lut.xscade
** Generation date: 2009-02-24T01:42:08
*************************************************************$ */

/* xscade source: C:/Programme/Esterel Technologies/Scade60d/libraries/libpwlinear/lut.xscade */
package lut
  type LutIndex = { k : int, f : real };
  
  type LutType22 = { i : int, x1 : real, x2 : real };
  
  function private CalculateF(InX : real; X1 : real; X2 : real)
    returns (F : real)
  var
    _L3 : real;
    _L2 : real;
    _L1 : real;
    _L4 : real;
    _L5 : real;
    _L6 : real;
  let
    _L1= _L4 - _L5;
    _L2= _L1 / _L3;
    _L4= InX;
    _L5= X1;
    _L6= X2;
    F= _L2;
    _L3= _L6 - _L5;
  tel;
  
  function Interp1D<<Xs>>(IdxX : LutIndex; Y : real^Xs) returns (OutY : real)
  var
    Idx : int;
    _L6 : real;
    _L5 : int;
    _L15 : real;
    _L2 : LutIndex;
    _L16 : real;
    _L20 : real;
    _L21 : real^Xs;
    _L23 : real;
    _L25 : real;
    _L26 : int;
    _L27 : int;
    _L28 : int;
    _L29 : int;
  let
    _L5, _L6= (flatten LutIndex)(_L2);
    _L15= _L6 * _L20;
    OutY= _L16;
    _L2= IdxX;
    _L16= _L15 + _L25;
    Idx= _L5;
    _L20= _L23 - _L25;
    _L21= Y;
    _L25= (_L21.[_L26] default 0.0);
    _L26= Idx;
    _L27= Idx;
    _L28= _L29 + _L27;
    _L29= 1;
    _L23= (_L21.[_L28] default 0.0);
  tel;
  
  function private SearchIdx(
      i : int;
      Acc : LutType22;
      InX : real;
      Xi1 : real;
      Xi2 : real)
    returns (Out : LutType22)
  var
    _L8 : LutType22;
    _L40 : real;
    _L74 : real;
    _L77 : bool;
    _L79 : LutType22;
    _L84 : LutType22;
    _L85 : real;
    _L86 : int;
    _L87 : real;
  let
    _L8= Acc;
    _L40= InX;
    _L74= Xi1;
    Out= _L84;
    _L79= (make LutType22)(_L86, _L87, _L85);
    _L84= if _L77 then _L8 else _L79;
    _L85= Xi2;
    _L77= _L40 < _L74;
    _L86= i;
    _L87= Xi1;
  tel;
  
  function private PreLutIn<<Xs>>(InX : real; X : real^Xs)
    returns (OutZ : LutIndex)
  var
    _L1 : real;
    _L6 : int;
    _L18 : real^(Xs - 1);
    _L2 : real^(Xs - 2 - 0 + 1);
    _L22 : real^(Xs - 1 - 1 + 1);
    _L24 : LutType22;
    _L32 : real;
    _L31 : real;
    _L30 : int;
    _L33 : LutIndex;
    _L34 : real;
    _L35 : real;
    _L36 : LutType22;
    _L40 : real;
    _L41 : real;
    _L42 : real^Xs;
    _L43 : real^Xs;
  let
    _L1= InX;
    _L2= _L42 [0 .. Xs - 2];
    _L6= 0;
    OutZ= _L33;
    _L18= _L1^(Xs - 1);
    _L22= _L43 [1 .. Xs - 1];
    _L30, _L31, _L32= (flatten LutType22)(_L24);
    _L33= (make LutIndex)(_L30, _L34);
    _L34= #10 CalculateF(_L35, _L31, _L32);
    _L35= InX;
    _L36= (make LutType22)(_L6, _L40, _L41);
    _L24= (foldi #13 SearchIdx <<Xs - 1>>)(_L36, _L18, _L2, _L22);
    _L40= X[0];
    _L41= X[1];
    _L42= X;
    _L43= X;
  tel;
  
  function PreLut<<Xs>>(InX : real; X : real^Xs; Extrapol : bool)
    returns (OutIndex : LutIndex)
  var
    bLow : bool;
    bHigh : bool;
    _L1 : real;
    _L17 : bool;
    _L42 : LutIndex;
    _L43 : real;
    _L45 : bool;
    _L48 : LutIndex;
    _L49 : int;
    _L50 : real;
    _L51 : real;
    _L56 : bool;
    _L73 : real;
    _L71 : int;
    _L68 : real;
    _L75 : LutIndex;
    _L86 : LutIndex;
    _L87 : int;
    _L88 : real;
    _L89 : bool;
    _L93 : int;
    _L92 : real;
    _L94 : LutIndex;
    _L98 : LutIndex;
    _L100 : LutIndex;
    _L101 : bool;
    _L102 : real;
    _L103 : real;
    _L104 : real;
    _L105 : real;
    _L106 : real;
    _L107 : real;
    _L112 : real^Xs;
    _L162 : LutIndex;
    _L163 : LutIndex;
  let
    _L1= InX;
    bLow= _L17;
    bHigh= _L101;
    _L43= InX;
    _L45= bLow;
    _L48= (make LutIndex)(_L49, _L50);
    _L49= 0;
    _L50= #3 CalculateF(_L51, _L104, _L105);
    _L51= InX;
    _L56= bHigh;
    _L68= #4 CalculateF(_L73, _L106, _L107);
    _L71= Xs - 2;
    _L73= InX;
    _L75= (make LutIndex)(_L71, _L68);
    _L86= (make LutIndex)(_L87, _L88);
    _L87= 0;
    _L88= 0.0;
    _L89= Extrapol;
    _L92= 1.0;
    _L93= Xs - 2;
    OutIndex= _L98;
    _L94= (make LutIndex)(_L93, _L92);
    _L98= if _L45 then _L163 else _L100;
    _L100= if _L56 then _L162 else _L42;
    _L17= _L1 <= _L103;
    _L101= _L102 <= _L1;
    _L42= (#21 PreLutIn <<Xs>>)(_L43, _L112);
    _L102= X[Xs - 1];
    _L103= X[0];
    _L104= X[0];
    _L105= X[1];
    _L106= X[Xs - 2];
    _L107= X[Xs - 1];
    _L112= X;
    _L162= if _L89 then _L75 else _L94;
    _L163= if _L89 then _L48 else _L86;
  tel;
  
  function Lut1D<<Xs>>(InX : real; X : real^Xs; Y : real^Xs; Extrapol : bool)
    returns (OutY : real)
  var
    bLow : bool;
    bHigh : bool;
    _L1 : real;
    _L17 : bool;
    _L45 : bool;
    _L51 : real;
    _L56 : bool;
    _L89 : bool;
    _L98 : real;
    _L100 : real;
    _L101 : bool;
    _L102 : real;
    _L103 : real;
    _L104 : real;
    _L105 : real;
    _L163 : real;
    _L164 : real;
    _L165 : real;
    _L166 : real;
    _L71 : real;
    _L73 : real;
    _L106 : real;
    _L107 : real;
    _L167 : real;
    _L168 : real;
    _L169 : real;
    _L172 : real;
    _L173 : real;
    _L185 : real;
    _L184 : real^(Xs - 2 - 0 + 1);
    _L182 : real;
    _L181 : real^(Xs - 1 - 1 + 1);
    _L177 : real^(Xs - 2 - 0 + 1);
    _L176 : real;
    _L175 : real^(Xs - 1 - 1 + 1);
    _L174 : real^(Xs - 1);
  let
    _L1= InX;
    bLow= _L17;
    bHigh= _L101;
    _L45= bLow;
    _L51= InX;
    _L56= bHigh;
    _L89= Extrapol;
    OutY= _L98;
    _L98= if _L45 then _L173 else _L100;
    _L100= if _L56 then _L172 else _L182;
    _L17= _L1 <= _L103;
    _L101= _L102 <= _L1;
    _L102= X[Xs - 1];
    _L103= X[0];
    _L104= X[0];
    _L105= X[1];
    _L163= Y[0];
    _L164= Y[1];
    _L165= #16 CalculateY(_L51, _L104, _L105, _L163, _L164);
    _L166= Y[0];
    _L71= Y[Xs - 1];
    _L73= InX;
    _L106= X[Xs - 2];
    _L107= X[Xs - 1];
    _L167= #24 CalculateY(_L73, _L106, _L107, _L168, _L169);
    _L168= Y[Xs - 2];
    _L169= Y[Xs - 1];
    _L172= if _L89 then _L167 else _L71;
    _L173= if _L89 then _L165 else _L166;
    _L174= _L185^(Xs - 1);
    _L175= X [1 .. Xs - 1];
    _L176= 0.0;
    _L177= Y [0 .. Xs - 2];
    _L181= Y [1 .. Xs - 1];
    _L182=
      (fold #43 CalculateLut1D <<Xs - 1>>)(_L176, _L174, _L184, _L175, _L177, _L181);
    _L184= X [0 .. Xs - 2];
    _L185= InX;
  tel;
  
  function private CalculateLut1D(
      Acc : real;
      InX : real;
      Xi1 : real;
      Xi2 : real;
      Yi1 : real;
      Yi2 : real)
    returns (Out : real)
  var
    _L8 : real;
    _L40 : real;
    _L74 : real;
    _L77 : bool;
    _L84 : real;
    _L85 : real;
    _L87 : real;
    _L88 : real;
    _L89 : real;
    _L91 : real;
    _L97 : real;
  let
    _L8= Acc;
    _L40= InX;
    _L74= Xi1;
    Out= _L84;
    _L84= if _L77 then _L8 else _L97;
    _L85= Xi2;
    _L77= _L40 < _L74;
    _L87= Xi1;
    _L88= Yi1;
    _L89= Yi2;
    _L91= InX;
    _L97= #5 CalculateY(_L91, _L87, _L85, _L88, _L89);
  tel;
  
  function private CalculateY(
      InX : real;
      Xi1 : real;
      Xi2 : real;
      Yi1 : real;
      Yi2 : real)
    returns (Out : real)
  var
    _L85 : real;
    _L87 : real;
    _L88 : real;
    _L89 : real;
    _L90 : real;
    _L91 : real;
    _L92 : real;
    _L93 : real;
    _L94 : real;
  let
    Out= _L92;
    _L85= Xi2;
    _L87= Xi1;
    _L88= Yi1;
    _L89= Yi2;
    _L90= #1 CalculateF(_L91, _L87, _L85);
    _L91= InX;
    _L92= _L94 + _L88;
    _L94= _L90 * _L93;
    _L93= _L89 - _L88;
  tel;
  
  function Lut2D<<Xs, Ys>>(
      InX : real;
      InY : real;
      X : real^Xs;
      Y : real^Ys;
      Z : real^Ys^Xs;
      Extrapol : bool)
    returns (OutZ : real)
  var
    _L1 : LutIndex;
    _L2 : real;
    _L5 : LutIndex;
    _L6 : real;
    _L9 : real;
  let
    _L1= (#1 PreLut <<Xs>>)(_L2, X, Extrapol);
    _L2= InX;
    _L5= (#2 PreLut <<Ys>>)(_L6, Y, Extrapol);
    _L6= InY;
    OutZ= _L9;
    _L9= (#3 Interp2D <<Xs, Ys>>)(_L1, _L5, Z);
  tel;
  
  function Interp2DFloor<<Xs, Ys>>(
      IdxX : LutIndex;
      IdxY : LutIndex;
      Z : real^Ys^Xs)
    returns (OutZ : real)
  var
    i : int;
    j : int;
    Fx : real;
    Fy : real;
    _L1 : LutIndex;
    _L2 : LutIndex;
    _L6 : real;
    _L5 : int;
    _L7 : int;
    _L8 : real;
    _L11 : real;
    _L16 : real;
    _L21 : real;
    _L18 : real;
    _L45 : real;
    _L47 : real;
    _L48 : real;
    _L49 : real;
    _L50 : real;
    _L53 : bool;
    _L54 : real;
    _L56 : real;
    _L55 : bool;
  let
    _L1= IdxX;
    _L2= IdxY;
    _L5, _L6= (flatten LutIndex)(_L1);
    i= _L5;
    j= _L7;
    _L7, _L8= (flatten LutIndex)(_L2);
    Fx= _L6;
    Fy= _L8;
    _L11= (Z.[i + 1][j] default 0.0);
    _L16= (Z.[i][j] default 0.0);
    _L18= (Z.[i + 1][j + 1] default 0.0);
    _L21= (Z.[i][j + 1] default 0.0);
    OutZ= _L48;
    _L45= Fx;
    _L47= Fy;
    _L48= if _L53 then _L49 else _L50;
    _L49= if _L55 then _L16 else _L11;
    _L50= if _L55 then _L21 else _L18;
    _L54= 1.0;
    _L56= 1.0;
    _L53= _L47 < _L54;
    _L55= _L45 < _L56;
  tel;
  
  function PreLutDirect(
      InX : real;
      Orig : real;
      Step : real;
      NbElem : int;
      Extrapol : bool)
    returns (OutIndex : LutIndex)
  var
    bLow : bool;
    bHigh : bool;
    F0 : real;
    N : int;
    _L1 : real;
    _L17 : bool;
    _L45 : bool;
    _L48 : LutIndex;
    _L49 : int;
    _L56 : bool;
    _L71 : int;
    _L75 : LutIndex;
    _L86 : LutIndex;
    _L87 : int;
    _L88 : real;
    _L89 : bool;
    _L93 : int;
    _L92 : real;
    _L94 : LutIndex;
    _L98 : LutIndex;
    _L100 : LutIndex;
    _L103 : real;
    _L162 : LutIndex;
    _L163 : LutIndex;
    _L165 : real;
    _L164 : real;
    _L166 : real;
    _L167 : real;
    _L169 : real;
    _L171 : int;
    _L173 : int;
    _L174 : bool;
    _L175 : real;
    _L176 : real;
    _L177 : real;
    _L182 : LutIndex;
    _L180 : real;
    _L178 : real;
    _L181 : int;
    _L184 : int;
    _L185 : int;
    _L186 : real;
    _L187 : real;
    _L172 : int;
  let
    _L1= InX;
    bLow= _L17;
    _L45= bLow;
    _L48= (make LutIndex)(_L49, _L175);
    _L49= 0;
    _L56= bHigh;
    _L71= NbElem - 2;
    _L75= (make LutIndex)(_L71, _L177);
    _L86= (make LutIndex)(_L87, _L88);
    _L87= 0;
    _L88= 0.0;
    _L89= Extrapol;
    _L92= 1.0;
    _L93= NbElem - 2;
    OutIndex= _L98;
    _L94= (make LutIndex)(_L93, _L92);
    _L98= if _L45 then _L163 else _L100;
    _L100= if _L56 then _L162 else _L182;
    _L17= _L1 <= _L103;
    _L103= Orig;
    _L162= if _L89 then _L75 else _L94;
    _L163= if _L89 then _L48 else _L86;
    F0= _L167;
    _L164= InX;
    _L165= Orig;
    _L166= _L164 - _L165;
    _L167= _L166 / _L169;
    _L169= Step;
    _L171= int _L167;
    N= _L171;
    _L173= NbElem;
    bHigh= _L174;
    _L175= F0;
    _L176= F0;
    _L182= (make LutIndex)(_L181, _L178);
    _L180= F0;
    _L178= _L180 - _L186;
    _L181= N;
    _L184= N;
    _L177= _L176 - _L187;
    _L185= NbElem - 2;
    _L186= real _L184;
    _L187= real _L185;
    _L174= _L172 > _L173;
    _L172= N;
  tel;
  
  function private CalculateFloor(Acc : real; InX : real; X : real; Y : real)
    returns (Out : real)
  var
    _L8 : real;
    _L40 : real;
    _L77 : bool;
    _L84 : real;
    _L85 : real;
    _L74 : real;
  let
    _L8= Acc;
    _L40= InX;
    Out= _L84;
    _L84= if _L77 then _L8 else _L85;
    _L85= Y;
    _L77= _L40 < _L74;
    _L74= X;
  tel;
  
  function Lut1DCeil<<Xs>>(InX : real; X : real^Xs; Y : real^Xs)
    returns (OutY : real)
  var
    _L174 : real;
    _L177 : real^(Xs - 2 - 0 + 1);
    _L178 : real^(Xs - 1 - 1 + 1);
    _L179 : real;
    _L180 : real^(Xs - 1);
    _L181 : real;
  let
    OutY= _L179;
    _L174= InX;
    _L177= X [0 .. Xs - 2];
    _L178= Y [1 .. Xs - 1];
    _L180= _L174^(Xs - 1);
    _L181= Y[0];
    _L179= (fold #8 CalculateCeil <<Xs - 1>>)(_L181, _L180, _L177, _L178);
  tel;
  
  function private CalculateNearest(
      Acc : real;
      InX : real;
      Xi1 : real;
      Xi2 : real;
      Yi1 : real;
      Yi2 : real)
    returns (Out : real)
  var
    _L8 : real;
    _L40 : real;
    _L74 : real;
    _L77 : bool;
    _L84 : real;
    _L85 : real;
    _L87 : real;
    _L88 : real;
    _L89 : real;
    _L91 : real;
    _L98 : real;
    _L99 : real;
    _L100 : real;
    _L101 : bool;
  let
    _L8= Acc;
    _L40= InX;
    _L74= Xi1;
    Out= _L84;
    _L84= if _L77 then _L8 else _L98;
    _L85= Xi2;
    _L87= Xi1;
    _L88= Yi1;
    _L89= Yi2;
    _L91= InX;
    _L98= if _L101 then _L88 else _L89;
    _L100= _L91 - _L87;
    _L99= _L85 - _L91;
    _L101= _L99 >= _L100;
    _L77= _L40 < _L74;
  tel;
  
  function Lut1DNearest<<Xs>>(InX : real; X : real^Xs; Y : real^Xs)
    returns (OutY : real)
  var
    _L174 : real;
    _L177 : real^(Xs - 1 - 1 + 1);
    _L178 : real^(Xs - 1 - 1 + 1);
    _L179 : real;
    _L180 : real^(Xs - 1);
    _L181 : real;
    _L182 : real^(Xs - 2 - 0 + 1);
    _L183 : real^(Xs - 2 - 0 + 1);
  let
    OutY= _L179;
    _L174= InX;
    _L177= X [1 .. Xs - 1];
    _L178= Y [1 .. Xs - 1];
    _L180= _L174^(Xs - 1);
    _L181= Y[0];
    _L179=
      (fold #8 CalculateNearest <<Xs - 1>>)(_L181, _L180, _L182, _L177, _L183, _L178);
    _L182= X [0 .. Xs - 2];
    _L183= Y [0 .. Xs - 2];
  tel;
  
  function Lut1DFloor<<Xs>>(InX : real; X : real^Xs; Y : real^Xs)
    returns (OutY : real)
  var
    _L174 : real;
    _L177 : real^(Xs - 1 - 1 + 1);
    _L178 : real^(Xs - 1 - 1 + 1);
    _L179 : real;
    _L180 : real^(Xs - 1);
    _L181 : real;
  let
    OutY= _L179;
    _L174= InX;
    _L177= X [1 .. Xs - 1];
    _L178= Y [1 .. Xs - 1];
    _L180= _L174^(Xs - 1);
    _L181= Y[0];
    _L179= (fold #8 CalculateFloor <<Xs - 1>>)(_L181, _L180, _L177, _L178);
  tel;
  
  function private CalculateCeil(Acc : real; InX : real; X : real; Y : real)
    returns (Out : real)
  var
    _L8 : real;
    _L40 : real;
    _L77 : bool;
    _L84 : real;
    _L85 : real;
    _L74 : real;
  let
    _L8= Acc;
    _L40= InX;
    Out= _L84;
    _L84= if _L77 then _L8 else _L85;
    _L85= Y;
    _L74= X;
    _L77= _L40 <= _L74;
  tel;
  
  function Lut2DFloor<<Xs, Ys>>(
      InX : real;
      InY : real;
      X : real^Xs;
      Y : real^Ys;
      Z : real^Ys^Xs)
    returns (OutZ : real)
  var
    i : int;
    j : int;
    _L2 : real;
    _L6 : real;
    _L11 : int;
    _L12 : int;
    _L14 : real^(Xs - 1 - 0 + 1);
    _L15 : int;
    _L19 : int;
    _L18 : real^(Ys - 1 - 0 + 1);
    _L20 : real;
    _L22 : real^Xs;
    _L23 : real^Ys;
  let
    _L2= InX;
    _L6= InY;
    OutZ= _L20;
    _L12= 0;
    _L18= Y [0 .. Ys - 1];
    _L19= 0;
    i= _L11;
    j= _L15;
    _L20= (Z.[i][j] default 0.0);
    _L22= _L2^Xs;
    _L23= _L6^Ys;
    _L11= (foldi #6 SearchIdxFloor <<Xs>>)(_L12, _L22, _L14);
    _L15= (foldi #8 SearchIdxFloor <<Ys>>)(_L19, _L23, _L18);
    _L14= X [0 .. Xs - 1];
  tel;
  
  function private SearchIdxFloor(i : int; Acc : int; InX : real; Xi : real)
    returns (Out : int)
  var
    _L8 : int;
    _L40 : real;
    _L77 : bool;
    _L84 : int;
    _L74 : real;
    _L86 : int;
  let
    _L8= Acc;
    _L40= InX;
    Out= _L84;
    _L84= if _L77 then _L8 else _L86;
    _L74= Xi;
    _L86= i;
    _L77= _L40 <= _L74;
  tel;
  
  function Lut2DCeil<<Xs, Ys>>(
      InX : real;
      InY : real;
      X : real^Xs;
      Y : real^Ys;
      Z : real^Ys^Xs)
    returns (OutZ : real)
  var
    i : int;
    j : int;
    _L2 : real;
    _L6 : real;
    _L11 : int;
    _L13 : int;
    _L14 : real^(Xs - 1 - 0 + 1);
    _L15 : int;
    _L18 : real^(Ys - 1 - 0 + 1);
    _L17 : int;
    _L20 : real;
    _L22 : real^Xs;
    _L23 : real^Ys;
  let
    _L2= InX;
    _L6= InY;
    OutZ= _L20;
    _L13= 0;
    _L14= X [0 .. Xs - 1];
    _L17= 0;
    _L18= Y [0 .. Ys - 1];
    i= _L11;
    j= _L15;
    _L20= (Z.[i][j] default 0.0);
    _L22= _L2^Xs;
    _L23= _L6^Ys;
    _L11= (foldi #8 SearchIdxCeil <<Xs>>)(_L13, _L22, _L14);
    _L15= (foldi #10 SearchIdxCeil <<Ys>>)(_L17, _L23, _L18);
  tel;
  
  function private SearchIdxCeil(i : int; Acc : int; InX : real; Xi : real)
    returns (Out : int)
  var
    _L8 : int;
    _L40 : real;
    _L77 : bool;
    _L84 : int;
    _L74 : real;
    _L86 : int;
  let
    _L8= Acc;
    _L40= InX;
    Out= _L84;
    _L84= if _L77 then _L8 else _L86;
    _L74= Xi;
    _L86= i;
    _L77= _L40 < _L74;
  tel;
  
  function private SearchNearest(
      i : int;
      Acc : int;
      InX : real;
      Xi1 : real;
      Xi2 : real)
    returns (Out : int)
  var
    _L8 : int;
    _L40 : real;
    _L74 : real;
    _L77 : bool;
    _L84 : int;
    _L85 : real;
    _L87 : real;
    _L91 : real;
    _L98 : int;
    _L99 : real;
    _L100 : real;
    _L101 : bool;
    _L102 : int;
    _L103 : int;
    _L104 : int;
  let
    _L8= Acc;
    _L40= InX;
    _L74= Xi1;
    Out= _L84;
    _L84= if _L77 then _L8 else _L98;
    _L85= Xi2;
    _L87= Xi1;
    _L91= InX;
    _L98= if _L101 then _L102 else _L103;
    _L100= _L91 - _L87;
    _L99= _L85 - _L91;
    _L101= _L99 >= _L100;
    _L77= _L40 < _L74;
    _L102= i;
    _L103= _L102 + _L104;
    _L104= 1;
  tel;
  
  function Lut2DNearest<<Xs, Ys>>(
      InX : real;
      InY : real;
      X : real^Xs;
      Y : real^Ys;
      Z : real^Ys^Xs)
    returns (OutZ : real)
  var
    i : int;
    j : int;
    _L2 : real;
    _L6 : real;
    _L11 : int;
    _L13 : int;
    _L14 : real^(Xs - 2 - 0 + 1);
    _L15 : int;
    _L18 : real^(Ys - 1 - 1 + 1);
    _L17 : int;
    _L20 : real;
    _L21 : real^(Xs - 1 - 1 + 1);
    _L26 : real^(Ys - 2 - 0 + 1);
    _L27 : real^(Xs - 1);
    _L28 : real^(Ys - 1);
  let
    _L2= InX;
    _L6= InY;
    OutZ= _L20;
    _L13= 0;
    _L14= X [0 .. Xs - 2];
    _L17= 0;
    _L18= Y [1 .. Ys - 1];
    i= _L11;
    j= _L15;
    _L20= (Z.[i][j] default 0.0);
    _L21= X [1 .. Xs - 1];
    _L26= Y [0 .. Ys - 2];
    _L27= _L2^(Xs - 1);
    _L28= _L6^(Ys - 1);
    _L11= (foldi #14 SearchNearest <<Xs - 1>>)(_L13, _L27, _L14, _L21);
    _L15= (foldi #17 SearchNearest <<Ys - 1>>)(_L17, _L28, _L26, _L18);
  tel;
  
  function Interp1DFloor<<Xs>>(IdxX : LutIndex; Y : real^Xs)
    returns (OutY : real)
  var
    Idx : int;
    _L6 : real;
    _L5 : int;
    _L2 : LutIndex;
    _L21 : real^Xs;
    _L23 : real;
    _L25 : real;
    _L26 : int;
    _L27 : int;
    _L28 : int;
    _L29 : int;
    _L30 : real;
    _L32 : bool;
    _L33 : real;
  let
    _L5, _L6= (flatten LutIndex)(_L2);
    OutY= _L30;
    _L2= IdxX;
    Idx= _L5;
    _L21= Y;
    _L25= (_L21.[_L28] default 0.0);
    _L26= Idx;
    _L27= Idx;
    _L28= _L29 + _L27;
    _L29= 1;
    _L23= (_L21.[_L26] default 0.0);
    _L30= if _L32 then _L23 else _L25;
    _L32= _L6 < _L33;
    _L33= 1.0;
  tel;
  
  function Interp2D<<Xs, Ys>>(IdxX : LutIndex; IdxY : LutIndex; Z : real^Ys^Xs)
    returns (OutZ : real)
  var
    i : int;
    j : int;
    Fx : real;
    Fy : real;
    _L1 : LutIndex;
    _L2 : LutIndex;
    _L6 : real;
    _L5 : int;
    _L7 : int;
    _L8 : real;
    _L11 : real;
    _L12 : real;
    _L13 : real;
    _L14 : real;
    _L15 : real;
    _L16 : real;
    _L21 : real;
    _L18 : real;
    _L37 : real;
    _L41 : real;
    _L40 : real;
    _L39 : real;
    _L38 : real;
    _L44 : real;
    _L43 : real;
    _L42 : real;
  let
    _L1= IdxX;
    _L2= IdxY;
    _L5, _L6= (flatten LutIndex)(_L1);
    i= _L5;
    j= _L7;
    _L7, _L8= (flatten LutIndex)(_L2);
    Fx= _L6;
    Fy= _L8;
    _L11= (Z.[i][j] default 0.0);
    _L12= _L14 + _L11;
    _L14= _L15 * _L13;
    _L15= Fx;
    _L16= (Z.[i + 1][j] default 0.0);
    _L18= (Z.[i][j + 1] default 0.0);
    _L21= (Z.[i + 1][j + 1] default 0.0);
    _L37= Fy;
    OutZ= _L43;
    _L13= _L16 - _L11;
    _L38= Fx;
    _L39= _L40 + _L18;
    _L40= _L38 * _L41;
    _L41= _L21 - _L18;
    _L42= _L39 - _L12;
    _L43= _L44 + _L12;
    _L44= _L37 * _L42;
  tel;
  
end;

/* $**************  KCG Version 6.0.0b (build i19) **************
** -
** Generation date: 2009-02-24T01:42:08
*************************************************************$ */
/* $**************  KCG Version 6.0.0b (build i19) **************
** Command: x2s U:/SIMULATION/Programmcode/ScadeSource/simulationsa/Package1.xscade
** Generation date: 2009-02-24T01:42:08
*************************************************************$ */

/* xscade source: U:/SIMULATION/Programmcode/ScadeSource/simulationsa/Package1.xscade */
package simulation
  package C
    const KH_ST_0 : int = 24;
    
    const KH_ST_1 : int = 25;
    
    const KH_ST_2 : int = 26;
    
    const KH_ST_3 : int = 27;
    
    const KH_ST_4 : int = 28;
    
    const KH_ST_5 : int = 29;
    
    const KH_ST_6 : int = 30;
    
    const KH_LN_0 : int = 15;
    
    const KH_LN_1 : int = 16;
    
    const KH_LN_2 : int = 17;
    
    const KH_LN_3 : int = 18;
    
    const KH_LN_4 : int = 19;
    
    const KH_LN_5 : int = 20;
    
    const KH_LN_6 : int = 21;
    
    const KH_LN_7 : int = 22;
    
    const KH_LN_8 : int = 23;
    
    const OC_ST_0 : int = 40;
    
    const OC_ST_3 : int = 43;
    
    const OC_ST_4 : int = 44;
    
    const IC_ST_0 : int = 7;
    
    const IC_ST_1 : int = 8;
    
    const IC_ST_4 : int = 11;
    
    const IC_JCT_0 : int = 0;
    
    const OC_JCT_0 : int = 33;
    
    const IC_LN_0 : int = 1;
    
    const IC_LN_1 : int = 2;
    
    const IC_LN_2 : int = 3;
    
    const IC_LN_3 : int = 4;
    
    const IC_LN_4 : int = 5;
    
    const IC_LN_5 : int = 6;
    
    const IC_ST_2 : int = 9;
    
    const IC_ST_3 : int = 10;
    
    const IO_LN_0 : int = 12;
    
    const IO_LN_1 : int = 13;
    
    const IO_LN_2 : int = 14;
    
    const KIO_LN_0 : int = 31;
    
    const KIO_LN_1 : int = 32;
    
    const OC_LN_1 : int = 35;
    
    const OC_LN_2 : int = 36;
    
    const OC_LN_3 : int = 37;
    
    const OC_LN_4 : int = 38;
    
    const OC_LN_5 : int = 39;
    
    const OC_LN_0 : int = 34;
    
    const OC_ST_1 : int = 41;
    
    const OC_ST_2 : int = 42;
    
    const OI_LN_1 : int = 46;
    
    const OI_LN_2 : int = 47;
    
    const OI_LN_0 : int = 45;
    
  end;
  
  const
    INIT_COMMANDS : controllerCommands
      = {
          points:[P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT],
          motormodes:[M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
            M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
            M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
            M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
            M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF],
          speeds:[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          signals0:[S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF],
          signals1:[S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF],
          inittrains:[AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE] };
  
  const
    INIT_FEEDBACK : controllerFeedback
      = {
          contacts:[{
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }],
          positionHead:[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
            -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
            -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
            -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
            -1.0, -1.0],
          positionTail:[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
            -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
            -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
            -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
            -1.0, -1.0],
          blockErrors:[E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
            E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
            E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
            E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
            E_OK, E_OK],
          pointErrors:[E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
            E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
            E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
            E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
            E_OK, E_OK],
          extTrackData:[{
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }] };
  
  const INIT_MOTORMODE : MotormodeType = M_OFF;
  
  const INIT_SPEED : speedValue = 0.0;
  
  const MAX_TRACK_LENGTH : real = 100.00;
  
  const TIME_CYCLE : real = 0.1;
  
  const MAX_TRAIN_LENGTH : real = 20.00;
  
  const
    INIT_DATA_ALL : dataAll
      = {
          d_global:{
              commands:{
                  points:[P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                    P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                    P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                    P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                    P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                    P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                    P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                    P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                    P_STRAIGHT],
                  motormodes:[M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
                    M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
                    M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
                    M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
                    M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
                    M_OFF, M_OFF, M_OFF, M_OFF],
                  speeds:[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  signals0:[S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                    S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                    S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                    S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                    S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                    S_OFF, S_OFF, S_OFF, S_OFF, S_OFF],
                  signals1:[S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                    S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                    S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                    S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                    S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                    S_OFF, S_OFF, S_OFF, S_OFF, S_OFF],
                  inittrains:[AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
                    AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
                    AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
                    AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
                    AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
                    AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
                    AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE] },
              feedback:{
                  contacts:[{
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                        c_first:{ Triggered:false, Direction:D_UNKNOWN },
                        c_second:{ Triggered:false, Direction:D_UNKNOWN } }],
                  positionHead:[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
                    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
                    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
                    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
                    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
                  positionTail:[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
                    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
                    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
                    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
                    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
                  blockErrors:[E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                    E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                    E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                    E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                    E_OK, E_OK, E_OK, E_OK, E_OK, E_OK],
                  pointErrors:[E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                    E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                    E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                    E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                    E_OK, E_OK, E_OK, E_OK, E_OK, E_OK],
                  extTrackData:[{
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }, {
                        track_occupied:false,
                        speed_out:0.0,
                        track_shutdown:false,
                        speed_newdata:false }] } },
          d_local:{ enters:false, curSpeed:0.0, curAlignment:AL_NONE } };
  
  const
    INIT_DATA_LOCAL : dataLocal
      = { enters:false, curSpeed:0.0, curAlignment:AL_NONE };
  
  const
    ENTER_TRAIN : dataLocal
      = { enters:true, curSpeed:0.0, curAlignment:AL_NONE };
  
  const
    MAX_COMMANDS : controllerCommands
      = {
          points:[P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT],
          motormodes:[M_PRIMARY, M_PRIMARY, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
            M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
            M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
            M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
            M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF],
          speeds:[10.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          signals0:[S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF],
          signals1:[S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF],
          inittrains:[AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE] };
  
  const CONTACT_POSITION : positionType = 10.0;
  
  const BIG_REAL_NUMBER : real = 1000000.0;
  
  const
    INIT_CONTACT_PAIR : contactPair
      = {
          c_first:{ Triggered:false, Direction:D_UNKNOWN },
          c_second:{ Triggered:false, Direction:D_UNKNOWN } };
  
  const INIT_POSITION : positionType = -1.0;
  
  const
    INIT_TRAIN_ARRAY : initialTrainArray
      = [AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
        AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
        AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
        AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
        AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
        AL_NONE, AL_NONE, AL_NONE, AL_NONE];
  
  const
    TEST_ERROR_1 : errorArray
      = [E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
        E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
        E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
        E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK];
  
  const
    TEST_ERROR2 : errorArray
      = [E_TRACK_OCCUPIED, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
        E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
        E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
        E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK];
  
  const
    INIT_POINTS : pointArray
      = [P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
        P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
        P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
        P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
        P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
        P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
        P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT];
  
  const INIT_ERROR : errorType = E_OK;
  
  const CONTACT_DISTANCE : positionType = 1.0;
  
  const
    INIT_MOTORMODE_ARRAY : motormodeArray
      = [M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY,
        M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY,
        M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY,
        M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY,
        M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY,
        M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY,
        M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY];
  
  const UPDATENEWSPEED : real = 0.2;
  
  const
    INIT_TRACKEXTDATA : trackExtData
      = {
          track_occupied:false,
          speed_out:0.0,
          track_shutdown:false,
          speed_newdata:false };
  
  const
    INIT_SIGNALS : signalArray
      = [S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
        S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
        S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
        S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
        S_OFF, S_OFF, S_OFF, S_OFF, S_OFF];
  
  const
    INIT_SIGNALS_GREEN : signalArray
      = [S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN,
        S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN,
        S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN,
        S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN,
        S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN,
        S_GREEN, S_GREEN, S_GREEN, S_GREEN, S_GREEN];
  
  const
    INIT_SIGNALS_YELLOW : signalArray
      = [S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW,
        S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW,
        S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW,
        S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW,
        S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW,
        S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW, S_YELLOW,
        S_YELLOW];
  
  const
    INIT_SPEED_ARRAY : speedArray
      = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0];
  
  const
    INIT_CONTROLLERFEEDBACKSENSOR : controllerFeedbackSensor
      = {
          contacts:[{
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                c_first:{ Triggered:false, Direction:D_UNKNOWN },
                c_second:{ Triggered:false, Direction:D_UNKNOWN } }],
          extTrackData:[{
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }, {
                track_occupied:false,
                speed_out:0.0,
                track_shutdown:false,
                speed_newdata:false }] };
  
  const
    INIT_CONTACTARRAY : contactArray
      = [{
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
            c_first:{ Triggered:false, Direction:D_UNKNOWN },
            c_second:{ Triggered:false, Direction:D_UNKNOWN } }];
  
  const
    INIT_CONTACTPAIR : contactPair
      = {
          c_first:{ Triggered:false, Direction:D_UNKNOWN },
          c_second:{ Triggered:false, Direction:D_UNKNOWN } };
  
  const
    INIT_ERRORARRAY : errorArray
      = [E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
        E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
        E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
        E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK];
  
  const
    INIT_TRACKEXTDATAARRAY : trackExtDataArray
      = [{
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }, {
            track_occupied:false,
            speed_out:0.0,
            track_shutdown:false,
            speed_newdata:false }];
  
  const INIT_MOTORMODETYPE : MotormodeType = M_OFF;
  
  const
    INIT_MOTORMODEARRAY : motormodeArray
      = [M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
        M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
        M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
        M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
        M_OFF, M_OFF, M_OFF, M_OFF];
  
  const
    INIT_POINTARRAY : pointArray
      = [P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
        P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
        P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
        P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
        P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
        P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
        P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT];
  
  const INIT_POINTSTATUS : PointStatus = P_STRAIGHT;
  
  const
    INIT_POSITIONARRAY : positionArray
      = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0];
  
  const
    INIT_SIGNALARRAY : signalArray
      = [S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
        S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
        S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
        S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
        S_OFF, S_OFF, S_OFF, S_OFF, S_OFF];
  
  const INIT_SIGNALVALUE : signalValue = S_OFF;
  
  const
    INIT_SPEEDARRAY : speedArray
      = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0];
  
  const INIT_SPEEDVALUE : speedValue = 0.0;
  
  const
    INIT_DATA_GLOBAL : dataGlobal
      = {
          commands:{
              points:[P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
                P_STRAIGHT],
              motormodes:[M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
                M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
                M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
                M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
                M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF],
              speeds:[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              signals0:[S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF],
              signals1:[S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
                S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF],
              inittrains:[AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
                AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
                AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
                AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
                AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
                AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
                AL_NONE] },
          feedback:{
              contacts:[{
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }, {
                    c_first:{ Triggered:false, Direction:D_UNKNOWN },
                    c_second:{ Triggered:false, Direction:D_UNKNOWN } }],
              positionHead:[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              positionTail:[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              blockErrors:[E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                E_OK, E_OK, E_OK, E_OK, E_OK, E_OK],
              pointErrors:[E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK, E_OK,
                E_OK, E_OK, E_OK, E_OK, E_OK, E_OK],
              extTrackData:[{
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }, {
                    track_occupied:false,
                    speed_out:0.0,
                    track_shutdown:false,
                    speed_newdata:false }] } };
  
  const
    INIT_COMMANDS2 : controllerCommands
      = {
          points:[P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT,
            P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT, P_STRAIGHT],
          motormodes:[M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY,
            M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY, M_PRIMARY,
            M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
            M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
            M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF, M_OFF,
            M_OFF, M_OFF, M_OFF, M_OFF, M_OFF],
          speeds:[40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0,
            40.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          signals0:[S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF],
          signals1:[S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF,
            S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF, S_OFF],
          inittrains:[AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE, AL_BACKWARD, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE, AL_NONE,
            AL_NONE] };
  
  const
    INIT_SIGNALS_RED : signalArray
      = [S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED,
        S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED,
        S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED,
        S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED, S_RED,
        S_RED, S_RED, S_RED, S_RED, S_RED];
  
  type
    controllerCommands = {
      points : pointArray,
      motormodes : motormodeArray,
      speeds : speedArray,
      signals0 : signalArray,
      signals1 : signalArray,
      inittrains : initialTrainArray
    };
  
  type
    controllerFeedback = {
      contacts : contactArray,
      positionHead : positionArray,
      positionTail : positionArray,
      blockErrors : errorArray,
      pointErrors : errorArray,
      extTrackData : trackExtDataArray
    };
  
  type ReedContactValue = { Triggered : bool, Direction : TrainDirectionType };
  
  type
    contactPair = { c_first : ReedContactValue, c_second : ReedContactValue };
  
  type contactArray = contactPair^48;
  
  type speedArray = speedValue^48;
  
  type pointArray = PointStatus^48;
  
  type motormodeArray = MotormodeType^48;
  
  type TrainDirectionType = enum { D_UNKNOWN, D_PRIMARY, D_SECONDARY };
  
  type MotormodeType = enum { M_OFF, M_PRIMARY, M_SECONDARY, M_BRAKE };
  
  type PointStatus = enum { P_STRAIGHT, P_TURN };
  
  type speedValue = real;
  
  type
    dataLocal = {
      enters : bool,
      curSpeed : speedValue,
      curAlignment : TrainAlignmentType
    };
  
  type
    dataGlobal = {
      commands : controllerCommands,
      feedback : controllerFeedback
    };
  
  type dataAll = { d_global : dataGlobal, d_local : dataLocal };
  
  type positionType = real;
  
  type positionArray = positionType^48;
  
  type initialTrainArray = TrainAlignmentType^48;
  
  type
    displayDataT = {
      startPosition : positionArray,
      endPosition : positionArray,
      motormodes : motormodeArray,
      blockErrors : errorArray,
      points : pointArray,
      pointErrors : errorArray,
      signals0 : signalArray,
      signals1 : signalArray
    };
  
  type
    errorType = enum {
      E_OK,
      E_FORBIDDEN_SWITCHCROSS_SETTING,
      E_WRONG_SWITCHPOINT_DIRECTION,
      E_TRACK_OCCUPIED,
      E_TRACK_DOUBLE_ENTRY,
      E_MOTORMODE_MISMATCH,
      E_SPEED_MISMATCH
    };
  
  type errorArray = errorType^48;
  
  type
    controllerFeedbackSensor = {
      contacts : contactArray,
      extTrackData : trackExtDataArray
    };
  
  type
    controllerFeedbackDebug = {
      positionHead : positionArray,
      positionTail : positionArray,
      blockErrors : errorArray,
      pointErrors : errorArray
    };
  
  type
    trackExtData = {
      track_occupied : trackOccupied,
      speed_out : speedValue,
      track_shutdown : trackShutdown,
      speed_newdata : speedNewData
    };
  
  type trackOccupied = bool;
  
  type trackShutdown = bool;
  
  type speedNewData = bool;
  
  type trackExtDataArray = trackExtData^48;
  
  type signalValue = enum { S_OFF, S_RED, S_YELLOW, S_GREEN };
  
  type signalArray = signalValue^49;
  
  type integerType = int;
  
  type guiControlData = { textbox : int };
  
  type TrainAlignmentType = enum { AL_NONE, AL_FORWARD, AL_BACKWARD };
  
  node kickingHorsePass(
      input_dataGlobal : dataGlobal;
      input_front_OC : dataLocal;
      input_rear_OC : dataLocal)
    returns (
      output_dataGlobal : dataGlobal;
      output_front_OC : dataLocal;
      output_rear_OC : dataLocal)
  var
    Input_dataGlobal : dataGlobal;
    Output_dataGlobal : dataGlobal;
    _L3 : dataAll;
    _L4 : dataAll;
    _L20 : dataLocal;
    _L21 : dataLocal;
    _L33 : dataLocal;
    _L32 : dataAll;
    _L41 : dataAll;
    _L40 : dataLocal;
    _L39 : dataLocal;
    _L66 : dataLocal;
    _L65 : dataAll;
    _L68 : dataLocal;
    _L67 : dataAll;
    _L70 : dataLocal;
    _L69 : dataAll;
    _L73 : dataAll;
    _L72 : dataLocal;
    _L71 : dataLocal;
    _L76 : dataAll;
    _L75 : dataLocal;
    _L74 : dataLocal;
    _L79 : dataAll;
    _L78 : dataLocal;
    _L77 : dataLocal;
    _L89 : dataLocal;
    _L88 : dataAll;
    _L96 : dataLocal;
    _L95 : dataAll;
    _L99 : dataLocal;
    _L98 : dataAll;
    _L102 : dataLocal;
    _L101 : dataAll;
    _L105 : dataLocal;
    _L104 : dataAll;
    _L112 : dataLocal;
    _L111 : dataAll;
    _L115 : dataLocal;
    _L114 : dataAll;
    _L117 : dataLocal;
    _L116 : dataAll;
    _L124 : dataAll;
    _L123 : dataLocal;
    _L122 : dataLocal;
    _L127 : dataLocal;
    _L126 : dataAll;
    _L130 : dataLocal;
    _L129 : dataAll;
    _L134 : dataAll;
    _L133 : dataLocal;
    _L132 : dataLocal;
    _L153 : dataLocal;
    _L154 : dataAll;
    _L157 : dataGlobal;
    _L158 : dataLocal;
    _L35 : dataLocal;
    _L37 : dataLocal;
    _L38 : dataLocal;
    _L45 : dataLocal;
    _L46 : dataLocal;
    _L60 : dataLocal;
    _L61 : dataLocal;
    _L62 : dataLocal;
    _L63 : dataLocal;
    _L80 : dataLocal;
    _L81 : dataLocal;
    _L82 : dataLocal;
    _L83 : dataLocal;
    _L84 : dataLocal;
    _L85 : dataLocal;
    _L86 : dataLocal;
    _L87 : dataLocal;
    _L90 : dataLocal;
    _L94 : dataLocal;
    _L97 : dataLocal;
    _L100 : dataLocal;
    _L103 : dataLocal;
    _L106 : dataLocal;
    _L110 : dataLocal;
    _L113 : dataLocal;
    _L118 : dataLocal;
    _L119 : dataLocal;
    _L120 : dataLocal;
    _L121 : dataLocal;
    _L125 : dataLocal;
    _L128 : dataLocal;
    _L131 : dataLocal;
    _L135 : dataLocal;
    _L160 : dataLocal;
    _L44 : dataAll;
    _L43 : dataAll;
    _L42 : dataLocal;
    _L53 : dataAll;
    _L52 : dataAll;
    _L51 : dataLocal;
    _L56 : dataAll;
    _L55 : dataAll;
    _L54 : dataLocal;
    _L59 : dataAll;
    _L58 : dataAll;
    _L57 : dataLocal;
    _L93 : dataAll;
    _L92 : dataAll;
    _L91 : dataLocal;
    _L109 : dataAll;
    _L108 : dataAll;
    _L107 : dataLocal;
    _L161 : dataLocal;
    _L163 : dataLocal;
    _L162 : dataAll;
    _L165 : dataLocal;
    _L167 : dataLocal;
    _L166 : dataGlobal;
    _L168 : dataAll;
    _L171 : dataGlobal;
    _L172 : dataGlobal;
    _L152 : dataGlobal;
  let
    _L3, _L21= #1 track(_L134, _L35, C::KH_ST_0);
    _L4, _L20= #2 track(_L58, _L80, C::KH_ST_1);
    _L32, _L33= #3 track(_L59, _L82, C::KH_ST_2);
    _L39, _L40, _L41= #3 switchPoint1(_L76, _L32, _L87, 7);
    _L65, _L66= #4 track(_L43, _L81, C::KH_ST_5);
    _L67, _L68= #5 track(_L53, _L84, C::KH_ST_4);
    _L69, _L70= #6 track(_L56, _L83, C::KH_ST_3);
    _L71, _L72, _L73= #4 switchPoint1(_L4, _L41, _L90, 8);
    _L74, _L75, _L76= #5 switchPoint1(_L79, _L69, _L86, 6);
    _L77, _L78, _L79= #6 switchPoint1(_L65, _L67, _L85, 5);
    _L88, _L89= #7 track(_L73, _L94, C::KH_ST_6);
    _L95, _L96= #8 track(_L92, _L100, C::KH_LN_0);
    _L98, _L99= #9 track(_L95, _L103, C::KH_LN_1);
    _L101, _L102= #10 track(_L98, _L106, C::KH_LN_2);
    _L104, _L105= #11 track(_L108, _L119, C::KH_LN_3);
    _L111, _L112= #12 track(_L109, _L118, C::KH_LN_4);
    _L114, _L115= #13 track(_L111, _L120, C::KH_LN_6);
    _L116, _L117= #14 track(_L104, _L121, C::KH_LN_5);
    _L122, _L123, _L124= #7 switchPoint1(_L114, _L116, _L125, 14);
    _L126, _L127= #15 track(_L124, _L128, C::KH_LN_7);
    _L129, _L130= #16 track(_L126, _L135, C::KH_LN_8);
    _L132, _L133, _L134= #8 switchPoint1(_L168, _L162, _L131, 0);
    _L153= input_front_OC;
    output_rear_OC= _L163;
    _L154= #1 dataLocal2All(_L157, _L153);
    Input_dataGlobal= _L152;
    _L157= Input_dataGlobal;
    output_front_OC= _L161;
    _L158= input_rear_OC;
    _L35= #1 cycleBreaker(_L42);
    _L37= #3 cycleBreaker(_L57);
    _L38= #4 cycleBreaker(_L20);
    _L45= #5 cycleBreaker(_L51);
    _L46= #6 cycleBreaker(_L66);
    _L60= #8 cycleBreaker(_L33);
    _L61= #7 cycleBreaker(_L70);
    _L62= #9 cycleBreaker(_L54);
    _L63= #10 cycleBreaker(_L68);
    _L80= #12 cycleBreaker(_L71);
    _L81= #13 cycleBreaker(_L77);
    _L82= #14 cycleBreaker(_L40);
    _L83= #15 cycleBreaker(_L75);
    _L84= #16 cycleBreaker(_L78);
    _L85= #17 cycleBreaker(_L74);
    _L86= #18 cycleBreaker(_L39);
    _L87= #19 cycleBreaker(_L72);
    _L90= #20 cycleBreaker(_L89);
    _L94= #21 cycleBreaker(_L91);
    _L97= #22 cycleBreaker(_L96);
    _L100= #23 cycleBreaker(_L99);
    _L103= #24 cycleBreaker(_L102);
    _L106= #25 cycleBreaker(_L107);
    _L110= #26 cycleBreaker(_L105);
    _L113= #27 cycleBreaker(_L112);
    _L118= #28 cycleBreaker(_L115);
    _L119= #29 cycleBreaker(_L117);
    _L120= #30 cycleBreaker(_L122);
    _L121= #31 cycleBreaker(_L123);
    _L125= #32 cycleBreaker(_L127);
    _L128= #33 cycleBreaker(_L130);
    _L131= #34 cycleBreaker(_L21);
    _L135= #35 cycleBreaker(_L132);
    _L160= #36 cycleBreaker(_L158);
    _L42, _L43, _L44= #2 switchPoint2(_L3, _L46, _L45, 1);
    _L51, _L52, _L53= #3 switchPoint2(_L44, _L62, _L63, 2);
    _L54, _L55, _L56= #4 switchPoint2(_L52, _L37, _L61, 3);
    _L57, _L58, _L59= #5 switchPoint2(_L55, _L38, _L60, 4);
    _L91, _L92, _L93= #6 switchPoint2(_L88, _L97, _L160, 9);
    _L107, _L108, _L109= #7 switchPoint2(_L101, _L110, _L113, 15);
    _L162, _L163= #17 track(_L154, _L165, C::KIO_LN_0);
    _L165= #37 cycleBreaker(_L133);
    _L166, _L167= #2 dataAll2Local(_L129);
    _L168= #2 dataLocal2All(_L172, _L167);
    Output_dataGlobal= _L166;
    _L171= Output_dataGlobal;
    _L172= Input_dataGlobal;
    output_dataGlobal= _L171;
    _L152= input_dataGlobal;
    _L161= #1 dataAll2LocalOnly(_L93);
  tel;
  
  node track(input_front : dataAll; input_rear : dataLocal; track_nr : int)
    returns (output_front : dataAll; output_rear : dataLocal)
  sig
    enters_front, leaves_front, enters_rear, leaves_rear, left_front, left_rear,
    track_got_empty, initial_train, s_E_TRACK_OCCUPIED, s_E_MOTORMODE_MISMATCH, s_E_SPEED_MISMATCH;
  var
    contacts : contactPair;
    curMotormode : MotormodeType;
    curSpeed : speedValue;
    output_pos_head : positionType;
    output_pos_tail : positionType;
    position_head : positionType;
    train_speed : speedValue;
    contact1_position : positionType;
    contact2_position : real;
    position_tail : positionType;
    localErrorCode : errorType;
    m_forward : bool;
    prevSpeed : speedValue;
    extData : trackExtData;
    inittrains : initialTrainArray;
    prevAlignment : TrainAlignmentType;
    curAlignment : TrainAlignmentType;
    switchHeadTail : bool;
    lastTrainDirection : TrainDirectionType;
    _L1 : dataAll;
    _L6 : dataAll;
    _L8 : controllerFeedback;
    _L7 : controllerCommands;
    _L10 : dataLocal;
    _L11 : dataGlobal;
    _L12 : controllerCommands;
    _L22 : contactArray;
    _L23 : controllerFeedback;
    _L29 : contactArray;
    _L30 : contactPair;
    _L48 : speedArray;
    _L47 : motormodeArray;
    _L46 : pointArray;
    _L49 : MotormodeType;
    _L50 : speedValue;
    _L70 : positionArray;
    _L71 : positionArray;
    _L72 : positionType;
    _L73 : positionType;
    _L74 : positionArray;
    _L75 : positionArray;
    _L83 : bool;
    _L89 : MotormodeType;
    _L88 : bool;
    _L87 : real;
    _L85 : speedValue;
    _L91 : speedValue;
    _L92 : speedValue;
    _L99 : real;
    _L104 : contactPair;
    _L109 : dataLocal;
    _L110 : bool;
    _L111 : dataLocal;
    _L112 : bool;
    _L122 : real;
    _L128 : real;
    _L129 : real;
    _L131 : real;
    _L132 : real;
    _L146 : bool;
    _L147 : real;
    _L167 : real;
    _L168 : bool;
    _L186 : bool;
    _L185 : real;
    _L189 : bool;
    _L190 : bool;
    _L191 : bool;
    _L192 : bool;
    _L198 : positionType;
    _L199 : positionType;
    _L200 : positionType;
    _L149 : bool;
    _L183 : bool;
    _L184 : bool;
    _L150 : bool;
    _L202 : bool;
    _L203 : bool;
    _L204 : positionType;
    _L208 : positionType;
    _L225 : ReedContactValue;
    _L226 : ReedContactValue;
    _L228 : dataLocal;
    _L227 : dataGlobal;
    _L229 : real;
    _L230 : real;
    _L231 : real;
    _L232 : positionType;
    _L233 : positionType;
    _L234 : positionType;
    _L241 : errorArray;
    _L242 : errorArray;
    _L245 : errorType;
    _L249 : errorArray;
    _L268 : errorType;
    _L258 : errorType;
    _L257 : errorType;
    _L256 : bool;
    _L255 : bool;
    _L254 : bool;
    _L270 : errorType;
    _L271 : bool;
    _L272 : errorType;
    _L274 : bool;
    _L275 : bool;
    _L277 : MotormodeType;
    _L278 : bool;
    _L279 : MotormodeType;
    _L282 : bool;
    _L284 : bool;
    _L285 : bool;
    _L286 : bool;
    _L288 : bool;
    _L287 : bool;
    _L289 : bool;
    _L290 : bool;
    _L292 : bool;
    _L293 : bool;
    _L294 : bool;
    _L295 : bool;
    _L299 : speedValue;
    _L301 : speedValue;
    _L302 : speedValue;
    _L308 : speedValue;
    _L312 : speedValue;
    _L313 : speedValue;
    _L317 : bool;
    _L315 : speedValue;
    _L319 : MotormodeType;
    _L322 : bool;
    _L323 : bool;
    _L324 : bool;
    _L325 : speedValue;
    _L326 : speedValue;
    _L327 : bool;
    _L328 : bool;
    _L329 : errorType;
    _L330 : errorType;
    _L332 : bool;
    _L333 : bool;
    _L337 : bool;
    _L338 : bool;
    _L339 : bool;
    _L340 : errorType;
    _L341 : bool;
    _L342 : errorType;
    _L343 : bool;
    _L344 : MotormodeType;
    _L346 : bool;
    _L345 : bool;
    _L347 : bool;
    _L348 : bool;
    _L349 : bool;
    _L350 : bool;
    _L351 : bool;
    _L352 : bool;
    _L355 : MotormodeType;
    _L354 : MotormodeType;
    _L353 : bool;
    _L356 : trackExtDataArray;
    _L360 : trackExtData;
    _L361 : bool;
    _L363 : real;
    _L364 : speedValue;
    _L365 : bool;
    _L366 : real;
    _L367 : real;
    _L368 : real;
    _L369 : bool;
    _L370 : real;
    _L371 : bool;
    _L372 : bool;
    _L374 : trackExtData;
    _L375 : trackExtDataArray;
    _L376 : int;
    _L377 : signalArray;
    _L378 : signalArray;
    _L379 : real;
    _L380 : real;
    _L382 : bool;
    _L383 : TrainAlignmentType;
    _L384 : initialTrainArray;
    _L387 : TrainAlignmentType;
    _L388 : TrainAlignmentType;
    _L389 : TrainAlignmentType;
    _L390 : TrainAlignmentType;
    _L391 : TrainAlignmentType;
    _L392 : TrainAlignmentType;
    _L393 : TrainAlignmentType;
    _L394 : initialTrainArray;
    _L395 : TrainAlignmentType;
    _L396 : bool;
    _L397 : TrainAlignmentType;
    _L398 : positionType;
    _L399 : positionType;
    _L406 : TrainAlignmentType;
    _L407 : bool;
    _L408 : bool;
    _L409 : bool;
    _L410 : TrainAlignmentType;
    _L411 : positionType;
    _L417 : bool;
    _L418 : bool;
    _L420 : bool;
    _L422 : MotormodeType;
    _L421 : MotormodeType;
    _L423 : bool;
    _L424 : MotormodeType;
    _L425 : TrainDirectionType;
    _L426 : TrainDirectionType;
    _L427 : TrainDirectionType;
    _L428 : TrainDirectionType;
    _L429 : TrainDirectionType;
    _L430 : TrainDirectionType;
    _L431 : TrainDirectionType;
    _L433 : bool;
    _L434 : bool;
  let
    _L1= input_front;
    output_front= _L6;
    _L6= (make dataAll)(_L11, _L10);
    _L7, _L8= (flatten dataGlobal)(_L227);
    _L10= (make dataLocal)(_L83, _L301, _L390);
    _L11= (make dataGlobal)(_L12, _L23);
    _L12= (make controllerCommands)(_L46, _L47, _L48, _L377, _L378, _L384);
    _L22, _L70, _L71, _L241, _L242, _L356= (flatten controllerFeedback)(_L8);
    _L23= (make controllerFeedback)(_L29, _L74, _L75, _L249, _L242, _L375);
    _L30= contacts;
    _L46, _L47, _L48, _L377, _L378, _L384= (flatten controllerCommands)(_L7);
    curMotormode= _L49;
    curSpeed= _L50;
    _L49= (_L47.[track_nr] default INIT_MOTORMODE);
    _L50= (_L48.[track_nr] default INIT_SPEED);
    _L72= output_pos_head;
    _L73= output_pos_tail;
    _L83= 'leaves_front;
    emit 'enters_front if _L317;
    _L85= curSpeed;
    emit 'leaves_front if _L284;
    output_pos_head= _L380;
    _L87= -_L85;
    _L88= _L200 >= _L99;
    _L89= curMotormode;
    _L91= (case _L89 of | M_PRIMARY: _L85 | M_SECONDARY: _L87 | _: _L92);
    _L92= INIT_SPEED;
    _L99= MAX_TRACK_LENGTH;
    contacts= _L104;
    _L104= (make contactPair)(_L225, _L226);
    output_pos_tail= _L379;
    _L109= input_rear;
    output_rear= _L111;
    _L110, _L299, _L387= (flatten dataLocal)(_L109);
    _L111= (make dataLocal)(_L112, _L302, _L389);
    emit 'enters_rear if _L110;
    _L112= 'leaves_rear;
    _L122= MAX_TRACK_LENGTH;
    contact1_position= CONTACT_POSITION;
    contact2_position= _L122 - contact1_position;
    _L128= MAX_TRACK_LENGTH;
    _L129= -1.0;
    _L131= _L199 - _L132;
    _L132= MAX_TRAIN_LENGTH;
    _L146= _L232 <= _L147;
    _L147= 0.0;
    emit 'leaves_rear if _L149;
    emit 'left_front if _L275;
    _L167= MAX_TRACK_LENGTH;
    _L168= _L234 >= _L167;
    emit 'left_rear if _L274;
    _L185= 0.0;
    _L186= _L233 <= _L185;
    _L189= #1 digital::RisingEdge(_L88);
    _L190= #2 digital::RisingEdge(_L146);
    _L191= #3 digital::RisingEdge(_L186);
    _L192= #4 digital::RisingEdge(_L168);
    _L198= position_head;
    _L199= position_head;
    _L200= position_head;
    _L149= _L190 and _L150 and _L286;
    _L183= _L191 and _L184 and _L287;
    _L184= not _L203;
    _L150= not _L202;
    
    automaton SM2
      initial state track_empty
        unless
          if 'enters_rear or 'enters_front or 'initial_train restart track_occupied;
        var
          _L2 : real;
        let
          position_head= _L2;
          _L2= -1.0;
        tel

      state track_occupied
        unless
          if 'left_rear or 'left_front do let emit 'track_got_empty; tel restart track_empty;
        var
          position_simple : positionType;
          _L2 : speedValue;
          _L4 : real;
          _L9 : real;
          _L10 : real;
          _L11 : real;
          _L13 : real;
          _L14 : real;
          _L15 : bool;
        let
          _L2= train_speed;
          _L4= TIME_CYCLE;
          
          automaton SM3
            state entered_front
              var
                _L1 : positionType;
              let
                position_head= _L1;
                _L1= position_simple;
              tel

            state entered_rear
              var
                _L6 : real;
                _L7 : positionType;
                _L8 : real;
              let
                position_head= _L8;
                _L6= MAX_TRACK_LENGTH + MAX_TRAIN_LENGTH;
                _L7= position_simple;
                _L8= _L6 + _L7;
              tel

            initial state enters
              unless
                if 'enters_rear restart entered_rear;
                if 'enters_front or 'initial_train restart entered_front;
              var
                _L2 : real;
              let
                position_head= _L2;
                _L2= -1.0;
              tel
          returns ..;
          position_simple= _L11;
          _L9= _L2 * _L4;
          _L10= fby(_L11; 1; 0.0);
          _L11= _L9 + _L13;
          _L13= if _L15 then _L14 else _L10;
          _L14= MAX_TRACK_LENGTH - CONTACT_POSITION - 1.0;
          _L15= 'initial_train;
        tel
    returns ..;
    train_speed= _L91;
    _L202= 'track_got_empty;
    _L203= 'track_got_empty;
    _L204= output_pos_head;
    _L208= output_pos_tail;
    _L225= contactSetting(_L398, _L399, contact1_position, _L431);
    _L226= #1 contactSetting(_L398, _L399, contact2_position, _L430);
    _L227, _L228= (flatten dataAll)(_L1);
    _L229= #2 limiterWithDefault(_L131, _L128, _L231, _L129);
    _L230= #1 limiterWithDefault(_L198, _L128, _L231, _L129);
    _L231= 0.0;
    position_tail= _L131;
    _L232= position_tail;
    _L233= position_head;
    _L234= position_tail;
    _L245= localErrorCode;
    _L268= E_OK;
    
    automaton SM3
      initial state eh_track_empty
        unless
          if 'enters_front or 'enters_rear or 'initial_train restart eh_occupied;

      state eh_occupied
        unless
          if 'enters_front or 'enters_rear do let emit 's_E_TRACK_OCCUPIED; tel restart eh_occupied;
          if 'left_front or 'left_rear restart eh_track_empty;
    returns ..;
    localErrorCode= _L257;
    _L258= E_TRACK_DOUBLE_ENTRY;
    _L257= if _L293 then _L258 else _L270;
    _L256= _L254 and _L255;
    _L255= 'enters_rear;
    _L254= 'enters_front;
    _L270= if _L294 then _L272 else _L340;
    _L271= 's_E_TRACK_OCCUPIED;
    _L272= E_TRACK_OCCUPIED;
    _L274= fby(_L183; 1; false);
    _L275= fby(_L289; 1; false);
    _L277= curMotormode;
    _L278= _L277 = _L279;
    _L279= M_PRIMARY;
    m_forward= _L278;
    _L282= m_forward;
    _L284= _L189 and _L282;
    _L285= m_forward;
    _L286= not _L285;
    _L287= not _L288;
    _L288= m_forward;
    _L289= _L192 and _L290;
    _L290= m_forward;
    _L292= fby(_L293; 1; false);
    _L293= _L292 or _L256;
    _L294= _L295 or _L271;
    _L295= fby(_L294; 1; false);
    _L301= curSpeed;
    _L302= curSpeed;
    _L308= if _L317 then _L315 else _L312;
    prevSpeed= _L308;
    _L312= if _L110 then _L299 else _L313;
    _L313= INIT_SPEED;
    _L317, _L315, _L388= (flatten dataLocal)(_L228);
    _L319= curMotormode;
    _L322= 'enters_front;
    _L323= 'enters_rear;
    _L324= _L322 or _L323;
    emit 's_E_MOTORMODE_MISMATCH if _L351;
    _L325= curSpeed;
    _L326= prevSpeed;
    _L327= _L325 <> _L326;
    _L328= _L324 and _L327;
    emit 's_E_SPEED_MISMATCH if _L328;
    _L329= E_MOTORMODE_MISMATCH;
    _L330= E_SPEED_MISMATCH;
    _L332= 's_E_MOTORMODE_MISMATCH;
    _L333= 's_E_SPEED_MISMATCH;
    _L337= fby(_L339; 1; false);
    _L338= fby(_L341; 1; false);
    _L339= _L337 or _L332;
    _L340= if _L339 then _L329 else _L342;
    _L341= _L338 or _L333;
    _L342= if _L341 then _L330 else _L268;
    _L343= _L344 = _L319;
    _L344= M_PRIMARY;
    _L346= 'enters_rear;
    _L345= _L346 and _L343;
    _L347= _L349 and _L350;
    _L348= _L345 or _L347;
    _L349= not _L343;
    _L350= 'enters_front;
    _L351= _L348 or _L352;
    _L352= _L353 and _L324;
    _L353= _L355 = _L354;
    _L354= curMotormode;
    _L355= M_BRAKE;
    _L29= #1 ContactPairModifier(_L22, _L30, track_nr);
    _L74= #1 PositionModifier(_L70, _L72, track_nr);
    _L75= #2 PositionModifier(_L71, _L73, track_nr);
    _L249= #1 ErrorCodeModifier(_L241, _L245, track_nr);
    extData= _L360;
    _L360= (make trackExtData)(_L361, _L364, _L365, _L372);
    _L361= _L411 <> _L363;
    _L363= -1.0;
    _L364= train_speed;
    _L365= false;
    _L366= #1 countDownEvent(_L372, _L367, _L368, _L369);
    _L367= UPDATENEWSPEED;
    _L368= TIME_CYCLE;
    _L369= true;
    _L370= 0.0;
    _L371= _L366 <= _L370;
    _L372= fby(_L371; 1; false);
    _L374= extData;
    _L375= #2 ExtDataModifier(_L356, _L374, _L376);
    _L376= track_nr;
    _L379= if _L433 then _L229 else _L230;
    _L380= if _L433 then _L230 else _L229;
    _L382= _L397 = _L383;
    _L383= AL_BACKWARD;
    inittrains= _L384;
    
    automaton SM4
      initial state startup
        var
          _L1 : initialTrainArray;
          _L5 : TrainAlignmentType;
          _L7 : bool;
          _L8 : bool;
          _L9 : TrainAlignmentType;
        let
          _L1= inittrains;
          _L5= (_L1.[track_nr] default AL_NONE);
          emit 'initial_train if _L8;
          _L7= _L5 = _L9;
          _L8= not _L7;
          _L9= AL_NONE;
        tel
        until
          if true restart running;

      state running
    returns ..;
    prevAlignment= _L391;
    curAlignment= _L393;
    _L389= curAlignment;
    _L390= curAlignment;
    _L391= if _L317 then _L388 else _L387;
    _L392= prevAlignment;
    _L393= if _L396 then _L395 else _L406;
    _L394= inittrains;
    _L395= (_L394.[track_nr] default AL_NONE);
    _L396= 'initial_train;
    _L397= curAlignment;
    _L398= if _L434 then _L204 else _L208;
    _L399= if _L434 then _L208 else _L204;
    _L406= if _L409 then _L392 else _L410;
    _L407= 'enters_front;
    _L408= 'enters_rear;
    _L409= _L407 or _L408;
    _L410= fby(_L393; 1; AL_NONE);
    _L411= output_pos_head;
    switchHeadTail= _L382;
    _L417= switchHeadTail;
    _L418= switchHeadTail;
    lastTrainDirection #pragma kcg 
									doc "Graphical_1" {Text = "Assumes that the last motormode PRIMARY or SECONDARY is also the train direction (maybe not holds for further development)"}
								 #end=
      _L425;
    _L420= _L422 = _L421;
    _L421= curMotormode;
    _L422= M_PRIMARY;
    _L423= _L421 = _L424;
    _L424= M_SECONDARY;
    _L425= if _L420 then _L427 else _L426;
    _L426= if _L423 then _L428 else _L429;
    _L427= D_PRIMARY;
    _L428= D_SECONDARY;
    _L429= fby(_L425; 1; D_UNKNOWN);
    _L430= lastTrainDirection;
    _L431= lastTrainDirection;
    _L433= not _L417;
    _L434= not _L418;
  tel;
  
  node contactSetting(
      head_pos : positionType;
      tail_pos : positionType;
      contact_pos : positionType;
      in_direction : TrainDirectionType)
    returns (contactSignal : ReedContactValue)
  sig
    head_behind, tail_behind, passed, head_ahead, tail_ahead, idle;
  var
    direction : TrainDirectionType;
    _L4 : bool;
    _L5 : bool;
    _L12 : bool;
    _L14 : bool;
    _L16 : positionType;
    _L17 : positionType;
    _L18 : positionType;
    _L19 : positionType;
    _L20 : positionType;
    _L21 : positionType;
    _L22 : positionType;
    _L23 : positionType;
    _L25 : ReedContactValue;
    _L43 : positionType;
    _L44 : positionType;
    _L45 : positionType;
    _L47 : bool;
    _L48 : bool;
    _L49 : bool;
    _L50 : bool;
    _L56 : bool;
    _L57 : bool;
    _L58 : real;
    _L59 : bool;
    _L64 : bool;
    _L69 : positionType;
    _L70 : positionType;
    _L71 : bool;
    _L72 : bool;
    _L73 : bool;
    _L75 : positionType;
    _L65 : TrainDirectionType;
  let
    contactSignal= _L25;
    _L4= _L20 <= _L18;
    _L5= _L19 <= _L17;
    _L12= _L23 >= _L16;
    _L14= _L21 >= _L22;
    _L16= contact_pos;
    _L17= contact_pos;
    _L18= contact_pos;
    _L19= head_pos;
    _L20= tail_pos;
    _L21= head_pos;
    _L22= contact_pos;
    _L23= tail_pos;
    _L25= (make ReedContactValue)(_L64, _L65);
    _L43= INIT_POSITION;
    _L44= head_pos;
    _L45= tail_pos;
    _L47= _L44 <> _L43;
    _L48= _L43 <> _L45;
    _L49= _L5 and _L47;
    _L50= _L48 and _L4;
    
    automaton SM1
      initial state idle
        unless
          if 'head_ahead do restart head_ahead_prim;
          if 'tail_behind do restart tail_behind_sek;
        var
          _L3 : TrainDirectionType;
        let
          _L3= D_UNKNOWN;
          direction= _L3;
        tel

      state head_behind_prim
        unless
          if 'head_ahead do let emit 'passed; tel restart head_ahead_sek;
          if 'tail_behind do let emit 'passed; tel restart tail_behind_prim;
        var
          _L6 : TrainDirectionType;
        let
          direction= _L6;
          _L6= in_direction;
        tel

      state tail_ahead__sek
        unless
          if 'tail_behind do let emit 'passed; tel restart tail_behind_prim;
          if 'head_ahead do let emit 'passed; tel restart head_ahead_sek;
        var
          _L5 : TrainDirectionType;
        let
          direction= _L5;
          _L5= in_direction;
        tel

      state head_ahead_prim
        unless
          if 'head_behind do let emit 'passed; tel restart head_behind_prim;
          if 'idle restart idle;
        var
          _L3 : TrainDirectionType;
        let
          direction= _L3;
          _L3= in_direction;
        tel

      state tail_behind_sek
        unless
          if 'tail_ahead do let emit 'passed; tel restart tail_ahead__sek;
          if 'idle restart idle;
        var
          _L5 : TrainDirectionType;
        let
          direction= _L5;
          _L5= in_direction;
        tel

      state head_ahead_sek
        unless
          if true do restart idle;
        var
          _L3 : TrainDirectionType;
        let
          direction= _L3;
          _L3= in_direction;
        tel

      state tail_behind_prim
        unless
          if true do restart idle;
        var
          _L3 : TrainDirectionType;
        let
          direction= _L3;
          _L3= in_direction;
        tel
    returns ..;
    emit 'head_behind if _L56;
    emit 'tail_behind if _L59;
    _L56= _L14 and _L57;
    _L57= _L21 < _L58;
    _L58= MAX_TRACK_LENGTH;
    _L59= _L12 and _L12;
    _L64= 'passed;
    emit 'head_ahead if _L49;
    emit 'tail_ahead if _L50;
    _L69= head_pos;
    _L70= tail_pos;
    _L71= _L69 = _L75;
    _L72= _L75 = _L70;
    _L73= _L71 and _L72;
    _L75= INIT_POSITION;
    emit 'idle if _L73;
    _L65= direction;
  tel;
  
  function limiterWithDefault(
      input : real;
      highLimit : real;
      lowLimit : real;
      defaultVal : real)
    returns (output : real)
  var
    _L1 : real;
    _L2 : real;
    _L3 : bool;
    _L4 : real;
    _L5 : real;
    _L6 : real;
    _L7 : bool;
    _L8 : real;
    _L9 : real;
    _L10 : real;
    _L11 : real;
  let
    _L1= input;
    _L2= highLimit;
    _L3= _L1 > _L2;
    _L4= if _L3 then _L5 else _L9;
    _L5= defaultVal;
    _L6= input;
    _L7= _L6 < _L8;
    _L8= lowLimit;
    _L9= if _L7 then _L10 else _L11;
    _L10= defaultVal;
    _L11= input;
    output= _L4;
  tel;
  
  node switchPoint1(
      input_straight : dataAll;
      input_turn : dataAll;
      input_rear : dataLocal;
      switch_nr : int)
    returns (
      output_straight : dataLocal;
      output_turn : dataLocal;
      output_rear : dataAll)
  var
    direction : PointStatus;
    global_straight : dataGlobal;
    global_turn : dataGlobal;
    localErrorCode : errorType;
    new_dataGlobal : dataGlobal;
    local_straight : dataLocal;
    local_turn : dataLocal;
    _L1 : dataAll;
    _L2 : dataAll;
    _L3 : dataLocal;
    _L6 : PointStatus;
    _L8 : dataLocal;
    _L11 : PointStatus;
    _L12 : PointStatus;
    _L13 : dataLocal;
    _L14 : dataLocal;
    _L15 : dataAll;
    _L23 : PointStatus;
    _L24 : PointStatus;
    _L25 : int;
    _L41 : dataLocal;
    _L42 : dataLocal;
    _L43 : dataLocal;
    _L46 : dataLocal;
    _L45 : dataGlobal;
    _L48 : dataLocal;
    _L47 : dataGlobal;
    _L49 : dataAll;
    _L50 : dataGlobal;
    _L51 : dataGlobal;
    _L62 : bool;
    _L60 : bool;
    _L59 : PointStatus;
    _L58 : errorType;
    _L57 : errorType;
    _L56 : PointStatus;
    _L55 : bool;
    _L54 : errorType;
    _L53 : bool;
    _L52 : bool;
    _L64 : dataGlobal;
    _L65 : dataLocal;
    _L66 : dataLocal;
    _L67 : dataLocal;
    _L68 : dataLocal;
    _L72 : controllerCommands;
    _L71 : controllerFeedback;
    _L73 : dataGlobal;
    _L78 : contactArray;
    _L77 : positionArray;
    _L76 : positionArray;
    _L75 : errorArray;
    _L74 : errorArray;
    _L79 : controllerFeedback;
    _L80 : errorType;
    _L82 : int;
    _L81 : errorArray;
    _L87 : dataGlobal;
    _L88 : bool;
    _L89 : bool;
    _L94 : trackExtDataArray;
    _L101 : dataGlobal;
    _L102 : controllerCommands;
    _L103 : pointArray;
    _L104 : bool;
    _L105 : bool;
  let
    _L1= input_straight;
    _L2= input_turn;
    _L3= input_rear;
    output_straight= _L42;
    output_turn= _L43;
    output_rear= _L49;
    direction= _L23;
    _L6= direction;
    _L8= INIT_DATA_LOCAL;
    _L11= direction;
    _L12= direction;
    _L13= input_rear;
    _L14= INIT_DATA_LOCAL;
    _L15= input_straight;
    _L23= (_L103.[_L25] default _L24);
    _L24= P_STRAIGHT;
    _L25= switch_nr;
    _L41= (case _L6 of | P_STRAIGHT: _L66 | _: _L65);
    _L42= (case _L11 of | P_STRAIGHT: _L3 | _: _L8);
    _L43= (case _L12 of | P_STRAIGHT: _L14 | _: _L13);
    _L45, _L46= (flatten dataAll)(_L1);
    _L47, _L48= (flatten dataAll)(_L2);
    global_straight= _L45;
    global_turn= _L47;
    _L49= (make dataAll)(_L64, _L41);
    _L50= global_straight;
    _L51= global_turn;
    _L52= _L53 or _L55;
    _L53= _L105 and _L60;
    _L54= E_WRONG_SWITCHPOINT_DIRECTION;
    _L55= _L104 and _L62;
    _L56= direction;
    _L57= if _L88 then _L54 else _L58;
    _L58= E_OK;
    _L59= P_STRAIGHT;
    _L60= _L56 = _L59;
    _L62= not _L60;
    localErrorCode= _L57;
    new_dataGlobal= _L73;
    _L64= new_dataGlobal;
    local_straight= _L46;
    local_turn= _L48;
    _L65= local_turn;
    _L66= local_straight;
    _L67= local_turn;
    _L68= local_straight;
    _L72, _L71= (flatten dataGlobal)(_L87);
    _L78, _L77, _L76, _L75, _L74, _L94= (flatten controllerFeedback)(_L71);
    _L73= (make dataGlobal)(_L72, _L79);
    _L79= (make controllerFeedback)(_L78, _L77, _L76, _L75, _L81, _L94);
    _L80= localErrorCode;
    _L82= switch_nr;
    _L87= #1 mergeGlobalData(_L50, _L51);
    _L88= _L89 or _L52;
    _L89= fby(_L88; 1; false);
    _L81= #1 ErrorCodeModifier(_L74, _L80, _L82);
    _L101= _L15.d_global;
    _L102= _L101.commands;
    _L103= _L102.points;
    _L104= _L68.enters;
    _L105= _L67.enters;
  tel;
  
  node switchPointCross(
      input_straight_front : dataAll;
      input_turn_front : dataAll;
      input_straight_rear : dataLocal;
      input_turn_rear : dataLocal;
      switch_nr1 : int;
      switch_nr2 : int;
      belongs_to_track : int)
    returns (
      output_straight_rear : dataLocal;
      output_turn_rear : dataLocal;
      output_straight_front : dataAll;
      output_turn_front : dataAll)
  sig
    s_E_FORBIDDEN, s_E_WRONG_DIRECTION, enters_rear, s_E_MOTORMODE_MISMATCH, s_E_SPEED_MISMATCH,
    enters_front;
  var
    pointstatus_front : PointStatus;
    global_straight_front_val : dataGlobal;
    global_turn_front_val : dataGlobal;
    pointstatus_rear : PointStatus;
    local_straight_front_val : dataLocal;
    local_turn_front_val : dataLocal;
    straight_front_bool : bool;
    straight_rear_bool : bool;
    localErrorCode : errorType;
    new_dataGlobal_val : dataGlobal;
    commands : controllerCommands;
    curSpeed : speedValue;
    prevSpeed : speedValue;
    curMotormode : MotormodeType;
    _L15 : dataAll;
    _L16 : dataAll;
    _L29 : dataGlobal;
    _L28 : dataLocal;
    _L46 : dataGlobal;
    _L45 : dataLocal;
    _L51 : dataAll;
    _L52 : dataAll;
    _L63 : dataLocal;
    _L65 : bool;
    _L66 : PointStatus;
    _L77 : bool;
    _L75 : PointStatus;
    _L87 : PointStatus;
    _L97 : dataLocal;
    _L109 : dataLocal;
    _L115 : dataLocal;
    _L116 : dataLocal;
    _L117 : bool;
    _L118 : bool;
    _L119 : dataLocal;
    _L121 : dataLocal;
    _L122 : dataLocal;
    _L123 : dataLocal;
    _L124 : dataLocal;
    _L125 : dataLocal;
    _L126 : bool;
    _L128 : dataLocal;
    _L129 : dataLocal;
    _L130 : dataLocal;
    _L131 : bool;
    _L132 : dataLocal;
    _L133 : dataLocal;
    _L135 : dataLocal;
    _L136 : dataLocal;
    _L146 : bool;
    _L147 : errorType;
    _L148 : errorType;
    _L151 : dataGlobal;
    _L155 : controllerCommands;
    _L154 : controllerFeedback;
    _L156 : dataGlobal;
    _L161 : contactArray;
    _L160 : positionArray;
    _L159 : positionArray;
    _L158 : errorArray;
    _L157 : errorArray;
    _L162 : controllerFeedback;
    _L166 : errorType;
    _L168 : dataGlobal;
    _L169 : dataGlobal;
    _L170 : errorArray;
    _L171 : int;
    _L172 : errorArray;
    _L173 : int;
    _L174 : dataGlobal;
    _L183 : PointStatus;
    _L182 : int;
    _L178 : PointStatus;
    _L177 : int;
    _L176 : PointStatus;
    _L188 : controllerCommands;
    _L204 : bool;
    _L201 : errorType;
    _L198 : errorType;
    _L197 : errorType;
    _L208 : dataLocal;
    _L209 : dataLocal;
    _L210 : dataLocal;
    _L211 : dataLocal;
    _L218 : bool;
    _L219 : bool;
    _L220 : bool;
    _L221 : bool;
    _L222 : bool;
    _L223 : bool;
    _L224 : bool;
    _L225 : bool;
    _L226 : bool;
    _L244 : bool;
    _L245 : bool;
    _L246 : bool;
    _L247 : bool;
    _L248 : dataGlobal;
    _L249 : bool;
    _L250 : bool;
    _L251 : bool;
    _L252 : bool;
    _L365 : bool;
    _L364 : bool;
    _L363 : MotormodeType;
    _L362 : bool;
    _L361 : bool;
    _L360 : bool;
    _L359 : bool;
    _L358 : bool;
    _L357 : bool;
    _L356 : bool;
    _L355 : MotormodeType;
    _L354 : MotormodeType;
    _L353 : bool;
    _L352 : MotormodeType;
    _L351 : bool;
    _L350 : bool;
    _L349 : speedValue;
    _L348 : bool;
    _L347 : speedValue;
    _L346 : bool;
    _L345 : bool;
    _L372 : dataLocal;
    _L373 : dataLocal;
    _L374 : dataLocal;
    _L375 : dataLocal;
    _L376 : bool;
    _L377 : bool;
    _L378 : bool;
    _L379 : bool;
    _L380 : bool;
    _L381 : bool;
    _L387 : dataLocal;
    _L386 : dataLocal;
    _L385 : dataLocal;
    _L384 : dataLocal;
    _L392 : speedValue;
    _L393 : speedValue;
    _L394 : speedValue;
    _L395 : speedValue;
    _L396 : speedValue;
    _L397 : speedValue;
    _L398 : speedValue;
    _L400 : bool;
    _L401 : MotormodeType;
    _L402 : speedValue;
    _L403 : int;
    _L405 : bool;
    _L404 : bool;
    _L410 : errorType;
    _L411 : bool;
    _L412 : errorType;
    _L413 : errorType;
    _L415 : bool;
    _L414 : bool;
    _L416 : errorType;
    _L417 : bool;
    _L418 : trackExtDataArray;
    _L425 : bool;
    _L426 : bool;
    _L432 : pointArray;
    _L433 : motormodeArray;
    _L434 : speedArray;
    _L435 : bool;
    _L436 : bool;
    _L437 : bool;
    _L438 : bool;
  let
    _L15= input_straight_front;
    _L16= input_turn_front;
    _L29, _L28= (flatten dataAll)(_L15);
    global_straight_front_val= _L29;
    global_turn_front_val= _L46;
    _L46, _L45= (flatten dataAll)(_L16);
    _L51= (make dataAll)(_L169, _L116);
    _L52= (make dataAll)(_L168, _L97);
    output_straight_front #pragma kcg 
									doc "Graphical_1" {Text = "if both straight then KIO->ICST4"}
								 #end=
      _L51;
    output_turn_front= _L52;
    local_straight_front_val= _L28;
    local_turn_front_val= _L45;
    _L63= if _L118 then _L109 else _L115;
    _L65= _L87 = _L66;
    _L66= P_STRAIGHT;
    _L75= pointstatus_rear;
    _L77= _L66 = _L75;
    _L87= pointstatus_front;
    _L97= if _L131 then _L123 else _L119;
    straight_front_bool= _L65;
    straight_rear_bool= _L77;
    _L109= local_straight_front_val;
    _L115= INIT_DATA_LOCAL;
    _L116= if _L117 then _L63 else _L115;
    _L117= straight_front_bool;
    _L118= straight_rear_bool;
    _L119= if _L126 then _L121 else _L122;
    _L121= local_straight_front_val;
    _L122= local_turn_front_val;
    _L123= INIT_DATA_LOCAL;
    _L124= if _L131 then _L128 else _L129;
    _L125= if _L126 then _L124 else _L130;
    _L126= straight_front_bool;
    output_straight_rear #pragma kcg 
									doc "Graphical_1" {Text = "if both straight KIOLN1 <- ICST4  if turn rear KIOLN1 <- OCST0"}
								 #end=
      _L125;
    _L128= input_straight_rear;
    _L129= input_turn_rear;
    _L130= INIT_DATA_LOCAL;
    _L131= straight_rear_bool;
    _L132= if _L118 then _L136 else _L133;
    _L133= if _L117 then _L136 else _L135;
    output_turn_rear= _L132;
    _L135 #pragma kcg 
									doc "Graphical_1" {Text = "if both straight then OCLN5<-OCST0"}
								 #end=
      input_turn_rear;
    _L136= INIT_DATA_LOCAL;
    emit 's_E_FORBIDDEN if _L247;
    _L146= 's_E_FORBIDDEN;
    _L147= if _L251 then _L148 else _L201;
    _L148= E_FORBIDDEN_SWITCHCROSS_SETTING;
    localErrorCode= _L147;
    _L151= global_straight_front_val;
    _L155, _L154= (flatten dataGlobal)(_L248);
    _L156= (make dataGlobal)(_L155, _L162);
    new_dataGlobal_val= _L156;
    _L161, _L160, _L159, _L158, _L157, _L418=
      (flatten controllerFeedback)(_L154);
    _L162= (make controllerFeedback)(_L161, _L160, _L159, _L158, _L172, _L418);
    _L166= localErrorCode;
    _L168= new_dataGlobal_val;
    _L169= new_dataGlobal_val;
    _L171= switch_nr1;
    _L173= switch_nr2;
    _L174= global_turn_front_val;
    _L176= (_L432.[_L177] default _L183);
    pointstatus_rear= _L176;
    _L177= switch_nr2;
    _L178= (_L432.[_L182] default _L183);
    _L182= switch_nr1;
    pointstatus_front= _L178;
    _L183= P_STRAIGHT;
    commands= _L155;
    _L188= commands;
    _L197= E_WRONG_SWITCHPOINT_DIRECTION;
    _L198= E_OK;
    _L201= if _L249 then _L197 else _L410;
    _L204= not _L245;
    _L208= local_straight_front_val;
    _L209= local_turn_front_val;
    _L210= input_straight_rear;
    _L211= input_turn_rear;
    _L218= not _L246;
    _L219= _L438 and _L204;
    _L220= _L246 and _L436;
    _L221= _L436 and _L245;
    _L222= _L220 or _L221;
    _L223= _L218 and _L437;
    _L224= _L437 and _L204;
    _L225= _L223 or _L224;
    _L226= _L435 and _L246;
    emit 's_E_WRONG_DIRECTION if _L222;
    emit 's_E_WRONG_DIRECTION if _L226;
    emit 's_E_WRONG_DIRECTION if _L225;
    emit 's_E_WRONG_DIRECTION if _L219;
    _L244= 's_E_WRONG_DIRECTION;
    _L245= straight_front_bool;
    _L246= straight_rear_bool;
    _L247= _L246 and _L204;
    _L248= #1 mergeGlobalData(_L151, _L174);
    _L249= _L250 or _L244;
    _L250= fby(_L249; 1; false);
    _L251= _L252 or _L146;
    _L252= fby(_L251; 1; false);
    emit 's_E_SPEED_MISMATCH if _L358;
    _L345= _L364 or _L361;
    _L346= _L359 or _L357;
    _L347= curSpeed;
    _L348= _L347 <> _L349;
    _L349= prevSpeed;
    _L350= _L355 = _L352;
    _L351= _L346 or _L356;
    _L352= curMotormode;
    _L353= not _L350;
    _L354= M_BRAKE;
    _L355= M_PRIMARY;
    emit 's_E_MOTORMODE_MISMATCH if _L425;
    _L356= _L360 and _L345;
    _L357= _L353 and _L362;
    _L358= _L345 and _L348;
    _L359= _L365 and _L350;
    _L360= _L354 = _L363;
    _L361= 'enters_rear;
    _L362= 'enters_front;
    _L363= curMotormode;
    _L364= 'enters_front;
    _L365= 'enters_rear;
    curSpeed= _L402;
    curMotormode= _L401;
    _L372= local_straight_front_val;
    _L373= local_turn_front_val;
    _L374= input_straight_rear;
    _L375= input_turn_rear;
    _L376= _L372.enters;
    _L377= _L373.enters;
    _L378= _L374.enters;
    _L379= _L375.enters;
    _L380= _L376 or _L377;
    _L381= _L378 or _L379;
    emit 'enters_front if _L380;
    emit 'enters_rear if _L381;
    _L384= input_straight_rear;
    _L385= local_straight_front_val;
    _L386= input_turn_rear;
    _L387= local_turn_front_val;
    _L392= _L385.curSpeed;
    _L393= _L387.curSpeed;
    _L394= _L384.curSpeed;
    _L395= _L386.curSpeed;
    _L396= if _L376 then _L392 else _L393;
    _L397= if _L378 then _L394 else _L395;
    _L398= if _L400 then _L396 else _L397;
    prevSpeed= _L398;
    _L400= 'enters_front;
    _L401= (_L433.[_L403] default INIT_MOTORMODE);
    _L402= (_L434.[_L403] default INIT_SPEED);
    _L403= belongs_to_track;
    _L404= _L405 or _L411;
    _L405= fby(_L404; 1; false);
    _L410= if _L404 then _L412 else _L416;
    _L411= 's_E_MOTORMODE_MISMATCH;
    _L412= E_MOTORMODE_MISMATCH;
    _L413= E_SPEED_MISMATCH;
    _L414= _L415 or _L417;
    _L415= fby(_L414; 1; false);
    _L416= if _L414 then _L413 else _L198;
    _L417= 's_E_SPEED_MISMATCH;
    _L170= #1 ErrorCodeModifier(_L157, _L166, _L171);
    _L172= #2 ErrorCodeModifier(_L170, _L166, _L173);
    _L425= _L426 and _L351;
    _L426= false;
    _L432= _L188.points;
    _L433= _L188.motormodes;
    _L434= _L188.speeds;
    _L435= _L211.enters;
    _L436= _L209.enters;
    _L437= _L210.enters;
    _L438= _L208.enters;
  tel;
  
  function prepareDisplayData(
      environment_feedback_debug : controllerFeedbackDebug;
      environment_feedback_sensors : controllerFeedbackSensor;
      controllerCommand : controllerCommands)
    returns (out_displayData : displayDataT)
  var
    _L1 : controllerFeedbackDebug;
    _L2 : controllerCommands;
    _L3 : displayDataT;
    _L9 : speedArray;
    _L8 : motormodeArray;
    _L7 : pointArray;
    _L17 : controllerFeedbackSensor;
    _L21 : errorArray;
    _L20 : errorArray;
    _L19 : positionArray;
    _L18 : positionArray;
    _L22 : contactArray;
    _L23 : motormodeArray;
    _L24 : trackExtDataArray;
    _L27 : signalArray;
    _L28 : signalArray;
    _L29 : initialTrainArray;
  let
    _L1= environment_feedback_debug;
    out_displayData= _L3;
    _L2= controllerCommand;
    _L3= (make displayDataT)(_L18, _L19, _L23, _L20, _L7, _L21, _L27, _L28);
    _L7, _L8, _L9, _L27, _L28, _L29= (flatten controllerCommands)(_L2);
    _L17= environment_feedback_sensors;
    _L18, _L19, _L20, _L21= (flatten controllerFeedbackDebug)(_L1);
    _L22, _L24= (flatten controllerFeedbackSensor)(_L17);
    _L23= #1 prepareMotormodeMerge(_L8, _L9);
    _= _L22;
    _= _L24;
    _= _L29;
  tel;
  
  function prepareMotormode(motormode : MotormodeType; speed : speedValue)
    returns (out_motormode : MotormodeType)
  var
    _L1 : MotormodeType;
    _L2 : speedValue;
    _L3 : MotormodeType;
    _L4 : MotormodeType;
    _L5 : MotormodeType;
    _L6 : bool;
    _L7 : real;
    _L8 : MotormodeType;
    _L9 : MotormodeType;
    _L10 : MotormodeType;
    _L11 : MotormodeType;
  let
    _L1= motormode;
    _L2= speed;
    out_motormode= _L3;
    _L3=
      (case _L1 of
      | M_BRAKE: _L4
      | M_PRIMARY: _L10
      | M_SECONDARY: _L11
      | _: _L5);
    _L4= M_BRAKE;
    _L5= M_OFF;
    _L6= _L2 > _L7;
    _L7= 0.0;
    _L8= M_PRIMARY;
    _L9= M_SECONDARY;
    _L10= if _L6 then _L8 else _L5;
    _L11= if _L6 then _L9 else _L5;
  tel;
  
  node innerCircle(
      input_front_OC : dataLocal;
      input_rear_OC : dataLocal;
      input_front_OCKH : dataLocal;
      input_rear_OCKH : dataLocal;
      input_dataGlobal : dataGlobal)
    returns (
      output_front_OC : dataLocal;
      output_rear_OC : dataLocal;
      output_front_OCKH : dataLocal;
      output_rear_OCKH : dataLocal;
      output_dataGlobal : dataGlobal)
  var
    Input_dataGlobal : dataGlobal;
    Output_dataGlobal : dataGlobal;
    _L87 : dataAll;
    _L88 : dataLocal;
    _L85 : dataAll;
    _L86 : dataLocal;
    _L83 : dataAll;
    _L84 : dataLocal;
    _L81 : dataAll;
    _L82 : dataLocal;
    _L76 : dataAll;
    _L77 : dataLocal;
    _L72 : dataLocal;
    _L73 : dataLocal;
    _L74 : dataAll;
    _L69 : dataLocal;
    _L70 : dataLocal;
    _L71 : dataAll;
    _L67 : dataAll;
    _L68 : dataLocal;
    _L65 : dataAll;
    _L66 : dataLocal;
    _L56 : dataAll;
    _L57 : dataLocal;
    _L53 : dataLocal;
    _L54 : dataLocal;
    _L55 : dataAll;
    _L52 : dataLocal;
    _L47 : dataAll;
    _L48 : dataLocal;
    _L43 : dataLocal;
    _L39 : dataAll;
    _L40 : dataLocal;
    _L34 : dataGlobal;
    _L31 : dataAll;
    _L32 : dataLocal;
    _L28 : dataAll;
    _L29 : dataLocal;
    _L26 : dataLocal;
    _L23 : dataAll;
    _L24 : dataLocal;
    _L19 : dataLocal;
    _L16 : dataLocal;
    _L17 : dataLocal;
    _L18 : dataAll;
    _L10 : dataAll;
    _L11 : dataLocal;
    _L1 : dataAll;
    _L2 : dataLocal;
    _L96 : dataGlobal;
    _L120 : dataAll;
    _L121 : dataLocal;
    _L100 : dataLocal;
    _L95 : dataAll;
    _L93 : dataAll;
    _L3 : dataLocal;
    _L6 : dataLocal;
    _L7 : dataLocal;
    _L8 : dataLocal;
    _L9 : dataLocal;
    _L12 : dataLocal;
    _L13 : dataLocal;
    _L14 : dataLocal;
    _L15 : dataLocal;
    _L20 : dataLocal;
    _L21 : dataLocal;
    _L22 : dataLocal;
    _L25 : dataLocal;
    _L30 : dataLocal;
    _L35 : dataLocal;
    _L36 : dataLocal;
    _L37 : dataLocal;
    _L38 : dataLocal;
    _L41 : dataLocal;
    _L42 : dataLocal;
    _L44 : dataLocal;
    _L45 : dataLocal;
    _L58 : dataLocal;
    _L59 : dataLocal;
    _L60 : dataLocal;
    _L64 : dataLocal;
    _L75 : dataLocal;
    _L102 : dataLocal;
    _L51 : dataAll;
    _L50 : dataAll;
    _L49 : dataLocal;
    _L63 : dataAll;
    _L62 : dataAll;
    _L61 : dataLocal;
    _L80 : dataAll;
    _L79 : dataAll;
    _L78 : dataLocal;
    _L91 : dataAll;
    _L90 : dataAll;
    _L89 : dataLocal;
    _L125 : dataGlobal;
    _L126 : dataLocal;
    _L128 : dataLocal;
    _L130 : dataGlobal;
    _L133 : dataGlobal;
    _L136 : dataGlobal;
    _L129 : dataAll;
    _L138 : dataLocal;
    _L140 : dataLocal;
    _L141 : dataLocal;
    _L142 : dataLocal;
  let
    _L1, _L2= #6 track(_L129, _L6, C::IC_LN_5);
    output_front_OCKH= _L142;
    output_rear_OCKH= _L140;
    _L10, _L11= #14 track(_L65, _L41, C::IC_LN_3);
    _L16, _L17, _L18= #4 switchPoint1(_L120, _L76, _L37, 23);
    _L19= input_front_OC;
    _L23, _L24= #13 track(_L10, _L44, C::IC_LN_4);
    _L26= input_rear_OCKH;
    _L28, _L29= #5 track(_L93, _L45, C::OI_LN_1);
    _L31, _L32= #3 track(_L28, _L35, C::OI_LN_2);
    _L34= input_dataGlobal;
    _L39, _L40= #12 track(_L47, _L13, C::IC_LN_1);
    _L43= input_front_OCKH;
    _L47, _L48= #8 track(_L90, _L9, C::IC_LN_0);
    _L52= input_rear_OC;
    _L53, _L54, _L55= #3 switchPoint1(_L1, _L95, _L38, 18);
    _L56, _L57= #4 track(_L62, _L15, C::IC_ST_1);
    _L65, _L66= #9 track(_L39, _L25, C::IC_LN_2);
    _L67, _L68= #15 track(_L80, _L3, C::IO_LN_0);
    _L69, _L70, _L71= #2 switchPoint1(_L56, _L18, _L20, 24);
    _L72, _L73, _L74= #1 switchPoint1(_L23, _L31, _L8, 13);
    output_dataGlobal= _L133;
    _L76, _L77= #2 track(_L51, _L14, C::IC_ST_2);
    output_rear_OC= _L29;
    _L81, _L82= #1 track(_L74, _L12, C::IC_JCT_0);
    _L83, _L84= #7 track(_L67, _L36, C::IO_LN_1);
    _L85, _L86= #11 track(_L71, _L22, C::IC_ST_4);
    _L87, _L88= #16 track(_L55, _L75, C::IC_ST_0);
    Input_dataGlobal= _L34;
    _L96= Input_dataGlobal;
    output_front_OC= _L100;
    _L120, _L121= #17 track(_L50, _L60, C::IC_ST_3);
    _L125, _L100= #3 dataAll2Local(_L83);
    _L95= #2 dataLocal2All(_L96, _L138);
    _L93= #1 dataLocal2All(_L136, _L19);
    _L3= #12 cycleBreaker(_L84);
    _L6= #22 cycleBreaker(_L53);
    _L7= #26 cycleBreaker(_L49);
    _L8= #5 cycleBreaker(_L82);
    _L9= #21 cycleBreaker(_L40);
    _L12= #4 cycleBreaker(_L78);
    _L13= #9 cycleBreaker(_L66);
    _L14= #13 cycleBreaker(_L17);
    _L15= #19 cycleBreaker(_L69);
    _L20= #15 cycleBreaker(_L86);
    _L21= #17 cycleBreaker(_L141);
    _L22= #18 cycleBreaker(_L89);
    _L25= #23 cycleBreaker(_L11);
    _L30= #20 cycleBreaker(_L68);
    _L35= #3 cycleBreaker(_L73);
    _L36= #8 cycleBreaker(_L52);
    _L37= #14 cycleBreaker(_L70);
    _L38= #16 cycleBreaker(_L88);
    _L41= #24 cycleBreaker(_L24);
    _L42= #25 cycleBreaker(_L57);
    _L44= #1 cycleBreaker(_L72);
    _L45= #7 cycleBreaker(_L32);
    _L58= #2 cycleBreaker(_L2);
    _L59= #27 cycleBreaker(_L77);
    _L60= #6 cycleBreaker(_L16);
    _L64= #11 cycleBreaker(_L48);
    _L75= #10 cycleBreaker(_L61);
    _L102= #29 cycleBreaker(_L121);
    _L49, _L50, _L51= #2 switchPoint2(_L63, _L102, _L59, 19);
    _L61, _L62, _L63= #3 switchPoint2(_L87, _L42, _L7, 20);
    _L78, _L79, _L80= #1 switchPoint2(_L81, _L58, _L30, 11);
    _L89, _L90, _L91= #4 switchPoint2(_L85, _L64, _L21, 29);
    _L130= Input_dataGlobal;
    Output_dataGlobal= _L125;
    _L133= Output_dataGlobal;
    _L136= Input_dataGlobal;
    _L129= #3 dataLocal2All(_L130, _L128);
    _L126= #1 dataAll2LocalOnly(_L91);
    _L128= #2 dataAll2LocalOnly(_L79);
    _L138= #2 switchAlignment(_L43, true);
    _L140= #3 switchAlignment(_L54, true);
    _L141= #4 switchAlignment(_L26, true);
    _L142= #5 switchAlignment(_L126, true);
  tel;
  
  node dataAll2Local(input_dataAll : dataAll)
    returns (output_dataGlobal : dataGlobal; output_dataLocal : dataLocal)
  var
    _L11 : dataGlobal;
    _L10 : dataLocal;
    _L12 : dataAll;
    _L14 : dataLocal;
  let
    output_dataLocal= _L14;
    _L11, _L10= (flatten dataAll)(_L12);
    _L12= input_dataAll;
    _L14= #2 cycleBreaker(_L10);
    output_dataGlobal= _L11;
  tel;
  
  function dataLocal2All(
      input_dataGlobal : dataGlobal;
      input_dataLocal : dataLocal)
    returns (output_dataAll : dataAll)
  var
    _L1 : dataLocal;
    _L2 : dataGlobal;
    _L3 : dataAll;
  let
    _L1= input_dataLocal;
    _L2= input_dataGlobal;
    _L3= (make dataAll)(_L2, _L1);
    output_dataAll= _L3;
  tel;
  
  node outerCircle(
      input_front_IC : dataLocal;
      input_rear_IC : dataLocal;
      input_front_ICKH : dataLocal;
      input_rear_ICKH : dataLocal;
      input_dataGlobal : dataGlobal;
      input_front_KH : dataLocal;
      input_rear_KH : dataLocal)
    returns (
      output_front_IC : dataLocal;
      output_rear_IC : dataLocal;
      output_front_ICKH : dataLocal;
      output_rear_ICKH : dataLocal;
      output_dataGlobal : dataGlobal;
      output_front_KH : dataLocal;
      output_rear_KH : dataLocal)
  var
    Output_dataGlobal : dataGlobal;
    Input_dataGlobal : dataGlobal;
    _L79 : dataAll;
    _L80 : dataLocal;
    _L74 : dataAll;
    _L75 : dataLocal;
    _L72 : dataLocal;
    _L70 : dataAll;
    _L71 : dataLocal;
    _L68 : dataAll;
    _L69 : dataLocal;
    _L64 : dataLocal;
    _L65 : dataLocal;
    _L66 : dataAll;
    _L63 : dataLocal;
    _L53 : dataLocal;
    _L54 : dataLocal;
    _L55 : dataAll;
    _L50 : dataAll;
    _L51 : dataLocal;
    _L48 : dataLocal;
    _L47 : dataLocal;
    _L43 : dataAll;
    _L44 : dataLocal;
    _L41 : dataAll;
    _L42 : dataLocal;
    _L38 : dataAll;
    _L39 : dataLocal;
    _L34 : dataAll;
    _L35 : dataLocal;
    _L31 : dataAll;
    _L32 : dataLocal;
    _L30 : dataGlobal;
    _L27 : dataAll;
    _L28 : dataLocal;
    _L25 : dataAll;
    _L26 : dataLocal;
    _L14 : dataAll;
    _L15 : dataLocal;
    _L10 : dataLocal;
    _L9 : dataLocal;
    _L5 : dataLocal;
    _L6 : dataLocal;
    _L7 : dataAll;
    _L8 : dataAll;
    _L1 : dataAll;
    _L2 : dataLocal;
    _L92 : dataAll;
    _L91 : dataLocal;
    _L90 : dataLocal;
    _L96 : dataAll;
    _L97 : dataLocal;
    _L100 : dataAll;
    _L103 : dataGlobal;
    _L104 : dataLocal;
    _L112 : dataGlobal;
    _L113 : dataAll;
    _L118 : dataAll;
    _L119 : dataGlobal;
    _L3 : dataLocal;
    _L4 : dataLocal;
    _L11 : dataLocal;
    _L12 : dataLocal;
    _L13 : dataLocal;
    _L16 : dataLocal;
    _L19 : dataLocal;
    _L23 : dataLocal;
    _L29 : dataLocal;
    _L33 : dataLocal;
    _L36 : dataLocal;
    _L37 : dataLocal;
    _L45 : dataLocal;
    _L49 : dataLocal;
    _L52 : dataLocal;
    _L56 : dataLocal;
    _L61 : dataLocal;
    _L62 : dataLocal;
    _L67 : dataLocal;
    _L73 : dataLocal;
    _L81 : dataLocal;
    _L82 : dataLocal;
    _L87 : dataLocal;
    _L88 : dataLocal;
    _L89 : dataLocal;
    _L98 : dataLocal;
    _L99 : dataLocal;
    _L120 : dataLocal;
    _L22 : dataAll;
    _L21 : dataAll;
    _L20 : dataLocal;
    _L78 : dataAll;
    _L77 : dataAll;
    _L76 : dataLocal;
    _L95 : dataAll;
    _L94 : dataAll;
    _L93 : dataLocal;
    _L121 : dataLocal;
    _L122 : dataLocal;
    _L123 : dataGlobal;
    _L125 : dataAll;
    _L126 : dataLocal;
    _L129 : dataGlobal;
    _L130 : dataGlobal;
    _L134 : dataAll;
    _L133 : dataAll;
    _L132 : dataLocal;
    _L131 : dataLocal;
  let
    _L1, _L2= #3 track(_L113, _L11, C::KIO_LN_1);
    _L5, _L6, _L7, _L8=
      switchPointCross(_L27, _L118, _L23, _L81, 16, 17, C::OC_ST_4);
    _L9= input_front_KH;
    _L10= input_rear_KH;
    _L14, _L15= #15 track(_L7, _L87, C::OC_LN_0);
    _L25, _L26= #11 track(_L79, _L29, C::OC_LN_4);
    output_rear_ICKH= _L121;
    _L27, _L28= #5 track(_L66, _L56, C::OC_ST_4);
    _L30= input_dataGlobal;
    _L31, _L32= #8 track(_L77, _L3, C::OC_ST_1);
    _L34, _L35= #13 track(_L70, _L33, C::OC_LN_2);
    output_front_IC= _L104;
    _L38, _L39= #9 track(_L134, _L89, C::OC_ST_0);
    output_rear_KH= _L2;
    _L41, _L42= #1 track(_L95, _L73, C::OI_LN_0);
    _L43, _L44= #2 track(_L100, _L88, C::IO_LN_2);
    _L47= input_front_ICKH;
    _L48= input_rear_IC;
    _L50, _L51= #7 track(_L78, _L52, C::OC_ST_2);
    output_rear_IC= _L44;
    _L53, _L54, _L55= #2 switchPoint1(_L31, _L50, _L13, 22);
    output_front_ICKH= _L6;
    output_dataGlobal= _L129;
    _L63= input_front_IC;
    _L64, _L65, _L66= #1 switchPoint1(_L68, _L55, _L36, 21);
    _L68, _L69= #6 track(_L21, _L4, C::OC_ST_3);
    _L70, _L71= #14 track(_L125, _L61, C::OC_LN_1);
    _L72= input_rear_ICKH;
    _L74, _L75= #10 track(_L25, _L12, C::OC_LN_5);
    _L79, _L80= #12 track(_L34, _L82, C::OC_LN_3);
    output_front_KH= _L122;
    _L90, _L91, _L92= #3 switchPoint1(_L14, _L43, _L99, 10);
    _L96, _L97= #16 track(_L92, _L98, C::OC_JCT_0);
    _L100= #5 dataLocal2All(_L103, _L63);
    Input_dataGlobal= _L30;
    _L103= Input_dataGlobal;
    _L123, _L104= #5 dataAll2Local(_L41);
    _L112= Input_dataGlobal;
    _L113= #3 dataLocal2All(_L112, _L9);
    _L118= #1 dataLocal2All(_L119, _L120);
    _L119= Input_dataGlobal;
    _L3= #10 cycleBreaker(_L53);
    _L4= #12 cycleBreaker(_L64);
    _L11= #5 cycleBreaker(_L131);
    _L12= #6 cycleBreaker(_L132);
    _L13= #13 cycleBreaker(_L65);
    _L16= #3 cycleBreaker(_L42);
    _L19= #17 cycleBreaker(_L76);
    _L23= #25 cycleBreaker(_L15);
    _L29= #20 cycleBreaker(_L75);
    _L33= #22 cycleBreaker(_L80);
    _L36= #9 cycleBreaker(_L28);
    _L37= #14 cycleBreaker(_L69);
    _L45= #19 cycleBreaker(_L39);
    _L49= #16 cycleBreaker(_L32);
    _L52= #11 cycleBreaker(_L54);
    _L56= #8 cycleBreaker(_L5);
    _L61= #23 cycleBreaker(_L35);
    _L62= #24 cycleBreaker(_L71);
    _L67= #15 cycleBreaker(_L51);
    _L73= #2 cycleBreaker(_L48);
    _L81= #7 cycleBreaker(_L10);
    _L82= #21 cycleBreaker(_L26);
    _L87= #26 cycleBreaker(_L90);
    _L88= #4 cycleBreaker(_L91);
    _L89= #18 cycleBreaker(_L20);
    _L98= #27 cycleBreaker(_L93);
    _L99= #28 cycleBreaker(_L97);
    _L120= #29 cycleBreaker(_L72);
    _L20, _L21, _L22= #2 switchPoint2(_L38, _L37, _L19, 25);
    _L76, _L77, _L78= #1 switchPoint2(_L22, _L49, _L67, 26);
    _L93, _L94, _L95= #3 switchPoint2(_L96, _L62, _L16, 12);
    _L125= #4 dataLocal2All(_L130, _L126);
    Output_dataGlobal= _L123;
    _L129= Output_dataGlobal;
    _L130= Input_dataGlobal;
    _L131, _L132, _L133, _L134=
      #2 switchPointCross(_L1, _L74, _L47, _L45, 28, 27, C::OC_ST_0);
    _L122= #1 dataAll2LocalOnly(_L8);
    _L126= #2 dataAll2LocalOnly(_L94);
    _L121= #3 dataAll2LocalOnly(_L133);
  tel;
  
  node tracksimulator(commands : controllerCommands)
    returns (
      feedback_debug : controllerFeedbackDebug;
      feedback_sensors : controllerFeedbackSensor)
  var
    output : dataGlobal;
    input : dataGlobal;
    _L9 : controllerFeedback;
    _L6 : dataGlobal;
    _L42 : controllerFeedbackDebug;
    _L43 : dataGlobal;
    _L48 : dataGlobal;
    _L50 : controllerCommands;
    _L57 : contactArray;
    _L56 : positionArray;
    _L55 : positionArray;
    _L54 : errorArray;
    _L53 : errorArray;
    _L58 : controllerFeedbackSensor;
    _L59 : dataLocal;
    _L60 : dataLocal;
    _L67 : dataLocal;
    _L66 : dataLocal;
    _L65 : dataGlobal;
    _L64 : dataLocal;
    _L63 : dataLocal;
    _L62 : dataLocal;
    _L61 : dataLocal;
    _L72 : dataLocal;
    _L71 : dataLocal;
    _L70 : dataGlobal;
    _L69 : dataLocal;
    _L68 : dataLocal;
    _L47 : dataGlobal;
    _L73 : controllerFeedback;
    _L74 : trackExtDataArray;
  let
    input= _L43;
    _L6= output;
    _L9= INIT_FEEDBACK;
    _L42= (make controllerFeedbackDebug)(_L56, _L55, _L54, _L53);
    _L43= (make dataGlobal)(_L50, _L9);
    _L47, _L60, _L59= #1 kickingHorsePass(_L48, _L63, _L64);
    _L48= input;
    output= _L70;
    feedback_sensors= _L58;
    feedback_debug= _L42;
    _L50= commands;
    _L57, _L56, _L55, _L54, _L53, _L74= (flatten controllerFeedback)(_L73);
    _L58= (make controllerFeedbackSensor)(_L57, _L74);
    _L61, _L62, _L66, _L67, _L65, _L63, _L64=
      #1 outerCircle(_L68, _L69, _L72, _L71, _L47, _L60, _L59);
    _L68, _L69, _L72, _L71, _L70= #1 innerCircle(_L61, _L62, _L66, _L67, _L65);
    _L73= _L6.feedback;
  tel;
  
  node cycleBreaker(input : dataLocal) returns (output : dataLocal)
  var
    _L1 : dataLocal;
    _L2 : dataLocal;
    _L3 : dataLocal;
  let
    _L1= input;
    output= _L2;
    _L2= fby(_L1; 1; _L3);
    _L3= INIT_DATA_LOCAL;
  tel;
  
  node switchPoint2(
      input_front : dataAll;
      input_straight : dataLocal;
      input_turn : dataLocal;
      switch_nr : int)
    returns (
      output_front : dataLocal;
      output_straight : dataAll;
      output_turn : dataAll)
  var
    direction : PointStatus;
    localErrorCode : errorType;
    new_dataGlobal : dataGlobal;
    _L1 : dataAll;
    _L11 : PointStatus;
    _L10 : int;
    _L9 : PointStatus;
    _L12 : dataAll;
    _L14 : PointStatus;
    _L15 : dataAll;
    _L17 : dataLocal;
    _L21 : dataAll;
    _L23 : dataLocal;
    _L24 : dataLocal;
    _L25 : dataLocal;
    _L26 : PointStatus;
    _L27 : dataLocal;
    _L28 : dataLocal;
    _L31 : bool;
    _L32 : PointStatus;
    _L33 : bool;
    _L34 : bool;
    _L35 : bool;
    _L37 : errorType;
    _L38 : bool;
    _L39 : errorType;
    _L40 : errorType;
    _L43 : dataAll;
    _L47 : controllerCommands;
    _L46 : controllerFeedback;
    _L52 : contactArray;
    _L51 : positionArray;
    _L50 : positionArray;
    _L49 : errorArray;
    _L48 : errorArray;
    _L53 : dataGlobal;
    _L54 : controllerFeedback;
    _L55 : errorArray;
    _L56 : int;
    _L57 : errorType;
    _L60 : dataAll;
    _L61 : dataAll;
    _L62 : dataGlobal;
    _L63 : dataAll;
    _L64 : dataGlobal;
    _L65 : dataAll;
    _L66 : dataGlobal;
    _L69 : bool;
    _L70 : bool;
    _L75 : trackExtDataArray;
    _L84 : pointArray;
    _L83 : controllerCommands;
    _L82 : dataGlobal;
    _L85 : dataGlobal;
    _L86 : bool;
    _L87 : bool;
    _L88 : dataLocal;
    _L89 : dataLocal;
  let
    _L1= input_front;
    _L9= (_L84.[_L10] default _L11);
    direction= _L9;
    _L10= switch_nr;
    _L11= P_STRAIGHT;
    output_front= _L17;
    output_straight= _L15;
    output_turn= _L61;
    _L12= input_front;
    _L14= direction;
    _L15= (case _L14 of | P_STRAIGHT: _L63 | _: _L60);
    _L17= (case _L14 of | P_STRAIGHT: _L24 | _: _L25);
    _L60= (make dataAll)(_L62, _L23);
    _L21= input_front;
    _L23= INIT_DATA_LOCAL;
    _L24= input_straight;
    _L25= input_turn;
    _L26= direction;
    _L27= input_straight;
    _L28= input_turn;
    _L31= _L26 = _L32;
    _L32= P_STRAIGHT;
    _L33= _L87 and _L31;
    _L34= not _L31;
    _L35= _L86 and _L34;
    localErrorCode= _L37;
    _L37= if _L70 then _L39 else _L40;
    _L38= _L33 or _L35;
    _L39= E_WRONG_SWITCHPOINT_DIRECTION;
    _L40= E_OK;
    new_dataGlobal= _L53;
    _L43= input_front;
    _L47, _L46= (flatten dataGlobal)(_L85);
    _L52, _L51, _L50, _L49, _L48, _L75= (flatten controllerFeedback)(_L46);
    _L53= (make dataGlobal)(_L47, _L54);
    _L54= (make controllerFeedback)(_L52, _L51, _L50, _L49, _L55, _L75);
    _L56= switch_nr;
    _L57= localErrorCode;
    _L61= (case _L14 of | P_STRAIGHT: _L60 | _: _L65);
    _L62= new_dataGlobal;
    _L63= (make dataAll)(_L64, _L88);
    _L64= new_dataGlobal;
    _L65= (make dataAll)(_L66, _L89);
    _L66= new_dataGlobal;
    _L69= fby(_L70; 1; false);
    _L70= _L69 or _L38;
    _L55= #1 ErrorCodeModifier(_L48, _L57, _L56);
    _L82= _L1.d_global;
    _L83= _L82.commands;
    _L84= _L83.points;
    _L85= _L43.d_global;
    _L86= _L27.enters;
    _L87= _L28.enters;
    _L88= _L21.d_local;
    _L89= _L12.d_local;
  tel;
  
  function mergeGlobalData(globalData1 : dataGlobal; globalData2 : dataGlobal)
    returns (outputData : dataGlobal)
  var
    _L1 : dataGlobal;
    _L4 : controllerFeedback;
    _L3 : controllerCommands;
    _L7 : dataGlobal;
    _L10 : positionArray;
    _L9 : positionArray;
    _L8 : contactArray;
    _L13 : positionArray;
    _L12 : positionArray;
    _L11 : contactArray;
    _L30 : controllerFeedback;
    _L31 : errorArray;
    _L32 : errorArray;
    _L33 : errorArray;
    _L34 : errorArray;
    _L38 : dataGlobal;
    _L39 : contactArray;
    _L40 : positionArray;
    _L41 : positionArray;
    _L42 : errorArray;
    _L43 : errorArray;
    _L44 : trackExtDataArray;
    _L45 : trackExtDataArray;
    _L46 : trackExtDataArray;
    _L49 : controllerFeedback;
  let
    _L1= globalData1;
    outputData= _L7;
    _L3, _L4= (flatten dataGlobal)(_L1);
    _L7= (make dataGlobal)(_L3, _L30);
    _L8, _L9, _L10, _L31, _L33, _L44= (flatten controllerFeedback)(_L4);
    _L11, _L12, _L13, _L32, _L34, _L45= (flatten controllerFeedback)(_L49);
    _L30= (make controllerFeedback)(_L39, _L40, _L41, _L42, _L43, _L46);
    _L39, _L40, _L41, _L42, _L43, _L46=
      #1 mergeSingleDataArrays(_L8, _L9, _L10, _L31, _L33, _L44, _L11, _L12, _L13,
        _L32, _L34, _L45);
    _L38= globalData2;
    _L49= _L38.feedback;
  tel;
  
  function mergeSingleData(
      contacts_1 : contactPair;
      head_pos_1 : positionType;
      tail_pos_1 : positionType;
      errorBlock_1 : errorType;
      errorPoint_1 : errorType;
      contacts_2 : contactPair;
      head_pos_2 : positionType;
      tail_pos_2 : positionType;
      errorBlock_2 : errorType;
      errorPoint_2 : errorType;
      trackExtData_1 : trackExtData;
      trackExtData_2 : trackExtData)
    returns (
      merged_contacts : contactPair;
      merged_head_pos : positionType;
      merged_tail_pos : positionType;
      merged_errorBlock : errorType;
      merged_errorPoint : errorType;
      merged_trackExtData : trackExtData)
  var
    _L1 : contactPair;
    _L2 : positionType;
    _L3 : positionType;
    _L4 : contactPair;
    _L5 : positionType;
    _L6 : positionType;
    _L8 : contactPair;
    _L9 : contactPair;
    _L11 : bool;
    _L12 : positionType;
    _L13 : bool;
    _L14 : positionType;
    _L15 : positionType;
    _L16 : positionType;
    _L17 : errorType;
    _L18 : errorType;
    _L19 : errorType;
    _L20 : errorType;
    _L21 : errorType;
    _L22 : errorType;
    _L23 : bool;
    _L24 : bool;
    _L25 : errorType;
    _L26 : errorType;
    _L27 : trackExtData;
    _L28 : trackExtData;
    _L29 : bool;
    _L30 : trackExtData;
    _L31 : trackExtData;
    _L35 : speedNewData;
    _L34 : trackShutdown;
    _L33 : speedValue;
    _L32 : trackOccupied;
    _L43 : speedNewData;
    _L42 : trackShutdown;
    _L41 : speedValue;
    _L40 : trackOccupied;
    _L44 : bool;
    _L45 : bool;
    _L46 : bool;
    _L47 : bool;
    _L49 : ReedContactValue;
    _L48 : ReedContactValue;
    _L53 : TrainDirectionType;
    _L52 : bool;
    _L54 : bool;
    _L55 : TrainDirectionType;
    _L60 : bool;
    _L61 : TrainDirectionType;
    _L58 : bool;
    _L59 : TrainDirectionType;
    _L56 : ReedContactValue;
    _L57 : ReedContactValue;
    _L62 : bool;
    _L63 : bool;
    _L64 : bool;
    _L65 : bool;
    _L66 : bool;
    _L68 : contactPair;
  let
    _L1= contacts_1;
    _L2= head_pos_1;
    _L3= tail_pos_1;
    merged_contacts= _L9;
    merged_head_pos= _L12;
    merged_tail_pos= _L14;
    _L4= contacts_2;
    _L5= head_pos_2;
    _L6= tail_pos_2;
    _L8= INIT_CONTACT_PAIR;
    _L9= if _L66 then _L68 else _L4;
    _L11= _L2 <> _L15;
    _L12= if _L11 then _L2 else _L5;
    _L13= _L3 <> _L16;
    _L14= if _L13 then _L3 else _L6;
    _L15= INIT_POSITION;
    _L16= INIT_POSITION;
    _L17= errorBlock_1;
    _L18= errorBlock_2;
    _L19= errorPoint_1;
    _L20= errorPoint_2;
    _L21= INIT_ERROR;
    _L22= INIT_ERROR;
    _L23= _L17 <> _L21;
    _L24= _L19 <> _L22;
    _L25= if _L23 then _L17 else _L18;
    _L26= if _L24 then _L19 else _L20;
    merged_errorBlock= _L25;
    merged_errorPoint= _L26;
    _L27= trackExtData_1;
    _L28= trackExtData_2;
    merged_trackExtData= _L31;
    _L29= _L33 <> _L41;
    _L30= INIT_TRACKEXTDATA;
    _L31= if _L47 then _L27 else _L28;
    _L32, _L33, _L34, _L35= (flatten trackExtData)(_L27);
    _L40, _L41, _L42, _L43= (flatten trackExtData)(_L30);
    _L44= _L32 <> _L40;
    _L45= _L34 <> _L42;
    _L46= _L35 <> _L43;
    _L47= _L44 or _L29 or _L45 or _L46;
    _L48, _L49= (flatten contactPair)(_L1);
    _L52, _L53= (flatten ReedContactValue)(_L48);
    _L54, _L55= (flatten ReedContactValue)(_L49);
    _L56, _L57= (flatten contactPair)(_L8);
    _L58, _L59= (flatten ReedContactValue)(_L56);
    _L60, _L61= (flatten ReedContactValue)(_L57);
    _L62= _L52 <> _L58;
    _L63= _L53 <> _L59;
    _L64= _L54 <> _L60;
    _L65= _L55 <> _L61;
    _L66= _L62 or _L63 or _L64 or _L65;
    _L68= contacts_1;
  tel;
  
  function mergeSingleDataArrays(
      contactArray1 : contactArray;
      positionArrayHead1 : positionArray;
      positionArrayTail1 : positionArray;
      errorArrayBlocks1 : errorArray;
      errorArrayPoints1 : errorArray;
      trackExtDataArray1 : trackExtDataArray;
      contactArray2 : contactArray;
      positionArrayHead2 : positionArray;
      positionArrayTail2 : positionArray;
      errorArrayBlocks2 : errorArray;
      errorArrayPoints2 : errorArray;
      trackExtDataArray2 : trackExtDataArray)
    returns (
      contactsArrayMerged : contactArray;
      positionArrayHeadMerged : positionArray;
      positionArrayTailMerged : positionArray;
      errorArrayBlocksMerged : errorArray;
      errorArrayPointsMerged : errorArray;
      trackExtDataArrayMerged : trackExtDataArray)
  var
    _L10 : errorType^48;
    _L9 : errorType^48;
    _L8 : positionType^48;
    _L7 : positionType^48;
    _L6 : contactPair^48;
    _L13 : contactArray;
    _L14 : positionArray;
    _L16 : errorArray;
    _L18 : contactArray;
    _L19 : positionArray;
    _L20 : errorArray;
    _L21 : positionArray;
    _L22 : positionArray;
    _L23 : errorArray;
    _L24 : errorArray;
    _L25 : trackExtData^48;
    _L26 : trackExtDataArray;
    _L27 : trackExtDataArray;
  let
    _L6, _L7, _L8, _L9, _L10, _L25=
      (map mergeSingleData <<48>>)(_L13, _L14, _L19, _L16, _L20, _L18, _L21, _L22,
        _L23, _L24, _L26, _L27);
    _L13= contactArray1;
    _L14= positionArrayHead1;
    _L16= errorArrayBlocks1;
    _L18= contactArray2;
    _L19= positionArrayTail1;
    _L20= errorArrayPoints1;
    _L21= positionArrayHead2;
    _L22= positionArrayTail2;
    _L23= errorArrayBlocks2;
    _L24= errorArrayPoints2;
    contactsArrayMerged= _L6;
    positionArrayHeadMerged= _L7;
    positionArrayTailMerged= _L8;
    errorArrayBlocksMerged= _L9;
    errorArrayPointsMerged= _L10;
    _L26= trackExtDataArray1;
    _L27= trackExtDataArray2;
    trackExtDataArrayMerged= _L25;
  tel;
  
  function prepareMotormodeMerge(
      Motormodes : motormodeArray;
      Speeds : speedArray)
    returns (PreparedMotormodes : motormodeArray)
  var
    _L2 : MotormodeType^48;
    _L3 : motormodeArray;
    _L4 : speedArray;
  let
    _L2= (map prepareMotormode <<48>>)(_L3, _L4);
    _L3= Motormodes;
    _L4= Speeds;
    PreparedMotormodes= _L2;
  tel;
  
  function imported ContactPairModifier(
      arrayIn : contactArray;
      value : contactPair;
      index : int)
    returns (arrayOut : contactArray);
  
  function imported ErrorCodeModifier(
      arrayIn : errorArray;
      value : errorType;
      index : int)
    returns (arrayOut : errorArray);
  
  function imported PositionModifier(
      arrayIn : positionArray;
      value : positionType;
      index : int)
    returns (arrayOut : positionArray);
  
  node countDownEvent(Reset : bool; N : real; step : real; Event : bool)
    returns (cpt : real)
  var
    _L1 : bool;
    _L2 : real;
    _L3 : bool;
    _L4 : real;
    _L5 : real;
    _L6 : real;
    _L7 : real;
    _L8 : real;
    _L9 : real;
    _L10 : real;
  let
    _L1= Reset;
    _L2= N;
    _L3= Event;
    _L4= step;
    cpt= _L5;
    _L5= if _L1 then _L2 else _L6;
    _L6= _L2 -> _L8;
    _L7= _L5 - _L9;
    _L8= pre _L7;
    _L9= if _L3 then _L4 else _L10;
    _L10= 0.0;
  tel;
  
  function imported ExtDataModifier(
      arrayIn : trackExtDataArray;
      value : trackExtData;
      index : int)
    returns (arrayOut : trackExtDataArray);
  
  function imported SpeedModifier(
      arrayIn : speedArray;
      speedvalue : speedValue;
      index : int)
    returns (arrayOut : speedArray);
  
  node Simulation(in_controllerCommands : controllerCommands)
    returns (
      displayData : displayDataT;
      out_controllerFeedbackSensor : controllerFeedbackSensor)
  var
    _L35 : displayDataT;
    _L16 : controllerFeedbackDebug;
    _L17 : controllerFeedbackSensor;
    _L52 : controllerCommands;
    _L53 : controllerCommands;
  let
    _L16, _L17= #1 tracksimulator(_L52);
    _L35= #1 prepareDisplayData(_L16, _L17, _L52);
    displayData= _L35;
    out_controllerFeedbackSensor= _L17;
    _L52= in_controllerCommands;
    _L53= INIT_COMMANDS2;
    _= _L53;
  tel;
  
  node dataAll2LocalOnly(input_dataAll : dataAll)
    returns (output_dataLocal : dataLocal)
  var
    _L1 : dataAll;
    _L2 : dataLocal;
    _L3 : dataLocal;
  let
    _L1= input_dataAll;
    output_dataLocal= _L3;
    _L2= _L1.d_local;
    _L3= #1 cycleBreaker(_L2);
  tel;
  
  function switchAlignment(in_dataLocal : dataLocal; in_switch : bool)
    returns (out_dataLocal : dataLocal)
  var
    _L1 : dataLocal;
    _L2 : bool;
    _L3 : dataLocal;
    _L4 : bool;
    _L7 : TrainAlignmentType;
    _L6 : speedValue;
    _L5 : bool;
    _L8 : dataLocal;
    _L9 : TrainAlignmentType;
    _L10 : bool;
    _L11 : TrainAlignmentType;
    _L12 : TrainAlignmentType;
    _L13 : bool;
    _L14 : TrainAlignmentType;
    _L15 : TrainAlignmentType;
    _L16 : TrainAlignmentType;
    _L17 : TrainAlignmentType;
  let
    _L1= in_dataLocal;
    _L2= in_switch;
    out_dataLocal= _L3;
    _L3= if _L4 then _L1 else _L8;
    _L4= not _L2;
    _L5, _L6, _L7= (flatten dataLocal)(_L1);
    _L8= (make dataLocal)(_L5, _L6, _L9);
    _L9= if _L10 then _L12 else _L14;
    _L10= _L7 = _L11;
    _L11= AL_FORWARD;
    _L12= AL_BACKWARD;
    _L13= _L7 = _L15;
    _L14= if _L13 then _L16 else _L17;
    _L15= AL_BACKWARD;
    _L16= AL_FORWARD;
    _L17= AL_NONE;
  tel;
  
end;

/* $**************  KCG Version 6.0.0b (build i19) **************
** -
** Generation date: 2009-02-24T01:42:09
*************************************************************$ */
