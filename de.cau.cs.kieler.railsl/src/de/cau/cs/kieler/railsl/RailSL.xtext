grammar de.cau.cs.kieler.railsl.RailSL with org.eclipse.xtext.common.Terminals

generate railSL "http://www.cau.de/cs/kieler/railsl/RailSL"

Program:
	block = Block
;

Block:
	'Start:' (statements+=Statement)+ end=BLOCK_END
;

BLOCK_END:
	'End.' | 'Loop.'
;

Statement:
	SetStatement | WaitStatement | OpStatement | ConditionalStatement | ParallelStatement
;
	
SetStatement:
	TrackStatement | PointStatement
;
	
TrackStatement:
	'Set track' (segments+=SEG_NAME)(', 'segments+=SEG_NAME)*(( 'and' segments+=SEG_NAME) | (', and' segments+=SEG_NAME))? 'to' mode=TrackSetting'.'
;

TrackSetting:
	(('full' | 'slow') ('reverse')?) | 'stop'
;

PointStatement:
	'Set point' (points+=INT)(', 'points+=INT)*(( 'and' points+=INT) | (', and' points+=INT))? 'to' orientation=('straight' | 'branch')'.'
;

WaitStatement:
	TimeWaitStatement | ContactWaitStatement
;

TimeWaitStatement:
	'Wait for' + time=INT + 'seconds.'
;

ContactWaitStatement:
	event=('Reach' | 'Pass') contact=ContactIndex 'contact of' segName=SEG_NAME'.' 
;

OpStatement:
	CrossingStatement | LightStatement
;

CrossingStatement:
	mode=('Open' | 'Close') 'crossing.'
;

LightStatement:
	'Turn light' (lights+=INT)(', 'lights+=INT)*(( 'and' lights+=INT) | (', and' lights+=INT))? state=('on' | 'off')'.'
;

ConditionalStatement:
    'Branch:'
    lines+=ConditionalLine
    (lines+=ConditionalLine)+
;

ConditionalLine:
    'If' contact=ContactIndex 'contact of' segName=SEG_NAME 'is reached first, do' + block=Block
;

ParallelStatement:
    'Parallel:'
    blocks += Block
    (blocks += Block)+
;

ContactIndex:
    'first' | 'second'
;

terminal SEG_NAME:
	'KH_ST_0' | 'KH_ST_1' | 'KH_ST_2' | 'KH_ST_3' | 'KH_ST_4' | 'KH_ST_5' | 'KH_ST_6' | 
	'KH_LN_0' | 'KH_LN_1' | 'KH_LN_2' | 'KH_LN_3' | 'KH_LN_4' | 'KH_LN_5' | 'KH_LN_6' | 'KH_LN_7' | 'KH_LN_8' |
	'KIO_LN_0' | 'KIO_LN_1' | 'OC_ST_0' | 'OC_ST_1' | 'OC_ST_2' | 'OC_ST_3' | 'OC_ST_4' |
	'OC_LN_0' | 'OC_LN_1' | 'OC_LN_2' | 'OC_LN_3' | 'OC_LN_4' | 'OC_LN_5' |
	'IC_ST_0' | 'IC_ST_1' | 'IC_ST_2' | 'IC_ST_3' | 'IC_ST_4' | 
	'IC_LN_0' | 'IC_LN_1' | 'IC_LN_2' | 'IC_LN_3' | 'IC_LN_4' | 'IC_LN_5' |
	'OC_JCT_0' | 'IC_JCT_0' | 'OI_LN_0' | 'OI_LN_1' | 'OI_LN_2' |
	'IO_LN_0' | 'IO_LN_1' | 'IO_LN_2'      
;
