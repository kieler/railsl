/**
 * generated by Xtext 2.10.0
 */
package de.cau.cs.kieler.railsl.railSL.impl;

import de.cau.cs.kieler.railsl.railSL.ContactWaitStatement;
import de.cau.cs.kieler.railsl.railSL.RailSLPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Contact Wait Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.railsl.railSL.impl.ContactWaitStatementImpl#getEvent <em>Event</em>}</li>
 *   <li>{@link de.cau.cs.kieler.railsl.railSL.impl.ContactWaitStatementImpl#getContact <em>Contact</em>}</li>
 *   <li>{@link de.cau.cs.kieler.railsl.railSL.impl.ContactWaitStatementImpl#getSegName <em>Seg Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ContactWaitStatementImpl extends WaitStatementImpl implements ContactWaitStatement
{
  /**
   * The default value of the '{@link #getEvent() <em>Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected static final String EVENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEvent() <em>Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected String event = EVENT_EDEFAULT;

  /**
   * The default value of the '{@link #getContact() <em>Contact</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContact()
   * @generated
   * @ordered
   */
  protected static final String CONTACT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getContact() <em>Contact</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContact()
   * @generated
   * @ordered
   */
  protected String contact = CONTACT_EDEFAULT;

  /**
   * The default value of the '{@link #getSegName() <em>Seg Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSegName()
   * @generated
   * @ordered
   */
  protected static final String SEG_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSegName() <em>Seg Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSegName()
   * @generated
   * @ordered
   */
  protected String segName = SEG_NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContactWaitStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RailSLPackage.Literals.CONTACT_WAIT_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getEvent()
  {
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEvent(String newEvent)
  {
    String oldEvent = event;
    event = newEvent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RailSLPackage.CONTACT_WAIT_STATEMENT__EVENT, oldEvent, event));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getContact()
  {
    return contact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContact(String newContact)
  {
    String oldContact = contact;
    contact = newContact;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RailSLPackage.CONTACT_WAIT_STATEMENT__CONTACT, oldContact, contact));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSegName()
  {
    return segName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSegName(String newSegName)
  {
    String oldSegName = segName;
    segName = newSegName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RailSLPackage.CONTACT_WAIT_STATEMENT__SEG_NAME, oldSegName, segName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RailSLPackage.CONTACT_WAIT_STATEMENT__EVENT:
        return getEvent();
      case RailSLPackage.CONTACT_WAIT_STATEMENT__CONTACT:
        return getContact();
      case RailSLPackage.CONTACT_WAIT_STATEMENT__SEG_NAME:
        return getSegName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RailSLPackage.CONTACT_WAIT_STATEMENT__EVENT:
        setEvent((String)newValue);
        return;
      case RailSLPackage.CONTACT_WAIT_STATEMENT__CONTACT:
        setContact((String)newValue);
        return;
      case RailSLPackage.CONTACT_WAIT_STATEMENT__SEG_NAME:
        setSegName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RailSLPackage.CONTACT_WAIT_STATEMENT__EVENT:
        setEvent(EVENT_EDEFAULT);
        return;
      case RailSLPackage.CONTACT_WAIT_STATEMENT__CONTACT:
        setContact(CONTACT_EDEFAULT);
        return;
      case RailSLPackage.CONTACT_WAIT_STATEMENT__SEG_NAME:
        setSegName(SEG_NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RailSLPackage.CONTACT_WAIT_STATEMENT__EVENT:
        return EVENT_EDEFAULT == null ? event != null : !EVENT_EDEFAULT.equals(event);
      case RailSLPackage.CONTACT_WAIT_STATEMENT__CONTACT:
        return CONTACT_EDEFAULT == null ? contact != null : !CONTACT_EDEFAULT.equals(contact);
      case RailSLPackage.CONTACT_WAIT_STATEMENT__SEG_NAME:
        return SEG_NAME_EDEFAULT == null ? segName != null : !SEG_NAME_EDEFAULT.equals(segName);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (event: ");
    result.append(event);
    result.append(", contact: ");
    result.append(contact);
    result.append(", segName: ");
    result.append(segName);
    result.append(')');
    return result.toString();
  }

} //ContactWaitStatementImpl
